
c:/Users/USER/Desktop/Lab16/target/3.0.0/argon/Lab16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004fb4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8fd0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e504  000d8fd4  0001e504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000284  2003e56c  2003e56c  0002e56c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d903c  000d903c  0002903c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9064  000d9064  00029064  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001d49fc  00000000  00000000  00029068  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a527  00000000  00000000  001fda64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003e565  00000000  00000000  00217f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003188  00000000  00000000  002564f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009b70  00000000  00000000  00259678  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e658  00000000  00000000  002631e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00047b21  00000000  00000000  002a1840  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00128aca  00000000  00000000  002e9361  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009094  00000000  00000000  00411e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 ff4d 	bl	d7ecc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 ff6f 	bl	d7f1c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e504 	.word	0x2003e504
   d4048:	000d8fd4 	.word	0x000d8fd4
   d404c:	2003e56c 	.word	0x2003e56c
   d4050:	2003e56c 	.word	0x2003e56c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f003 fa4d 	bl	d74fc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d8fa8 	.word	0x000d8fa8
   d407c:	000d8fcc 	.word	0x000d8fcc

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b85e 	b.w	d4140 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8c3 	bl	d4210 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f003 b9f7 	b.w	d7480 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 bdbb 	b.w	d5c0c <malloc>

000d4096 <_Znaj>:
   d4096:	f001 bdb9 	b.w	d5c0c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bdbf 	b.w	d5c1c <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fd0c 	bl	d5ac4 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d56bd 	.word	0x000d56bd

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
const size_t UART_TX_BUF_SIZE = 20;

void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context);

void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
   d40c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    Serial.write(data[i]);

    if (data[i] == '1')
    {
      display.clearDisplay();
   d40c8:	4e17      	ldr	r6, [pc, #92]	; (d4128 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>)
      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(0, 0);
      display.print("You typed 1");
   d40ca:	4f18      	ldr	r7, [pc, #96]	; (d412c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68>)
   d40cc:	4604      	mov	r4, r0
   d40ce:	1845      	adds	r5, r0, r1
  for (size_t i = 0; i < len; i++)
   d40d0:	42ac      	cmp	r4, r5
   d40d2:	d027      	beq.n	d4124 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
    Serial.write(data[i]);
   d40d4:	f003 fb18 	bl	d7708 <_Z16_fetch_usbserialv>
   d40d8:	6803      	ldr	r3, [r0, #0]
   d40da:	7821      	ldrb	r1, [r4, #0]
   d40dc:	689b      	ldr	r3, [r3, #8]
   d40de:	4798      	blx	r3
    if (data[i] == '1')
   d40e0:	7823      	ldrb	r3, [r4, #0]
   d40e2:	2b31      	cmp	r3, #49	; 0x31
   d40e4:	46a0      	mov	r8, r4
   d40e6:	d112      	bne.n	d410e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4a>
      display.clearDisplay();
   d40e8:	480f      	ldr	r0, [pc, #60]	; (d4128 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>)
   d40ea:	f000 ffa9 	bl	d5040 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d40ee:	480e      	ldr	r0, [pc, #56]	; (d4128 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>)
   d40f0:	2101      	movs	r1, #1
   d40f2:	f000 fd94 	bl	d4c1e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d40f6:	2200      	movs	r2, #0
   d40f8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
      display.print("You typed 1");
   d40fc:	480a      	ldr	r0, [pc, #40]	; (d4128 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>)
   d40fe:	4639      	mov	r1, r7
   d4100:	e9c6 2304 	strd	r2, r3, [r6, #16]
   d4104:	f003 f8e6 	bl	d72d4 <_ZN5Print5printEPKc>
      display.display();
   d4108:	4807      	ldr	r0, [pc, #28]	; (d4128 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>)
   d410a:	f001 fa05 	bl	d5518 <_ZN16Adafruit_SSD13067displayEv>
    }
    if (data[i] == '0')
   d410e:	f898 3000 	ldrb.w	r3, [r8]
   d4112:	2b30      	cmp	r3, #48	; 0x30
   d4114:	f104 0401 	add.w	r4, r4, #1
   d4118:	d1da      	bne.n	d40d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc>
    {
      BLE.disconnect();
   d411a:	f002 fb2d 	bl	d6778 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d411e:	f002 fcbb 	bl	d6a98 <_ZNK8particle14BleLocalDevice10disconnectEv>
  for (size_t i = 0; i < len; i++)
   d4122:	e7d5      	b.n	d40d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc>
    }
  }
}
   d4124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4128:	2003e5b8 	.word	0x2003e5b8
   d412c:	000d7fec 	.word	0x000d7fec

000d4130 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4130:	b510      	push	{r4, lr}
   d4132:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4134:	6800      	ldr	r0, [r0, #0]
   d4136:	b108      	cbz	r0, d413c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4138:	f001 fd70 	bl	d5c1c <free>
class SystemClass {
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <setup>:
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);

void setup()
{
   d4140:	b510      	push	{r4, lr}
   d4142:	b096      	sub	sp, #88	; 0x58
  Serial.begin(9600);
   d4144:	f003 fae0 	bl	d7708 <_Z16_fetch_usbserialv>
   d4148:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d414c:	f003 fad0 	bl	d76f0 <_ZN9USBSerial5beginEl>
  BLE.on();
   d4150:	f002 fb12 	bl	d6778 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4154:	f002 fb5e 	bl	d6814 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d4158:	f002 fb0e 	bl	d6778 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d415c:	4a28      	ldr	r2, [pc, #160]	; (d4200 <setup+0xc0>)
   d415e:	4601      	mov	r1, r0
   d4160:	a80d      	add	r0, sp, #52	; 0x34
   d4162:	f002 ff73 	bl	d704c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4166:	a80d      	add	r0, sp, #52	; 0x34
   d4168:	f002 fbdb 	bl	d6922 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d416c:	f002 fb04 	bl	d6778 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4170:	4a24      	ldr	r2, [pc, #144]	; (d4204 <setup+0xc4>)
   d4172:	4601      	mov	r1, r0
   d4174:	a80d      	add	r0, sp, #52	; 0x34
   d4176:	f002 ff69 	bl	d704c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d417a:	a80d      	add	r0, sp, #52	; 0x34
   d417c:	f002 fbd1 	bl	d6922 <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData data;
   d4180:	a80d      	add	r0, sp, #52	; 0x34
   d4182:	f002 f98a 	bl	d649a <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d4186:	4920      	ldr	r1, [pc, #128]	; (d4208 <setup+0xc8>)
   d4188:	a803      	add	r0, sp, #12
   d418a:	f002 f889 	bl	d62a0 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d418e:	a903      	add	r1, sp, #12
   d4190:	a808      	add	r0, sp, #32
   d4192:	f002 f885 	bl	d62a0 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4196:	a808      	add	r0, sp, #32
   d4198:	f002 f8c8 	bl	d632c <_ZNK8particle7BleUuid4typeEv>
   d419c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d419e:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41a0:	bb34      	cbnz	r4, d41f0 <setup+0xb0>
            uint16_t uuid16 = tempUUID.shorted();
   d41a2:	f002 f8e2 	bl	d636a <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41a6:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d41a8:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41ac:	2302      	movs	r3, #2
   d41ae:	f10d 020a 	add.w	r2, sp, #10
   d41b2:	2103      	movs	r1, #3
  BLE.advertise(&data);

  display.setup();
   d41b4:	4c15      	ldr	r4, [pc, #84]	; (d420c <setup+0xcc>)
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d41b6:	a80d      	add	r0, sp, #52	; 0x34
   d41b8:	f002 f964 	bl	d6484 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d41bc:	f002 fadc 	bl	d6778 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41c0:	2200      	movs	r2, #0
   d41c2:	a90d      	add	r1, sp, #52	; 0x34
   d41c4:	f002 fb46 	bl	d6854 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  display.setup();
   d41c8:	4620      	mov	r0, r4
   d41ca:	f000 fd77 	bl	d4cbc <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d41ce:	4620      	mov	r0, r4
   d41d0:	f000 ff36 	bl	d5040 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d41d4:	2101      	movs	r1, #1
   d41d6:	4620      	mov	r0, r4
   d41d8:	f000 fd21 	bl	d4c1e <_ZN12Adafruit_GFX11setTextSizeEh>
   d41dc:	2200      	movs	r2, #0
   d41de:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d41e2:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  RGB.control(true);
   d41e6:	2001      	movs	r0, #1
   d41e8:	f003 f8f7 	bl	d73da <_ZN8RGBClass7controlEb>
}
   d41ec:	b016      	add	sp, #88	; 0x58
   d41ee:	bd10      	pop	{r4, pc}
   d41f0:	f002 f8c0 	bl	d6374 <_ZNK8particle7BleUuid8rawBytesEv>
   d41f4:	2300      	movs	r3, #0
   d41f6:	9300      	str	r3, [sp, #0]
   d41f8:	4602      	mov	r2, r0
   d41fa:	2310      	movs	r3, #16
   d41fc:	2107      	movs	r1, #7
   d41fe:	e7d9      	b.n	d41b4 <setup+0x74>
   d4200:	2003e630 	.word	0x2003e630
   d4204:	2003e628 	.word	0x2003e628
   d4208:	2003e57c 	.word	0x2003e57c
   d420c:	2003e5b8 	.word	0x2003e5b8

000d4210 <loop>:

void loop()
{
   d4210:	b500      	push	{lr}
   d4212:	b08b      	sub	sp, #44	; 0x2c
  if (BLE.connected())
   d4214:	f002 fab0 	bl	d6778 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4218:	f002 fb2f 	bl	d687a <_ZNK8particle14BleLocalDevice9connectedEv>
   d421c:	b300      	cbz	r0, d4260 <loop+0x50>
  {
    RGB.color(0, 0, 255);
   d421e:	2100      	movs	r1, #0
   d4220:	22ff      	movs	r2, #255	; 0xff
   d4222:	4608      	mov	r0, r1
   d4224:	f003 f8e9 	bl	d73fa <_ZN8RGBClass5colorEiii>
    uint8_t txBuf[UART_TX_BUF_SIZE];
    String message = "Message from Argon \n";
   d4228:	4913      	ldr	r1, [pc, #76]	; (d4278 <loop+0x68>)
   d422a:	a801      	add	r0, sp, #4
   d422c:	f001 fe73 	bl	d5f16 <_ZN6StringC1EPKc>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4230:	9a03      	ldr	r2, [sp, #12]
   d4232:	2300      	movs	r3, #0
   d4234:	3201      	adds	r2, #1
   d4236:	a905      	add	r1, sp, #20
   d4238:	a801      	add	r0, sp, #4
   d423a:	f001 fe92 	bl	d5f62 <_ZNK6String8getBytesEPhjj>
    message.toCharArray((char *)txBuf, message.length() + 1);
    txCharacteristic.setValue(txBuf, message.length() + 1);
   d423e:	9a03      	ldr	r2, [sp, #12]
   d4240:	480e      	ldr	r0, [pc, #56]	; (d427c <loop+0x6c>)
   d4242:	2300      	movs	r3, #0
   d4244:	3201      	adds	r2, #1
   d4246:	a905      	add	r1, sp, #20
   d4248:	f002 f98e 	bl	d6568 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    delay(2000);
   d424c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4250:	f003 f8ba 	bl	d73c8 <delay>
    String message = "Message from Argon \n";
   d4254:	a801      	add	r0, sp, #4
   d4256:	f001 fe13 	bl	d5e80 <_ZN6StringD1Ev>
  }
  else if (!BLE.connected())
  {
    RGB.color(255, 100, 0);
  }
   d425a:	b00b      	add	sp, #44	; 0x2c
   d425c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (!BLE.connected())
   d4260:	f002 fa8a 	bl	d6778 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4264:	f002 fb09 	bl	d687a <_ZNK8particle14BleLocalDevice9connectedEv>
   d4268:	4602      	mov	r2, r0
   d426a:	2800      	cmp	r0, #0
   d426c:	d1f5      	bne.n	d425a <loop+0x4a>
    RGB.color(255, 100, 0);
   d426e:	2164      	movs	r1, #100	; 0x64
   d4270:	20ff      	movs	r0, #255	; 0xff
   d4272:	f003 f8c2 	bl	d73fa <_ZN8RGBClass5colorEiii>
   d4276:	e7f0      	b.n	d425a <loop+0x4a>
   d4278:	000d7ff8 	.word	0x000d7ff8
   d427c:	2003e630 	.word	0x2003e630

000d4280 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4280:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4282:	4616      	mov	r6, r2
   d4284:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4286:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4288:	e9c0 2200 	strd	r2, r2, [r0]
   d428c:	4604      	mov	r4, r0
   d428e:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4290:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d4292:	4619      	mov	r1, r3
   d4294:	a806      	add	r0, sp, #24
   d4296:	f002 f803 	bl	d62a0 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d429a:	9916      	ldr	r1, [sp, #88]	; 0x58
   d429c:	4638      	mov	r0, r7
   d429e:	f001 ffff 	bl	d62a0 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d42a2:	7833      	ldrb	r3, [r6, #0]
   d42a4:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d42a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d42aa:	9302      	str	r3, [sp, #8]
   d42ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d42ae:	4620      	mov	r0, r4
   d42b0:	e9cd 7300 	strd	r7, r3, [sp]
   d42b4:	aa05      	add	r2, sp, #20
   d42b6:	ab06      	add	r3, sp, #24
   d42b8:	4629      	mov	r1, r5
   d42ba:	f002 fda5 	bl	d6e08 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d42be:	4620      	mov	r0, r4
   d42c0:	b011      	add	sp, #68	; 0x44
   d42c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d42c4 <_GLOBAL__sub_I_SystemMode>:
   d42c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              error_(SYSTEM_ERROR_NONE) {
   d42c8:	4d35      	ldr	r5, [pc, #212]	; (d43a0 <_GLOBAL__sub_I_SystemMode+0xdc>)
    SleepResult() {}
   d42ca:	4b36      	ldr	r3, [pc, #216]	; (d43a4 <_GLOBAL__sub_I_SystemMode+0xe0>)
SYSTEM_MODE(MANUAL);
   d42cc:	4e36      	ldr	r6, [pc, #216]	; (d43a8 <_GLOBAL__sub_I_SystemMode+0xe4>)
   d42ce:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d42d0:	2400      	movs	r4, #0
   d42d2:	b091      	sub	sp, #68	; 0x44
   d42d4:	602c      	str	r4, [r5, #0]
   d42d6:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d42d8:	71ac      	strb	r4, [r5, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d42da:	2003      	movs	r0, #3
   d42dc:	f001 fc02 	bl	d5ae4 <set_system_mode>
SYSTEM_MODE(MANUAL);
   d42e0:	4632      	mov	r2, r6
   d42e2:	4932      	ldr	r1, [pc, #200]	; (d43ac <_GLOBAL__sub_I_SystemMode+0xe8>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d42e4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; d43e0 <_GLOBAL__sub_I_SystemMode+0x11c>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d42e8:	4f31      	ldr	r7, [pc, #196]	; (d43b0 <_GLOBAL__sub_I_SystemMode+0xec>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d42ea:	f8df 90f8 	ldr.w	r9, [pc, #248]	; d43e4 <_GLOBAL__sub_I_SystemMode+0x120>
SYSTEM_MODE(MANUAL);
   d42ee:	4628      	mov	r0, r5
OledWingAdafruit display;
   d42f0:	4d30      	ldr	r5, [pc, #192]	; (d43b4 <_GLOBAL__sub_I_SystemMode+0xf0>)
SYSTEM_MODE(MANUAL);
   d42f2:	f003 fcb1 	bl	d7c58 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d42f6:	4621      	mov	r1, r4
   d42f8:	2001      	movs	r0, #1
   d42fa:	f001 fc03 	bl	d5b04 <system_thread_set_state>
OledWingAdafruit display;
   d42fe:	2107      	movs	r1, #7
   d4300:	4628      	mov	r0, r5
   d4302:	f000 fcad 	bl	d4c60 <_ZN16OledWingAdafruitC1Ei>
   d4306:	4628      	mov	r0, r5
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4308:	4d2b      	ldr	r5, [pc, #172]	; (d43b8 <_GLOBAL__sub_I_SystemMode+0xf4>)
OledWingAdafruit display;
   d430a:	492c      	ldr	r1, [pc, #176]	; (d43bc <_GLOBAL__sub_I_SystemMode+0xf8>)
   d430c:	4632      	mov	r2, r6
   d430e:	f003 fca3 	bl	d7c58 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4312:	492b      	ldr	r1, [pc, #172]	; (d43c0 <_GLOBAL__sub_I_SystemMode+0xfc>)
   d4314:	4628      	mov	r0, r5
   d4316:	f002 f8a9 	bl	d646c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d431a:	492a      	ldr	r1, [pc, #168]	; (d43c4 <_GLOBAL__sub_I_SystemMode+0x100>)
   d431c:	4640      	mov	r0, r8
   d431e:	f002 f8a5 	bl	d646c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4322:	4929      	ldr	r1, [pc, #164]	; (d43c8 <_GLOBAL__sub_I_SystemMode+0x104>)
   d4324:	4638      	mov	r0, r7
   d4326:	f002 f8a1 	bl	d646c <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d432a:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d432c:	4639      	mov	r1, r7
   d432e:	a806      	add	r0, sp, #24
   d4330:	f88d 3014 	strb.w	r3, [sp, #20]
   d4334:	f001 ffb4 	bl	d62a0 <_ZN8particle7BleUuidC1ERKS0_>
   d4338:	4629      	mov	r1, r5
   d433a:	a80b      	add	r0, sp, #44	; 0x2c
   d433c:	f001 ffb0 	bl	d62a0 <_ZN8particle7BleUuidC1ERKS0_>
   d4340:	4f22      	ldr	r7, [pc, #136]	; (d43cc <_GLOBAL__sub_I_SystemMode+0x108>)
   d4342:	4923      	ldr	r1, [pc, #140]	; (d43d0 <_GLOBAL__sub_I_SystemMode+0x10c>)
   d4344:	ab0b      	add	r3, sp, #44	; 0x2c
   d4346:	9300      	str	r3, [sp, #0]
   d4348:	aa05      	add	r2, sp, #20
   d434a:	ab06      	add	r3, sp, #24
   d434c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4350:	4648      	mov	r0, r9
   d4352:	f7ff ff95 	bl	d4280 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4356:	4632      	mov	r2, r6
   d4358:	4639      	mov	r1, r7
   d435a:	4648      	mov	r0, r9
   d435c:	f003 fc7c 	bl	d7c58 <__aeabi_atexit>
   d4360:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d4362:	4641      	mov	r1, r8
   d4364:	a806      	add	r0, sp, #24
   d4366:	f88d 3014 	strb.w	r3, [sp, #20]
   d436a:	f001 ff99 	bl	d62a0 <_ZN8particle7BleUuidC1ERKS0_>
   d436e:	4629      	mov	r1, r5
   d4370:	a80b      	add	r0, sp, #44	; 0x2c
   d4372:	f001 ff95 	bl	d62a0 <_ZN8particle7BleUuidC1ERKS0_>
   d4376:	4d17      	ldr	r5, [pc, #92]	; (d43d4 <_GLOBAL__sub_I_SystemMode+0x110>)
   d4378:	4b17      	ldr	r3, [pc, #92]	; (d43d8 <_GLOBAL__sub_I_SystemMode+0x114>)
   d437a:	9301      	str	r3, [sp, #4]
   d437c:	ab0b      	add	r3, sp, #44	; 0x2c
   d437e:	9300      	str	r3, [sp, #0]
   d4380:	aa05      	add	r2, sp, #20
   d4382:	ab06      	add	r3, sp, #24
   d4384:	4915      	ldr	r1, [pc, #84]	; (d43dc <_GLOBAL__sub_I_SystemMode+0x118>)
   d4386:	9402      	str	r4, [sp, #8]
   d4388:	4628      	mov	r0, r5
   d438a:	f7ff ff79 	bl	d4280 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d438e:	4632      	mov	r2, r6
   d4390:	4639      	mov	r1, r7
   d4392:	4628      	mov	r0, r5
   d4394:	f003 fc60 	bl	d7c58 <__aeabi_atexit>
   d4398:	b011      	add	sp, #68	; 0x44
   d439a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d439e:	bf00      	nop
   d43a0:	2003e570 	.word	0x2003e570
   d43a4:	ffff0000 	.word	0xffff0000
   d43a8:	2003e56c 	.word	0x2003e56c
   d43ac:	000d4131 	.word	0x000d4131
   d43b0:	2003e5a4 	.word	0x2003e5a4
   d43b4:	2003e5b8 	.word	0x2003e5b8
   d43b8:	2003e57c 	.word	0x2003e57c
   d43bc:	000d4c2d 	.word	0x000d4c2d
   d43c0:	000d800d 	.word	0x000d800d
   d43c4:	000d8032 	.word	0x000d8032
   d43c8:	000d8057 	.word	0x000d8057
   d43cc:	000d6923 	.word	0x000d6923
   d43d0:	000d807c 	.word	0x000d807c
   d43d4:	2003e628 	.word	0x2003e628
   d43d8:	000d40c5 	.word	0x000d40c5
   d43dc:	000d807f 	.word	0x000d807f
   d43e0:	2003e590 	.word	0x2003e590
   d43e4:	2003e630 	.word	0x2003e630

000d43e8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d43e8:	4770      	bx	lr

000d43ea <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d43ea:	b510      	push	{r4, lr}
  }
   d43ec:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d43ee:	4604      	mov	r4, r0
  }
   d43f0:	f003 fc37 	bl	d7c62 <_ZdlPvj>
   d43f4:	4620      	mov	r0, r4
   d43f6:	bd10      	pop	{r4, pc}

000d43f8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d43f8:	b40e      	push	{r1, r2, r3}
   d43fa:	b503      	push	{r0, r1, lr}
   d43fc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d43fe:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4400:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4404:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4406:	f002 ff96 	bl	d7336 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d440a:	b002      	add	sp, #8
   d440c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4410:	b003      	add	sp, #12
   d4412:	4770      	bx	lr

000d4414 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4414:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4416:	4604      	mov	r4, r0
   d4418:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d441a:	7922      	ldrb	r2, [r4, #4]
   d441c:	68a3      	ldr	r3, [r4, #8]
   d441e:	b132      	cbz	r2, d442e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4420:	b9a3      	cbnz	r3, d444c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4422:	490b      	ldr	r1, [pc, #44]	; (d4450 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4424:	b002      	add	sp, #8
   d4426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d442a:	f002 bf53 	b.w	d72d4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d442e:	4a09      	ldr	r2, [pc, #36]	; (d4454 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4430:	7b26      	ldrb	r6, [r4, #12]
   d4432:	4d09      	ldr	r5, [pc, #36]	; (d4458 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4434:	4909      	ldr	r1, [pc, #36]	; (d445c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4436:	7b64      	ldrb	r4, [r4, #13]
   d4438:	2e01      	cmp	r6, #1
   d443a:	bf18      	it	ne
   d443c:	4629      	movne	r1, r5
   d443e:	e9cd 1400 	strd	r1, r4, [sp]
   d4442:	4907      	ldr	r1, [pc, #28]	; (d4460 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4444:	f7ff ffd8 	bl	d43f8 <_ZN5Print6printfEPKcz>
  }
   d4448:	b002      	add	sp, #8
   d444a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d444c:	4a05      	ldr	r2, [pc, #20]	; (d4464 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d444e:	e7ef      	b.n	d4430 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4450:	000d8093 	.word	0x000d8093
   d4454:	000d800c 	.word	0x000d800c
   d4458:	000d808f 	.word	0x000d808f
   d445c:	000d808b 	.word	0x000d808b
   d4460:	000d80a9 	.word	0x000d80a9
   d4464:	000d8082 	.word	0x000d8082

000d4468 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d446c:	b085      	sub	sp, #20
   d446e:	461f      	mov	r7, r3
   d4470:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4474:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4478:	eba8 0902 	sub.w	r9, r8, r2
   d447c:	eba7 0a01 	sub.w	sl, r7, r1
   d4480:	f1b9 0f00 	cmp.w	r9, #0
   d4484:	bfb8      	it	lt
   d4486:	f1c9 0900 	rsblt	r9, r9, #0
   d448a:	f1ba 0f00 	cmp.w	sl, #0
   d448e:	bfb8      	it	lt
   d4490:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4494:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4496:	4683      	mov	fp, r0
   d4498:	460c      	mov	r4, r1
   d449a:	4615      	mov	r5, r2
    if (steep) {
   d449c:	dd04      	ble.n	d44a8 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d449e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d44a0:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d44a2:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d44a4:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d44a6:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d44a8:	42bc      	cmp	r4, r7
   d44aa:	dd05      	ble.n	d44b8 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d44ac:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d44ae:	4645      	mov	r5, r8
   d44b0:	4690      	mov	r8, r2
    if (x0 > x1) {
   d44b2:	4622      	mov	r2, r4
   d44b4:	463c      	mov	r4, r7
   d44b6:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d44b8:	1b3e      	subs	r6, r7, r4
   d44ba:	b2b2      	uxth	r2, r6
   d44bc:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d44be:	eba8 0205 	sub.w	r2, r8, r5
   d44c2:	2a00      	cmp	r2, #0
   d44c4:	bfb8      	it	lt
   d44c6:	4252      	neglt	r2, r2
   d44c8:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d44ca:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d44ce:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d44d2:	4545      	cmp	r5, r8
   d44d4:	bfb4      	ite	lt
   d44d6:	2201      	movlt	r2, #1
   d44d8:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d44dc:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d44de:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d44e0:	42bc      	cmp	r4, r7
   d44e2:	dc1c      	bgt.n	d451e <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d44e4:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d44e8:	9303      	str	r3, [sp, #12]
        if (steep) {
   d44ea:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d44ec:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d44f0:	bfc7      	ittee	gt
   d44f2:	4629      	movgt	r1, r5
   d44f4:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d44f6:	462a      	movle	r2, r5
   d44f8:	4621      	movle	r1, r4
   d44fa:	4658      	mov	r0, fp
   d44fc:	47c0      	blx	r8
        }
        err -= dy;
   d44fe:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4500:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d4502:	1ab6      	subs	r6, r6, r2
   d4504:	b2b1      	uxth	r1, r6
   d4506:	b236      	sxth	r6, r6
        if (err < 0) {
   d4508:	2e00      	cmp	r6, #0
   d450a:	da05      	bge.n	d4518 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d450c:	9a02      	ldr	r2, [sp, #8]
   d450e:	4415      	add	r5, r2
            err += dx;
   d4510:	9a00      	ldr	r2, [sp, #0]
   d4512:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4514:	b22d      	sxth	r5, r5
            err += dx;
   d4516:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4518:	3401      	adds	r4, #1
   d451a:	b224      	sxth	r4, r4
   d451c:	e7e0      	b.n	d44e0 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d451e:	b005      	add	sp, #20
   d4520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4524 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4524:	4770      	bx	lr

000d4526 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4526:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4528:	6804      	ldr	r4, [r0, #0]
   d452a:	6924      	ldr	r4, [r4, #16]
   d452c:	46a4      	mov	ip, r4
}
   d452e:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d4532:	4760      	bx	ip

000d4534 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4534:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4536:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4538:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d453c:	9502      	str	r5, [sp, #8]
   d453e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4540:	46a4      	mov	ip, r4
}
   d4542:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4544:	4760      	bx	ip

000d4546 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4546:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4548:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d454a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d454e:	9502      	str	r5, [sp, #8]
   d4550:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4552:	46a4      	mov	ip, r4
}
   d4554:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d4556:	4760      	bx	ip

000d4558 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4558:	b470      	push	{r4, r5, r6}
   d455a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d455e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4562:	6804      	ldr	r4, [r0, #0]
   d4564:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4568:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d456a:	46a4      	mov	ip, r4
}
   d456c:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d456e:	4760      	bx	ip

000d4570 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4570:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4574:	461c      	mov	r4, r3
    startWrite();
   d4576:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4578:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d457c:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d457e:	4605      	mov	r5, r0
   d4580:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d4582:	3c01      	subs	r4, #1
   d4584:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d4586:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4588:	b224      	sxth	r4, r4
    startWrite();
   d458a:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d458c:	682b      	ldr	r3, [r5, #0]
   d458e:	f8cd 8004 	str.w	r8, [sp, #4]
   d4592:	9400      	str	r4, [sp, #0]
   d4594:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4596:	4628      	mov	r0, r5
   d4598:	463b      	mov	r3, r7
   d459a:	4632      	mov	r2, r6
   d459c:	4639      	mov	r1, r7
   d459e:	47a0      	blx	r4
    endWrite();
   d45a0:	682b      	ldr	r3, [r5, #0]
   d45a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45a4:	4628      	mov	r0, r5
}
   d45a6:	b002      	add	sp, #8
   d45a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d45ac:	4718      	bx	r3

000d45ae <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d45ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d45b2:	461d      	mov	r5, r3
    startWrite();
   d45b4:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d45b6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d45ba:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d45bc:	4604      	mov	r4, r0
   d45be:	4617      	mov	r7, r2
   d45c0:	460e      	mov	r6, r1
    startWrite();
   d45c2:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d45c4:	e9cd 7800 	strd	r7, r8, [sp]
   d45c8:	6822      	ldr	r2, [r4, #0]
   d45ca:	1e6b      	subs	r3, r5, #1
   d45cc:	4433      	add	r3, r6
   d45ce:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d45d0:	4620      	mov	r0, r4
   d45d2:	b21b      	sxth	r3, r3
   d45d4:	463a      	mov	r2, r7
   d45d6:	4631      	mov	r1, r6
   d45d8:	47a8      	blx	r5
    endWrite();
   d45da:	6823      	ldr	r3, [r4, #0]
   d45dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45de:	4620      	mov	r0, r4
}
   d45e0:	b002      	add	sp, #8
   d45e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d45e6:	4718      	bx	r3

000d45e8 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d45e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d45ec:	461e      	mov	r6, r3
    startWrite();
   d45ee:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d45f0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d45f4:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d45f6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d45fa:	460c      	mov	r4, r1
   d45fc:	4605      	mov	r5, r0
   d45fe:	4617      	mov	r7, r2
    startWrite();
   d4600:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4602:	4426      	add	r6, r4
   d4604:	42b4      	cmp	r4, r6
   d4606:	682b      	ldr	r3, [r5, #0]
   d4608:	da0b      	bge.n	d4622 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d460a:	f8cd 8000 	str.w	r8, [sp]
   d460e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4612:	4621      	mov	r1, r4
   d4614:	464b      	mov	r3, r9
   d4616:	463a      	mov	r2, r7
   d4618:	4628      	mov	r0, r5
   d461a:	3401      	adds	r4, #1
   d461c:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d461e:	b224      	sxth	r4, r4
   d4620:	e7f0      	b.n	d4604 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d4622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4624:	4628      	mov	r0, r5
}
   d4626:	b002      	add	sp, #8
   d4628:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d462c:	4718      	bx	r3

000d462e <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d462e:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4630:	6802      	ldr	r2, [r0, #0]
   d4632:	9101      	str	r1, [sp, #4]
   d4634:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4638:	9100      	str	r1, [sp, #0]
   d463a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d463c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4640:	2200      	movs	r2, #0
   d4642:	4611      	mov	r1, r2
   d4644:	47a0      	blx	r4
}
   d4646:	b002      	add	sp, #8
   d4648:	bd10      	pop	{r4, pc}

000d464a <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d464a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d464e:	461d      	mov	r5, r3
    startWrite();
   d4650:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4652:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d4656:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4658:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d465c:	4604      	mov	r4, r0
   d465e:	460f      	mov	r7, r1
   d4660:	4616      	mov	r6, r2
    startWrite();
   d4662:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4664:	6823      	ldr	r3, [r4, #0]
   d4666:	f8cd 8000 	str.w	r8, [sp]
   d466a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d466e:	4632      	mov	r2, r6
   d4670:	462b      	mov	r3, r5
   d4672:	4639      	mov	r1, r7
   d4674:	4620      	mov	r0, r4
   d4676:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4678:	6823      	ldr	r3, [r4, #0]
   d467a:	f8cd 8000 	str.w	r8, [sp]
   d467e:	f109 32ff 	add.w	r2, r9, #4294967295
   d4682:	4432      	add	r2, r6
   d4684:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4688:	4639      	mov	r1, r7
   d468a:	462b      	mov	r3, r5
   d468c:	4620      	mov	r0, r4
   d468e:	b212      	sxth	r2, r2
   d4690:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d4692:	6823      	ldr	r3, [r4, #0]
   d4694:	f8cd 8000 	str.w	r8, [sp]
   d4698:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d469c:	4632      	mov	r2, r6
   d469e:	464b      	mov	r3, r9
   d46a0:	4639      	mov	r1, r7
   d46a2:	4620      	mov	r0, r4
   d46a4:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d46a6:	1e6b      	subs	r3, r5, #1
   d46a8:	19d9      	adds	r1, r3, r7
   d46aa:	6823      	ldr	r3, [r4, #0]
   d46ac:	f8cd 8000 	str.w	r8, [sp]
   d46b0:	6a1d      	ldr	r5, [r3, #32]
   d46b2:	4620      	mov	r0, r4
   d46b4:	464b      	mov	r3, r9
   d46b6:	4632      	mov	r2, r6
   d46b8:	b209      	sxth	r1, r1
   d46ba:	47a8      	blx	r5
    endWrite();
   d46bc:	6823      	ldr	r3, [r4, #0]
   d46be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46c0:	4620      	mov	r0, r4
}
   d46c2:	b002      	add	sp, #8
   d46c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d46c8:	4718      	bx	r3

000d46ca <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d46ca:	4770      	bx	lr

000d46cc <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d46cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d46d0:	4299      	cmp	r1, r3
        uint16_t color) {
   d46d2:	4616      	mov	r6, r2
   d46d4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d46d8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d46dc:	6802      	ldr	r2, [r0, #0]
   d46de:	4680      	mov	r8, r0
   d46e0:	460d      	mov	r5, r1
   d46e2:	461c      	mov	r4, r3
    if(x0 == x1){
   d46e4:	d113      	bne.n	d470e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d46e6:	42be      	cmp	r6, r7
   d46e8:	bfc8      	it	gt
   d46ea:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d46ec:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d46f0:	bfc4      	itt	gt
   d46f2:	463e      	movgt	r6, r7
   d46f4:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d46f6:	1c7b      	adds	r3, r7, #1
   d46f8:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d46fa:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d46fc:	b21b      	sxth	r3, r3
   d46fe:	4632      	mov	r2, r6
   d4700:	4629      	mov	r1, r5
   d4702:	4640      	mov	r0, r8
   d4704:	46a4      	mov	ip, r4
}
   d4706:	b003      	add	sp, #12
   d4708:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d470c:	4760      	bx	ip
    } else if(y0 == y1){
   d470e:	42be      	cmp	r6, r7
   d4710:	d10a      	bne.n	d4728 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d4712:	4299      	cmp	r1, r3
   d4714:	bfc2      	ittt	gt
   d4716:	460b      	movgt	r3, r1
   d4718:	4625      	movgt	r5, r4
   d471a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d471c:	1c63      	adds	r3, r4, #1
   d471e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d4722:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4724:	1b5b      	subs	r3, r3, r5
   d4726:	e7e9      	b.n	d46fc <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d4728:	6953      	ldr	r3, [r2, #20]
   d472a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d472c:	e9cd 7900 	strd	r7, r9, [sp]
   d4730:	f8d8 3000 	ldr.w	r3, [r8]
   d4734:	4640      	mov	r0, r8
   d4736:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4738:	4632      	mov	r2, r6
   d473a:	4623      	mov	r3, r4
   d473c:	4629      	mov	r1, r5
   d473e:	47b8      	blx	r7
        endWrite();
   d4740:	f8d8 3000 	ldr.w	r3, [r8]
   d4744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4746:	4640      	mov	r0, r8
}
   d4748:	b003      	add	sp, #12
   d474a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d474e:	4718      	bx	r3

000d4750 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d4750:	f001 0303 	and.w	r3, r1, #3
   d4754:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d4758:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d475a:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d475c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4760:	bf59      	ittee	pl
   d4762:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d4764:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d4766:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d4768:	81c3      	strhmi	r3, [r0, #14]
}
   d476a:	4770      	bx	lr

000d476c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d476c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d476e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d4770:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d4772:	4a07      	ldr	r2, [pc, #28]	; (d4790 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d4774:	4d07      	ldr	r5, [pc, #28]	; (d4794 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4776:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d4778:	2400      	movs	r4, #0
    _width    = WIDTH;
   d477a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d477c:	f04f 31ff 	mov.w	r1, #4294967295
   d4780:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d4784:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d4786:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d4788:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d478a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d478c:	6204      	str	r4, [r0, #32]
}
   d478e:	bd30      	pop	{r4, r5, pc}
   d4790:	01000101 	.word	0x01000101
   d4794:	000d85d0 	.word	0x000d85d0

000d4798 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d479c:	b089      	sub	sp, #36	; 0x24
   d479e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d47a2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d47a4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d47a8:	9304      	str	r3, [sp, #16]
   d47aa:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d47ae:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d47b0:	9305      	str	r3, [sp, #20]
   d47b2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d47b6:	4604      	mov	r4, r0
    startWrite();
   d47b8:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d47ba:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d47be:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d47c2:	bf48      	it	mi
   d47c4:	f108 020e 	addmi.w	r2, r8, #14
   d47c8:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d47cc:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d47ce:	4635      	mov	r5, r6
   d47d0:	9b03      	ldr	r3, [sp, #12]
   d47d2:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d47d4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d47d8:	189a      	adds	r2, r3, r2
   d47da:	9b05      	ldr	r3, [sp, #20]
   d47dc:	428b      	cmp	r3, r1
   d47de:	b212      	sxth	r2, r2
   d47e0:	dd27      	ble.n	d4832 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d47e2:	9b04      	ldr	r3, [sp, #16]
   d47e4:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d47e6:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d47ea:	9306      	str	r3, [sp, #24]
   d47ec:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d47f0:	4580      	cmp	r8, r0
   d47f2:	fa1f f189 	uxth.w	r1, r9
   d47f6:	dd17      	ble.n	d4828 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d47f8:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d47fa:	bf05      	ittet	eq
   d47fc:	9b06      	ldreq	r3, [sp, #24]
   d47fe:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d4800:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4802:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d4804:	bf18      	it	ne
   d4806:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d4808:	062b      	lsls	r3, r5, #24
   d480a:	d50a      	bpl.n	d4822 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d480c:	9b02      	ldr	r3, [sp, #8]
   d480e:	6820      	ldr	r0, [r4, #0]
   d4810:	9207      	str	r2, [sp, #28]
   d4812:	4419      	add	r1, r3
   d4814:	6983      	ldr	r3, [r0, #24]
   d4816:	b209      	sxth	r1, r1
   d4818:	461f      	mov	r7, r3
   d481a:	4620      	mov	r0, r4
   d481c:	4653      	mov	r3, sl
   d481e:	47b8      	blx	r7
   d4820:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d4822:	f109 0901 	add.w	r9, r9, #1
   d4826:	e7e1      	b.n	d47ec <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d4828:	9b01      	ldr	r3, [sp, #4]
   d482a:	3301      	adds	r3, #1
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	445e      	add	r6, fp
   d4830:	e7ce      	b.n	d47d0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d4832:	6823      	ldr	r3, [r4, #0]
   d4834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4836:	4620      	mov	r0, r4
}
   d4838:	b009      	add	sp, #36	; 0x24
   d483a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d483e:	4718      	bx	r3

000d4840 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4844:	ed2d 8b02 	vpush	{d8}
   d4848:	b091      	sub	sp, #68	; 0x44
   d484a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d484c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d484e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d4852:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d4856:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d485a:	9103      	str	r1, [sp, #12]
   d485c:	461f      	mov	r7, r3
   d485e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d4862:	9304      	str	r3, [sp, #16]
   d4864:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d4866:	2a00      	cmp	r2, #0
   d4868:	f040 80c5 	bne.w	d49f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d486c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4870:	428b      	cmp	r3, r1
   d4872:	f340 814c 	ble.w	d4b0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d4876:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d487a:	42b3      	cmp	r3, r6
   d487c:	f340 8147 	ble.w	d4b0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4880:	2306      	movs	r3, #6
   d4882:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d4886:	2b00      	cmp	r3, #0
   d4888:	f340 8141 	ble.w	d4b0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d488c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4890:	2b00      	cmp	r3, #0
   d4892:	f340 813c 	ble.w	d4b0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d4896:	7f03      	ldrb	r3, [r0, #28]
   d4898:	b91b      	cbnz	r3, d48a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d489a:	2faf      	cmp	r7, #175	; 0xaf
   d489c:	bf84      	itt	hi
   d489e:	3701      	addhi	r7, #1
   d48a0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d48a2:	f8db 3000 	ldr.w	r3, [fp]
   d48a6:	4658      	mov	r0, fp
   d48a8:	695b      	ldr	r3, [r3, #20]
   d48aa:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d48ac:	2205      	movs	r2, #5
   d48ae:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d48b0:	2200      	movs	r2, #0
   d48b2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d48b4:	4a98      	ldr	r2, [pc, #608]	; (d4b18 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d48b6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d48ba:	18d3      	adds	r3, r2, r3
   d48bc:	930c      	str	r3, [sp, #48]	; 0x30
   d48be:	b2b3      	uxth	r3, r6
   d48c0:	9306      	str	r3, [sp, #24]
   d48c2:	9a05      	ldr	r2, [sp, #20]
   d48c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d48c6:	5c9b      	ldrb	r3, [r3, r2]
   d48c8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d48ca:	b2ab      	uxth	r3, r5
   d48cc:	930b      	str	r3, [sp, #44]	; 0x2c
   d48ce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d48d2:	9308      	str	r3, [sp, #32]
   d48d4:	9b03      	ldr	r3, [sp, #12]
   d48d6:	fb02 f905 	mul.w	r9, r2, r5
   d48da:	fa19 f983 	uxtah	r9, r9, r3
   d48de:	fa0f f389 	sxth.w	r3, r9
   d48e2:	ee08 3a10 	vmov	s16, r3
   d48e6:	2308      	movs	r3, #8
   d48e8:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d48ea:	9b03      	ldr	r3, [sp, #12]
   d48ec:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d48f0:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d48f4:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d48f8:	9a07      	ldr	r2, [sp, #28]
   d48fa:	f8db 3000 	ldr.w	r3, [fp]
   d48fe:	07d2      	lsls	r2, r2, #31
   d4900:	d552      	bpl.n	d49a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d4902:	2d01      	cmp	r5, #1
   d4904:	fa1f f289 	uxth.w	r2, r9
   d4908:	d13e      	bne.n	d4988 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d490a:	2c01      	cmp	r4, #1
   d490c:	d13c      	bne.n	d4988 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d490e:	699b      	ldr	r3, [r3, #24]
   d4910:	9906      	ldr	r1, [sp, #24]
   d4912:	461f      	mov	r7, r3
   d4914:	9b04      	ldr	r3, [sp, #16]
   d4916:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d4918:	b212      	sxth	r2, r2
   d491a:	4651      	mov	r1, sl
   d491c:	4658      	mov	r0, fp
   d491e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4920:	f109 0301 	add.w	r3, r9, #1
   d4924:	fa4f f983 	sxtb.w	r9, r3
   d4928:	9b07      	ldr	r3, [sp, #28]
   d492a:	085b      	lsrs	r3, r3, #1
   d492c:	9307      	str	r3, [sp, #28]
   d492e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4930:	3b01      	subs	r3, #1
   d4932:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4936:	930a      	str	r3, [sp, #40]	; 0x28
   d4938:	d1de      	bne.n	d48f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d493a:	9f05      	ldr	r7, [sp, #20]
   d493c:	3701      	adds	r7, #1
   d493e:	b27b      	sxtb	r3, r7
   d4940:	9305      	str	r3, [sp, #20]
   d4942:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4944:	3b01      	subs	r3, #1
   d4946:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d494a:	9309      	str	r3, [sp, #36]	; 0x24
   d494c:	d1b9      	bne.n	d48c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d494e:	9b04      	ldr	r3, [sp, #16]
   d4950:	4543      	cmp	r3, r8
   d4952:	d00f      	beq.n	d4974 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d4954:	2d01      	cmp	r5, #1
   d4956:	f8db 3000 	ldr.w	r3, [fp]
   d495a:	d13b      	bne.n	d49d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d495c:	2c01      	cmp	r4, #1
   d495e:	d139      	bne.n	d49d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4960:	9908      	ldr	r1, [sp, #32]
   d4962:	f8cd 8000 	str.w	r8, [sp]
   d4966:	3105      	adds	r1, #5
   d4968:	6a1c      	ldr	r4, [r3, #32]
   d496a:	4632      	mov	r2, r6
   d496c:	2308      	movs	r3, #8
   d496e:	b209      	sxth	r1, r1
   d4970:	4658      	mov	r0, fp
   d4972:	47a0      	blx	r4
        endWrite();
   d4974:	f8db 3000 	ldr.w	r3, [fp]
   d4978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d497a:	4658      	mov	r0, fp
}
   d497c:	b011      	add	sp, #68	; 0x44
   d497e:	ecbd 8b02 	vpop	{d8}
   d4982:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d4986:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d4988:	9906      	ldr	r1, [sp, #24]
   d498a:	fb14 f202 	smulbb	r2, r4, r2
   d498e:	440a      	add	r2, r1
   d4990:	9904      	ldr	r1, [sp, #16]
   d4992:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4994:	9400      	str	r4, [sp, #0]
   d4996:	69db      	ldr	r3, [r3, #28]
   d4998:	ee18 1a10 	vmov	r1, s16
   d499c:	461f      	mov	r7, r3
   d499e:	b212      	sxth	r2, r2
   d49a0:	462b      	mov	r3, r5
   d49a2:	4658      	mov	r0, fp
   d49a4:	47b8      	blx	r7
   d49a6:	e7bb      	b.n	d4920 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d49a8:	9a04      	ldr	r2, [sp, #16]
   d49aa:	4542      	cmp	r2, r8
   d49ac:	d0b8      	beq.n	d4920 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d49ae:	2d01      	cmp	r5, #1
   d49b0:	fa1f f289 	uxth.w	r2, r9
   d49b4:	d107      	bne.n	d49c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d49b6:	2c01      	cmp	r4, #1
   d49b8:	d105      	bne.n	d49c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d49ba:	699b      	ldr	r3, [r3, #24]
   d49bc:	9906      	ldr	r1, [sp, #24]
   d49be:	461f      	mov	r7, r3
   d49c0:	440a      	add	r2, r1
   d49c2:	4643      	mov	r3, r8
   d49c4:	e7a8      	b.n	d4918 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d49c6:	9906      	ldr	r1, [sp, #24]
   d49c8:	f8cd 8004 	str.w	r8, [sp, #4]
   d49cc:	fb14 f202 	smulbb	r2, r4, r2
   d49d0:	440a      	add	r2, r1
   d49d2:	e7df      	b.n	d4994 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d49d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d49d6:	f8cd 8004 	str.w	r8, [sp, #4]
   d49da:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d49de:	9a08      	ldr	r2, [sp, #32]
   d49e0:	00e4      	lsls	r4, r4, #3
   d49e2:	440a      	add	r2, r1
   d49e4:	4611      	mov	r1, r2
   d49e6:	9400      	str	r4, [sp, #0]
   d49e8:	69dc      	ldr	r4, [r3, #28]
   d49ea:	4632      	mov	r2, r6
   d49ec:	462b      	mov	r3, r5
   d49ee:	b209      	sxth	r1, r1
   d49f0:	4658      	mov	r0, fp
   d49f2:	47a0      	blx	r4
        endWrite();
   d49f4:	e7be      	b.n	d4974 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d49f6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d49f8:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d49fa:	6812      	ldr	r2, [r2, #0]
   d49fc:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d49fe:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d4a00:	b2ff      	uxtb	r7, r7
   d4a02:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d4a06:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d4a0a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d4a0c:	789a      	ldrb	r2, [r3, #2]
   d4a0e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d4a10:	78da      	ldrb	r2, [r3, #3]
   d4a12:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d4a14:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d4a16:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d4a1a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d4a1e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d4a20:	d801      	bhi.n	d4a26 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d4a22:	2c01      	cmp	r4, #1
   d4a24:	d957      	bls.n	d4ad6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d4a26:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d4a2a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d4a2c:	fa0f f38a 	sxth.w	r3, sl
   d4a30:	9307      	str	r3, [sp, #28]
        startWrite();
   d4a32:	f8db 3000 	ldr.w	r3, [fp]
   d4a36:	4658      	mov	r0, fp
   d4a38:	695b      	ldr	r3, [r3, #20]
   d4a3a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a3c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4a3e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a42:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a44:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4a48:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d4a4a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a4c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d4a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4a50:	429f      	cmp	r7, r3
   d4a52:	d28f      	bcs.n	d4974 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a54:	9b07      	ldr	r3, [sp, #28]
   d4a56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d4a58:	443b      	add	r3, r7
   d4a5a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d4a5e:	2200      	movs	r2, #0
   d4a60:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a64:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a66:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a6a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a6e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a72:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d4a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4a76:	9905      	ldr	r1, [sp, #20]
   d4a78:	4291      	cmp	r1, r2
   d4a7a:	d241      	bcs.n	d4b00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d4a7c:	1c5a      	adds	r2, r3, #1
   d4a7e:	b2d2      	uxtb	r2, r2
   d4a80:	075b      	lsls	r3, r3, #29
   d4a82:	920c      	str	r2, [sp, #48]	; 0x30
   d4a84:	d107      	bne.n	d4a96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d4a86:	9b06      	ldr	r3, [sp, #24]
   d4a88:	9906      	ldr	r1, [sp, #24]
   d4a8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d4a8c:	3301      	adds	r3, #1
   d4a8e:	b29b      	uxth	r3, r3
   d4a90:	f812 9001 	ldrb.w	r9, [r2, r1]
   d4a94:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d4a96:	f019 0f80 	tst.w	r9, #128	; 0x80
   d4a9a:	d012      	beq.n	d4ac2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d4a9c:	2d01      	cmp	r5, #1
   d4a9e:	f8db 3000 	ldr.w	r3, [fp]
   d4aa2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4aa6:	d11a      	bne.n	d4ade <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d4aa8:	2c01      	cmp	r4, #1
   d4aaa:	d118      	bne.n	d4ade <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4aae:	699b      	ldr	r3, [r3, #24]
   d4ab0:	4411      	add	r1, r2
   d4ab2:	9a05      	ldr	r2, [sp, #20]
   d4ab4:	4411      	add	r1, r2
   d4ab6:	461e      	mov	r6, r3
   d4ab8:	4652      	mov	r2, sl
   d4aba:	9b04      	ldr	r3, [sp, #16]
   d4abc:	b209      	sxth	r1, r1
   d4abe:	4658      	mov	r0, fp
   d4ac0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d4ac2:	9e05      	ldr	r6, [sp, #20]
   d4ac4:	3601      	adds	r6, #1
   d4ac6:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d4ac8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d4acc:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d4ace:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d4ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d4ad4:	e7ce      	b.n	d4a74 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d4ad6:	2300      	movs	r3, #0
   d4ad8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d4adc:	e7a9      	b.n	d4a32 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4ade:	9805      	ldr	r0, [sp, #20]
   d4ae0:	9a08      	ldr	r2, [sp, #32]
   d4ae2:	4402      	add	r2, r0
   d4ae4:	fb02 1105 	mla	r1, r2, r5, r1
   d4ae8:	9a04      	ldr	r2, [sp, #16]
   d4aea:	e9cd 4200 	strd	r4, r2, [sp]
   d4aee:	69db      	ldr	r3, [r3, #28]
   d4af0:	ee18 2a10 	vmov	r2, s16
   d4af4:	461e      	mov	r6, r3
   d4af6:	b209      	sxth	r1, r1
   d4af8:	462b      	mov	r3, r5
   d4afa:	4658      	mov	r0, fp
   d4afc:	47b0      	blx	r6
   d4afe:	e7e0      	b.n	d4ac2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d4b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d4b02:	3701      	adds	r7, #1
   d4b04:	4498      	add	r8, r3
   d4b06:	fa5f f888 	uxtb.w	r8, r8
   d4b0a:	b2ff      	uxtb	r7, r7
   d4b0c:	e79f      	b.n	d4a4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d4b0e:	b011      	add	sp, #68	; 0x44
   d4b10:	ecbd 8b02 	vpop	{d8}
   d4b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b18:	000d80c6 	.word	0x000d80c6

000d4b1c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d4b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d4b1e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d4b20:	b085      	sub	sp, #20
   d4b22:	4604      	mov	r4, r0
   d4b24:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d4b26:	2a00      	cmp	r2, #0
   d4b28:	d134      	bne.n	d4b94 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d4b2a:	290a      	cmp	r1, #10
   d4b2c:	d108      	bne.n	d4b40 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d4b2e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d4b30:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d4b32:	7e42      	ldrb	r2, [r0, #25]
   d4b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d4b38:	8263      	strh	r3, [r4, #18]
}
   d4b3a:	2001      	movs	r0, #1
   d4b3c:	b005      	add	sp, #20
   d4b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d4b40:	290d      	cmp	r1, #13
   d4b42:	d0fa      	beq.n	d4b3a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d4b44:	7ee1      	ldrb	r1, [r4, #27]
   d4b46:	7e00      	ldrb	r0, [r0, #24]
   d4b48:	7e65      	ldrb	r5, [r4, #25]
   d4b4a:	b171      	cbz	r1, d4b6a <_ZN12Adafruit_GFX5writeEh+0x4e>
   d4b4c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d4b50:	2106      	movs	r1, #6
   d4b52:	fb11 6100 	smlabb	r1, r1, r0, r6
   d4b56:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d4b5a:	42b1      	cmp	r1, r6
   d4b5c:	bfc1      	itttt	gt
   d4b5e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d4b62:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d4b64:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d4b68:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4b6a:	8ae2      	ldrh	r2, [r4, #22]
   d4b6c:	9201      	str	r2, [sp, #4]
   d4b6e:	8aa2      	ldrh	r2, [r4, #20]
   d4b70:	9200      	str	r2, [sp, #0]
   d4b72:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d4b76:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4b7a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4b7e:	4620      	mov	r0, r4
   d4b80:	f7ff fe5e 	bl	d4840 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d4b84:	7e23      	ldrb	r3, [r4, #24]
   d4b86:	8a22      	ldrh	r2, [r4, #16]
   d4b88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4b8c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4b90:	8223      	strh	r3, [r4, #16]
   d4b92:	e7d2      	b.n	d4b3a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4b94:	290a      	cmp	r1, #10
   d4b96:	d107      	bne.n	d4ba8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d4b98:	2300      	movs	r3, #0
   d4b9a:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4b9c:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4b9e:	7e41      	ldrb	r1, [r0, #25]
   d4ba0:	8a42      	ldrh	r2, [r0, #18]
   d4ba2:	fb01 2303 	mla	r3, r1, r3, r2
   d4ba6:	e7c7      	b.n	d4b38 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d4ba8:	290d      	cmp	r1, #13
   d4baa:	d0c6      	beq.n	d4b3a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4bac:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4bae:	42a9      	cmp	r1, r5
   d4bb0:	d3c3      	bcc.n	d4b3a <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4bb2:	7a51      	ldrb	r1, [r2, #9]
   d4bb4:	4299      	cmp	r1, r3
   d4bb6:	d3c0      	bcc.n	d4b3a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d4bb8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d4bba:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4bbc:	b2ed      	uxtb	r5, r5
   d4bbe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4bc2:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4bc4:	b32f      	cbz	r7, d4c12 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4bc6:	78e9      	ldrb	r1, [r5, #3]
   d4bc8:	b319      	cbz	r1, d4c12 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4bca:	7ee1      	ldrb	r1, [r4, #27]
   d4bcc:	7e00      	ldrb	r0, [r0, #24]
   d4bce:	7e66      	ldrb	r6, [r4, #25]
   d4bd0:	b191      	cbz	r1, d4bf8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4bd2:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4bd6:	4439      	add	r1, r7
   d4bd8:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4bdc:	fb00 7101 	mla	r1, r0, r1, r7
   d4be0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4be4:	42b9      	cmp	r1, r7
   d4be6:	dd07      	ble.n	d4bf8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4be8:	2700      	movs	r7, #0
   d4bea:	8227      	strh	r7, [r4, #16]
   d4bec:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4bf0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4bf2:	fb02 1206 	mla	r2, r2, r6, r1
   d4bf6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4bf8:	8ae2      	ldrh	r2, [r4, #22]
   d4bfa:	9201      	str	r2, [sp, #4]
   d4bfc:	8aa2      	ldrh	r2, [r4, #20]
   d4bfe:	9200      	str	r2, [sp, #0]
   d4c00:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4c04:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4c08:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4c0c:	4620      	mov	r0, r4
   d4c0e:	f7ff fe17 	bl	d4840 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4c12:	7929      	ldrb	r1, [r5, #4]
   d4c14:	7e23      	ldrb	r3, [r4, #24]
   d4c16:	8a22      	ldrh	r2, [r4, #16]
   d4c18:	fb01 2303 	mla	r3, r1, r3, r2
   d4c1c:	e7b8      	b.n	d4b90 <_ZN12Adafruit_GFX5writeEh+0x74>

000d4c1e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4c1e:	2901      	cmp	r1, #1
   d4c20:	bf38      	it	cc
   d4c22:	2101      	movcc	r1, #1
   d4c24:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4c26:	7641      	strb	r1, [r0, #25]
}
   d4c28:	4770      	bx	lr
	...

000d4c2c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4c2c:	b510      	push	{r4, lr}
   d4c2e:	4b06      	ldr	r3, [pc, #24]	; (d4c48 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4c30:	6003      	str	r3, [r0, #0]
   d4c32:	4604      	mov	r4, r0
	if (mutex) {
   d4c34:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4c36:	b108      	cbz	r0, d4c3c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4c38:	f000 fddc 	bl	d57f4 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4c3c:	4620      	mov	r0, r4
   d4c3e:	f000 f887 	bl	d4d50 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4c42:	4620      	mov	r0, r4
   d4c44:	bd10      	pop	{r4, pc}
   d4c46:	bf00      	nop
   d4c48:	000d8628 	.word	0x000d8628

000d4c4c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4c4c:	b510      	push	{r4, lr}
   d4c4e:	4604      	mov	r4, r0
}
   d4c50:	f7ff ffec 	bl	d4c2c <_ZN16OledWingAdafruitD1Ev>
   d4c54:	4620      	mov	r0, r4
   d4c56:	2170      	movs	r1, #112	; 0x70
   d4c58:	f003 f803 	bl	d7c62 <_ZdlPvj>
   d4c5c:	4620      	mov	r0, r4
   d4c5e:	bd10      	pop	{r4, pc}

000d4c60 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4c60:	b530      	push	{r4, r5, lr}
   d4c62:	b085      	sub	sp, #20
   d4c64:	4604      	mov	r4, r0
   d4c66:	460d      	mov	r5, r1
   d4c68:	f002 ffce 	bl	d7c08 <_Z19__fetch_global_Wirev>
   d4c6c:	4a10      	ldr	r2, [pc, #64]	; (d4cb0 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4c6e:	4911      	ldr	r1, [pc, #68]	; (d4cb4 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4c70:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4c74:	f04f 32ff 	mov.w	r2, #4294967295
   d4c78:	2180      	movs	r1, #128	; 0x80
   d4c7a:	4603      	mov	r3, r0
   d4c7c:	9200      	str	r2, [sp, #0]
   d4c7e:	4620      	mov	r0, r4
   d4c80:	2220      	movs	r2, #32
   d4c82:	f000 f8eb 	bl	d4e5c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4c86:	4b0c      	ldr	r3, [pc, #48]	; (d4cb8 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4c88:	6023      	str	r3, [r4, #0]
   d4c8a:	2300      	movs	r3, #0
   d4c8c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4c90:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4c94:	f000 f83b 	bl	d4d0e <_ZN8DebounceC1Ev>
   d4c98:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4c9c:	f000 f837 	bl	d4d0e <_ZN8DebounceC1Ev>
   d4ca0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4ca4:	f000 f833 	bl	d4d0e <_ZN8DebounceC1Ev>
}
   d4ca8:	4620      	mov	r0, r4
   d4caa:	b005      	add	sp, #20
   d4cac:	bd30      	pop	{r4, r5, pc}
   d4cae:	bf00      	nop
   d4cb0:	00061a80 	.word	0x00061a80
   d4cb4:	000186a0 	.word	0x000186a0
   d4cb8:	000d8628 	.word	0x000d8628

000d4cbc <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4cbc:	b513      	push	{r0, r1, r4, lr}
   d4cbe:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4cc0:	3050      	adds	r0, #80	; 0x50
   d4cc2:	f000 fd8f 	bl	d57e4 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4cc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4cc8:	07d9      	lsls	r1, r3, #31
   d4cca:	d505      	bpl.n	d4cd8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4ccc:	2202      	movs	r2, #2
   d4cce:	2104      	movs	r1, #4
   d4cd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4cd4:	f000 f82f 	bl	d4d36 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4cd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4cda:	079a      	lsls	r2, r3, #30
   d4cdc:	d505      	bpl.n	d4cea <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4cde:	2200      	movs	r2, #0
   d4ce0:	2103      	movs	r1, #3
   d4ce2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4ce6:	f000 f826 	bl	d4d36 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4cea:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4cec:	075b      	lsls	r3, r3, #29
   d4cee:	d505      	bpl.n	d4cfc <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4cf0:	2202      	movs	r2, #2
   d4cf2:	4611      	mov	r1, r2
   d4cf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4cf8:	f000 f81d 	bl	d4d36 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4cfc:	2301      	movs	r3, #1
   d4cfe:	9300      	str	r3, [sp, #0]
   d4d00:	223c      	movs	r2, #60	; 0x3c
   d4d02:	2102      	movs	r1, #2
   d4d04:	4620      	mov	r0, r4
   d4d06:	f000 f9a9 	bl	d505c <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4d0a:	b002      	add	sp, #8
   d4d0c:	bd10      	pop	{r4, pc}

000d4d0e <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4d0e:	2100      	movs	r1, #0
   d4d10:	220a      	movs	r2, #10
   d4d12:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4d16:	4770      	bx	lr

000d4d18 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4d18:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4d1a:	b510      	push	{r4, lr}
   d4d1c:	4604      	mov	r4, r0
    this->pin = pin;
   d4d1e:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4d20:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4d22:	b288      	uxth	r0, r1
   d4d24:	f002 ff44 	bl	d7bb0 <digitalRead>
   d4d28:	b108      	cbz	r0, d4d2e <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4d2a:	2303      	movs	r3, #3
   d4d2c:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4d2e:	f000 fccd 	bl	d56cc <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4d32:	6020      	str	r0, [r4, #0]
#endif
}
   d4d34:	bd10      	pop	{r4, pc}

000d4d36 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4d36:	b538      	push	{r3, r4, r5, lr}
   d4d38:	460c      	mov	r4, r1
   d4d3a:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4d3c:	4611      	mov	r1, r2
   d4d3e:	b2a0      	uxth	r0, r4
   d4d40:	f002 ff0c 	bl	d7b5c <pinMode>
  
  this->attach(pin);
   d4d44:	4621      	mov	r1, r4
   d4d46:	4628      	mov	r0, r5
}
   d4d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4d4c:	f7ff bfe4 	b.w	d4d18 <_ZN8Debounce6attachEi>

000d4d50 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4d50:	b510      	push	{r4, lr}
   d4d52:	4b04      	ldr	r3, [pc, #16]	; (d4d64 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4d54:	6003      	str	r3, [r0, #0]
   d4d56:	4604      	mov	r4, r0
  if(buffer) {
   d4d58:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4d5a:	b108      	cbz	r0, d4d60 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4d5c:	f000 ff5e 	bl	d5c1c <free>
    buffer = NULL;
  }
}
   d4d60:	4620      	mov	r0, r4
   d4d62:	bd10      	pop	{r4, pc}
   d4d64:	000d8b34 	.word	0x000d8b34

000d4d68 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4d68:	b510      	push	{r4, lr}
   d4d6a:	4604      	mov	r4, r0
}
   d4d6c:	f7ff fff0 	bl	d4d50 <_ZN16Adafruit_SSD1306D1Ev>
   d4d70:	4620      	mov	r0, r4
   d4d72:	2150      	movs	r1, #80	; 0x50
   d4d74:	f002 ff75 	bl	d7c62 <_ZdlPvj>
   d4d78:	4620      	mov	r0, r4
   d4d7a:	bd10      	pop	{r4, pc}

000d4d7c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4d7c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4d7e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4d80:	db4b      	blt.n	d4e1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4d82:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4d86:	428c      	cmp	r4, r1
   d4d88:	dd47      	ble.n	d4e1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4d8a:	2a00      	cmp	r2, #0
   d4d8c:	db45      	blt.n	d4e1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4d8e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4d92:	4294      	cmp	r4, r2
   d4d94:	dd41      	ble.n	d4e1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4d96:	7e84      	ldrb	r4, [r0, #26]
   d4d98:	2c02      	cmp	r4, #2
   d4d9a:	d01f      	beq.n	d4ddc <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4d9c:	2c03      	cmp	r4, #3
   d4d9e:	d026      	beq.n	d4dee <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4da0:	2c01      	cmp	r4, #1
   d4da2:	d104      	bne.n	d4dae <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4da4:	8904      	ldrh	r4, [r0, #8]
   d4da6:	43d2      	mvns	r2, r2
   d4da8:	4414      	add	r4, r2
      break;
   d4daa:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4dac:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4dae:	2b01      	cmp	r3, #1
   d4db0:	d023      	beq.n	d4dfa <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4db2:	2b02      	cmp	r3, #2
   d4db4:	d032      	beq.n	d4e1c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4db6:	bb83      	cbnz	r3, d4e1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4db8:	2a00      	cmp	r2, #0
   d4dba:	4613      	mov	r3, r2
   d4dbc:	8904      	ldrh	r4, [r0, #8]
   d4dbe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4dc0:	bfb8      	it	lt
   d4dc2:	1dd3      	addlt	r3, r2, #7
   d4dc4:	10db      	asrs	r3, r3, #3
   d4dc6:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4dca:	f002 0207 	and.w	r2, r2, #7
   d4dce:	2301      	movs	r3, #1
   d4dd0:	4093      	lsls	r3, r2
   d4dd2:	5c42      	ldrb	r2, [r0, r1]
   d4dd4:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4dd8:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4dda:	e01e      	b.n	d4e1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4ddc:	8904      	ldrh	r4, [r0, #8]
   d4dde:	43c9      	mvns	r1, r1
   d4de0:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4de2:	8944      	ldrh	r4, [r0, #10]
   d4de4:	43d2      	mvns	r2, r2
   d4de6:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4de8:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4dea:	b212      	sxth	r2, r2
      break;
   d4dec:	e7df      	b.n	d4dae <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4dee:	8944      	ldrh	r4, [r0, #10]
   d4df0:	43c9      	mvns	r1, r1
   d4df2:	440c      	add	r4, r1
      break;
   d4df4:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4df6:	b222      	sxth	r2, r4
      break;
   d4df8:	e7d9      	b.n	d4dae <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4dfa:	2a00      	cmp	r2, #0
   d4dfc:	8904      	ldrh	r4, [r0, #8]
   d4dfe:	4613      	mov	r3, r2
   d4e00:	bfb8      	it	lt
   d4e02:	1dd3      	addlt	r3, r2, #7
   d4e04:	10db      	asrs	r3, r3, #3
   d4e06:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4e0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4e0c:	f002 0007 	and.w	r0, r2, #7
   d4e10:	2201      	movs	r2, #1
   d4e12:	4082      	lsls	r2, r0
   d4e14:	5c58      	ldrb	r0, [r3, r1]
   d4e16:	4302      	orrs	r2, r0
   d4e18:	545a      	strb	r2, [r3, r1]
}
   d4e1a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4e1c:	2a00      	cmp	r2, #0
   d4e1e:	4613      	mov	r3, r2
   d4e20:	8904      	ldrh	r4, [r0, #8]
   d4e22:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4e24:	bfb8      	it	lt
   d4e26:	1dd3      	addlt	r3, r2, #7
   d4e28:	10db      	asrs	r3, r3, #3
   d4e2a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4e2e:	f002 0207 	and.w	r2, r2, #7
   d4e32:	2301      	movs	r3, #1
   d4e34:	fa03 f202 	lsl.w	r2, r3, r2
   d4e38:	5c43      	ldrb	r3, [r0, r1]
   d4e3a:	405a      	eors	r2, r3
   d4e3c:	e7cc      	b.n	d4dd8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4e3e <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e3e:	b510      	push	{r4, lr}
   d4e40:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4e42:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4e46:	2101      	movs	r1, #1
   d4e48:	b280      	uxth	r0, r0
   d4e4a:	f002 fe98 	bl	d7b7e <digitalWrite>
   d4e4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e50:	b118      	cbz	r0, d4e5a <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4e56:	f000 bf68 	b.w	d5d2a <_ZN8SPIClass14endTransactionEv>
}
   d4e5a:	bd10      	pop	{r4, pc}

000d4e5c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4e5c:	b570      	push	{r4, r5, r6, lr}
   d4e5e:	4604      	mov	r4, r0
   d4e60:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4e62:	2600      	movs	r6, #0
   d4e64:	f7ff fc82 	bl	d476c <_ZN12Adafruit_GFXC1Ess>
   d4e68:	4b11      	ldr	r3, [pc, #68]	; (d4eb0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4e6a:	6023      	str	r3, [r4, #0]
   d4e6c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4e6e:	b915      	cbnz	r5, d4e76 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4e70:	f002 feca 	bl	d7c08 <_Z19__fetch_global_Wirev>
   d4e74:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4e76:	23ff      	movs	r3, #255	; 0xff
   d4e78:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4e7c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4e80:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4e84:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4e88:	4b0a      	ldr	r3, [pc, #40]	; (d4eb4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4e8a:	63a3      	str	r3, [r4, #56]	; 0x38
   d4e8c:	2301      	movs	r3, #1
   d4e8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4e92:	9b05      	ldr	r3, [sp, #20]
   d4e94:	64a3      	str	r3, [r4, #72]	; 0x48
   d4e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4e9a:	9b06      	ldr	r3, [sp, #24]
   d4e9c:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4e9e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4ea2:	6426      	str	r6, [r4, #64]	; 0x40
   d4ea4:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4ea8:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4eaa:	4620      	mov	r0, r4
   d4eac:	bd70      	pop	{r4, r5, r6, pc}
   d4eae:	bf00      	nop
   d4eb0:	000d8b34 	.word	0x000d8b34
   d4eb4:	000d8680 	.word	0x000d8680

000d4eb8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4eba:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4ebc:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4ebe:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4ec0:	b190      	cbz	r0, d4ee8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4ec2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4ec6:	f002 fd13 	bl	d78f0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4eca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ecc:	6803      	ldr	r3, [r0, #0]
   d4ece:	2100      	movs	r1, #0
   d4ed0:	689b      	ldr	r3, [r3, #8]
   d4ed2:	4798      	blx	r3
    WIRE_WRITE(c);
   d4ed4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ed6:	6803      	ldr	r3, [r0, #0]
   d4ed8:	4629      	mov	r1, r5
   d4eda:	689b      	ldr	r3, [r3, #8]
   d4edc:	4798      	blx	r3
    wire->endTransmission();
   d4ede:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4ee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4ee4:	f002 bd0b 	b.w	d78fe <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4ee8:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4eec:	4601      	mov	r1, r0
   d4eee:	b298      	uxth	r0, r3
   d4ef0:	f002 fe45 	bl	d7b7e <digitalWrite>
  if(spi) {
   d4ef4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4ef6:	b120      	cbz	r0, d4f02 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4ef8:	4629      	mov	r1, r5
}
   d4efa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4efe:	f000 bf9b 	b.w	d5e38 <_ZN8SPIClass8transferEh>
   d4f02:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f04:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4f06:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4f0a:	ea05 0107 	and.w	r1, r5, r7
   d4f0e:	b280      	uxth	r0, r0
   d4f10:	f002 fe35 	bl	d7b7e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4f14:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f18:	2101      	movs	r1, #1
   d4f1a:	b280      	uxth	r0, r0
   d4f1c:	f002 fe2f 	bl	d7b7e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4f20:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f24:	2100      	movs	r1, #0
   d4f26:	b280      	uxth	r0, r0
   d4f28:	f002 fe29 	bl	d7b7e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f2c:	3e01      	subs	r6, #1
   d4f2e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4f32:	d1e8      	bne.n	d4f06 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f36 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4f36:	b538      	push	{r3, r4, r5, lr}
   d4f38:	4604      	mov	r4, r0
  TRANSACTION_START
   d4f3a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4f3c:	460d      	mov	r5, r1
  TRANSACTION_START
   d4f3e:	b180      	cbz	r0, d4f62 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4f40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4f42:	f002 fcc7 	bl	d78d4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4f46:	2d00      	cmp	r5, #0
   d4f48:	4620      	mov	r0, r4
   d4f4a:	bf14      	ite	ne
   d4f4c:	21a7      	movne	r1, #167	; 0xa7
   d4f4e:	21a6      	moveq	r1, #166	; 0xa6
   d4f50:	f7ff ffb2 	bl	d4eb8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4f54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f56:	b188      	cbz	r0, d4f7c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4f58:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f5e:	f002 bcb9 	b.w	d78d4 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4f62:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f64:	b118      	cbz	r0, d4f6e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4f66:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4f6a:	f000 fef7 	bl	d5d5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4f6e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4f72:	2100      	movs	r1, #0
   d4f74:	b280      	uxth	r0, r0
   d4f76:	f002 fe02 	bl	d7b7e <digitalWrite>
   d4f7a:	e7e4      	b.n	d4f46 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4f7c:	4620      	mov	r0, r4
}
   d4f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f82:	f7ff bf5c 	b.w	d4e3e <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4f86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4f86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4f8a:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4f8c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4f8e:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4f90:	188f      	adds	r7, r1, r2
   d4f92:	b340      	cbz	r0, d4fe6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d4f94:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4f98:	f002 fcaa 	bl	d78f0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4f9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f9e:	6803      	ldr	r3, [r0, #0]
   d4fa0:	2100      	movs	r1, #0
   d4fa2:	689b      	ldr	r3, [r3, #8]
   d4fa4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d4fa6:	2601      	movs	r6, #1
    while(n--) {
   d4fa8:	42bd      	cmp	r5, r7
   d4faa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4fac:	d017      	beq.n	d4fde <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d4fae:	2e1f      	cmp	r6, #31
   d4fb0:	d90c      	bls.n	d4fcc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d4fb2:	f002 fca4 	bl	d78fe <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d4fb6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4fba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4fbc:	f002 fc98 	bl	d78f0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4fc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4fc2:	6803      	ldr	r3, [r0, #0]
   d4fc4:	2100      	movs	r1, #0
   d4fc6:	689b      	ldr	r3, [r3, #8]
   d4fc8:	4798      	blx	r3
        bytesOut = 1;
   d4fca:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4fcc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4fce:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4fd2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d4fd4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4fd6:	689b      	ldr	r3, [r3, #8]
   d4fd8:	4798      	blx	r3
      bytesOut++;
   d4fda:	b2f6      	uxtb	r6, r6
    while(n--) {
   d4fdc:	e7e4      	b.n	d4fa8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d4fde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d4fe2:	f002 bc8c 	b.w	d78fe <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4fe6:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4fea:	4601      	mov	r1, r0
   d4fec:	b298      	uxth	r0, r3
   d4fee:	f002 fdc6 	bl	d7b7e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4ff2:	42af      	cmp	r7, r5
   d4ff4:	d022      	beq.n	d503c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d4ff6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4ff8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d4ffc:	b118      	cbz	r0, d5006 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d4ffe:	4649      	mov	r1, r9
   d5000:	f000 ff1a 	bl	d5e38 <_ZN8SPIClass8transferEh>
   d5004:	e7f5      	b.n	d4ff2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d5006:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5008:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d500c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5010:	ea09 0108 	and.w	r1, r9, r8
   d5014:	b280      	uxth	r0, r0
   d5016:	f002 fdb2 	bl	d7b7e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d501a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d501e:	2101      	movs	r1, #1
   d5020:	b280      	uxth	r0, r0
   d5022:	f002 fdac 	bl	d7b7e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5026:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d502a:	2100      	movs	r1, #0
   d502c:	b280      	uxth	r0, r0
   d502e:	f002 fda6 	bl	d7b7e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5032:	3e01      	subs	r6, #1
   d5034:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5038:	d1e8      	bne.n	d500c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d503a:	e7da      	b.n	d4ff2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d503c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5040 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d5040:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5044:	1dda      	adds	r2, r3, #7
   d5046:	bf48      	it	mi
   d5048:	f103 020e 	addmi.w	r2, r3, #14
   d504c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5050:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5052:	10d2      	asrs	r2, r2, #3
   d5054:	435a      	muls	r2, r3
   d5056:	2100      	movs	r1, #0
   d5058:	f002 bf60 	b.w	d7f1c <memset>

000d505c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d505c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5060:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5062:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d5064:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5068:	4604      	mov	r4, r0
   d506a:	460f      	mov	r7, r1
   d506c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d506e:	b1b3      	cbz	r3, d509e <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d5070:	4620      	mov	r0, r4
   d5072:	f7ff ffe5 	bl	d5040 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d5076:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d507a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d507e:	2820      	cmp	r0, #32
   d5080:	dc1f      	bgt.n	d50c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5082:	2320      	movs	r3, #32
   d5084:	2201      	movs	r2, #1
   d5086:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d508a:	3820      	subs	r0, #32
   d508c:	2373      	movs	r3, #115	; 0x73
   d508e:	3973      	subs	r1, #115	; 0x73
   d5090:	9300      	str	r3, [sp, #0]
   d5092:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5096:	4b89      	ldr	r3, [pc, #548]	; (d52bc <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d5098:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d509c:	e01f      	b.n	d50de <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d509e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d50a2:	1dd8      	adds	r0, r3, #7
   d50a4:	bf48      	it	mi
   d50a6:	f103 000e 	addmi.w	r0, r3, #14
   d50aa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d50ae:	10c0      	asrs	r0, r0, #3
   d50b0:	4358      	muls	r0, r3
   d50b2:	f000 fdab 	bl	d5c0c <malloc>
   d50b6:	62e0      	str	r0, [r4, #44]	; 0x2c
   d50b8:	2800      	cmp	r0, #0
   d50ba:	d1d9      	bne.n	d5070 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d50bc:	b004      	add	sp, #16
   d50be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d50c2:	2340      	movs	r3, #64	; 0x40
   d50c4:	f04f 0c01 	mov.w	ip, #1
   d50c8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d50cc:	2352      	movs	r3, #82	; 0x52
   d50ce:	3840      	subs	r0, #64	; 0x40
   d50d0:	3952      	subs	r1, #82	; 0x52
   d50d2:	9300      	str	r3, [sp, #0]
   d50d4:	4b7a      	ldr	r3, [pc, #488]	; (d52c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d50d6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d50da:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d50de:	f340 024f 	sbfx	r2, r0, #1, #16
   d50e2:	f341 014f 	sbfx	r1, r1, #1, #16
   d50e6:	4620      	mov	r0, r4
   d50e8:	f7ff fb56 	bl	d4798 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d50ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d50ee:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d50f2:	2800      	cmp	r0, #0
   d50f4:	d078      	beq.n	d51e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d50f6:	2d00      	cmp	r5, #0
   d50f8:	d174      	bne.n	d51e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d50fa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d50fe:	2b20      	cmp	r3, #32
   d5100:	bf0c      	ite	eq
   d5102:	253c      	moveq	r5, #60	; 0x3c
   d5104:	253d      	movne	r5, #61	; 0x3d
   d5106:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d510a:	f1b8 0f00 	cmp.w	r8, #0
   d510e:	d001      	beq.n	d5114 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5110:	f002 fbe4 	bl	d78dc <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5114:	b1fe      	cbz	r6, d5156 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d5116:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d511a:	2800      	cmp	r0, #0
   d511c:	db1b      	blt.n	d5156 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d511e:	2101      	movs	r1, #1
   d5120:	b280      	uxth	r0, r0
   d5122:	f002 fd1b 	bl	d7b5c <pinMode>
    digitalWrite(rstPin, HIGH);
   d5126:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d512a:	2101      	movs	r1, #1
   d512c:	b280      	uxth	r0, r0
   d512e:	f002 fd26 	bl	d7b7e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d5132:	2001      	movs	r0, #1
   d5134:	f002 f948 	bl	d73c8 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5138:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d513c:	2100      	movs	r1, #0
   d513e:	b280      	uxth	r0, r0
   d5140:	f002 fd1d 	bl	d7b7e <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5144:	200a      	movs	r0, #10
   d5146:	f002 f93f 	bl	d73c8 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d514a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d514e:	2101      	movs	r1, #1
   d5150:	b280      	uxth	r0, r0
   d5152:	f002 fd14 	bl	d7b7e <digitalWrite>
  TRANSACTION_START
   d5156:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5158:	2800      	cmp	r0, #0
   d515a:	d074      	beq.n	d5246 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d515c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d515e:	f002 fbb9 	bl	d78d4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d5162:	2204      	movs	r2, #4
   d5164:	4957      	ldr	r1, [pc, #348]	; (d52c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d5166:	4620      	mov	r0, r4
   d5168:	f7ff ff0d 	bl	d4f86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d516c:	7aa1      	ldrb	r1, [r4, #10]
   d516e:	3901      	subs	r1, #1
   d5170:	b2c9      	uxtb	r1, r1
   d5172:	4620      	mov	r0, r4
   d5174:	f7ff fea0 	bl	d4eb8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d5178:	4953      	ldr	r1, [pc, #332]	; (d52c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d517a:	2204      	movs	r2, #4
   d517c:	4620      	mov	r0, r4
   d517e:	f7ff ff02 	bl	d4f86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d5182:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5186:	2b01      	cmp	r3, #1
   d5188:	bf0c      	ite	eq
   d518a:	2110      	moveq	r1, #16
   d518c:	2114      	movne	r1, #20
   d518e:	4620      	mov	r0, r4
   d5190:	f7ff fe92 	bl	d4eb8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d5194:	2204      	movs	r2, #4
   d5196:	494d      	ldr	r1, [pc, #308]	; (d52cc <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5198:	4620      	mov	r0, r4
   d519a:	f7ff fef4 	bl	d4f86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d519e:	68a3      	ldr	r3, [r4, #8]
   d51a0:	4a4b      	ldr	r2, [pc, #300]	; (d52d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d51a2:	4293      	cmp	r3, r2
   d51a4:	d15c      	bne.n	d5260 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d51a6:	494b      	ldr	r1, [pc, #300]	; (d52d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d51a8:	2204      	movs	r2, #4
   d51aa:	4620      	mov	r0, r4
   d51ac:	f7ff feeb 	bl	d4f86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d51b0:	21d9      	movs	r1, #217	; 0xd9
   d51b2:	4620      	mov	r0, r4
   d51b4:	f7ff fe80 	bl	d4eb8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d51b8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d51bc:	2b01      	cmp	r3, #1
   d51be:	bf0c      	ite	eq
   d51c0:	2122      	moveq	r1, #34	; 0x22
   d51c2:	21f1      	movne	r1, #241	; 0xf1
   d51c4:	4620      	mov	r0, r4
   d51c6:	f7ff fe77 	bl	d4eb8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d51ca:	4620      	mov	r0, r4
   d51cc:	4942      	ldr	r1, [pc, #264]	; (d52d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d51ce:	2206      	movs	r2, #6
   d51d0:	f7ff fed9 	bl	d4f86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d51d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51d6:	2800      	cmp	r0, #0
   d51d8:	d063      	beq.n	d52a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d51da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d51dc:	f002 fb7a 	bl	d78d4 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d51e0:	2001      	movs	r0, #1
   d51e2:	e76b      	b.n	d50bc <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d51e4:	b26d      	sxtb	r5, r5
   d51e6:	e78e      	b.n	d5106 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d51e8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d51ec:	2101      	movs	r1, #1
   d51ee:	b280      	uxth	r0, r0
   d51f0:	f002 fcb4 	bl	d7b5c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d51f4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d51f8:	2101      	movs	r1, #1
   d51fa:	b280      	uxth	r0, r0
   d51fc:	f002 fcae 	bl	d7b5c <pinMode>
    SSD1306_DESELECT
   d5200:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5204:	2101      	movs	r1, #1
   d5206:	b280      	uxth	r0, r0
   d5208:	f002 fcb9 	bl	d7b7e <digitalWrite>
    if(spi) { // Hardware SPI
   d520c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d520e:	b13d      	cbz	r5, d5220 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5210:	f1b8 0f00 	cmp.w	r8, #0
   d5214:	f43f af7e 	beq.w	d5114 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5218:	4628      	mov	r0, r5
   d521a:	f000 fd75 	bl	d5d08 <_ZN8SPIClass5beginEv>
   d521e:	e779      	b.n	d5114 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5220:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5224:	2101      	movs	r1, #1
   d5226:	b280      	uxth	r0, r0
   d5228:	f002 fc98 	bl	d7b5c <pinMode>
      pinMode(clkPin , OUTPUT);
   d522c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5230:	2101      	movs	r1, #1
   d5232:	b280      	uxth	r0, r0
   d5234:	f002 fc92 	bl	d7b5c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5238:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d523c:	4629      	mov	r1, r5
   d523e:	b280      	uxth	r0, r0
   d5240:	f002 fc9d 	bl	d7b7e <digitalWrite>
   d5244:	e766      	b.n	d5114 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d5246:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5248:	b118      	cbz	r0, d5252 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d524a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d524e:	f000 fd85 	bl	d5d5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5252:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5256:	2100      	movs	r1, #0
   d5258:	b280      	uxth	r0, r0
   d525a:	f002 fc90 	bl	d7b7e <digitalWrite>
   d525e:	e780      	b.n	d5162 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d5260:	4a1e      	ldr	r2, [pc, #120]	; (d52dc <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d5262:	4293      	cmp	r3, r2
   d5264:	d10e      	bne.n	d5284 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d5266:	491e      	ldr	r1, [pc, #120]	; (d52e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d5268:	2203      	movs	r2, #3
   d526a:	4620      	mov	r0, r4
   d526c:	f7ff fe8b 	bl	d4f86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d5270:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5274:	2b01      	cmp	r3, #1
   d5276:	bf0c      	ite	eq
   d5278:	219f      	moveq	r1, #159	; 0x9f
   d527a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d527c:	4620      	mov	r0, r4
   d527e:	f7ff fe1b 	bl	d4eb8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d5282:	e795      	b.n	d51b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d5284:	4a17      	ldr	r2, [pc, #92]	; (d52e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d5286:	4293      	cmp	r3, r2
   d5288:	d192      	bne.n	d51b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d528a:	4917      	ldr	r1, [pc, #92]	; (d52e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d528c:	2203      	movs	r2, #3
   d528e:	4620      	mov	r0, r4
   d5290:	f7ff fe79 	bl	d4f86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5294:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5298:	2b01      	cmp	r3, #1
   d529a:	bf0c      	ite	eq
   d529c:	2110      	moveq	r1, #16
   d529e:	21af      	movne	r1, #175	; 0xaf
   d52a0:	e7ec      	b.n	d527c <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d52a2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d52a6:	2101      	movs	r1, #1
   d52a8:	b280      	uxth	r0, r0
   d52aa:	f002 fc68 	bl	d7b7e <digitalWrite>
   d52ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d52b0:	2800      	cmp	r0, #0
   d52b2:	d095      	beq.n	d51e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d52b4:	f000 fd39 	bl	d5d2a <_ZN8SPIClass14endTransactionEv>
   d52b8:	e792      	b.n	d51e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d52ba:	bf00      	nop
   d52bc:	000d894c 	.word	0x000d894c
   d52c0:	000d868c 	.word	0x000d868c
   d52c4:	000d8b94 	.word	0x000d8b94
   d52c8:	000d8b98 	.word	0x000d8b98
   d52cc:	000d8b9c 	.word	0x000d8b9c
   d52d0:	00200080 	.word	0x00200080
   d52d4:	000d8ba6 	.word	0x000d8ba6
   d52d8:	000d8ba0 	.word	0x000d8ba0
   d52dc:	00400080 	.word	0x00400080
   d52e0:	000d8baa 	.word	0x000d8baa
   d52e4:	00100060 	.word	0x00100060
   d52e8:	000d8bad 	.word	0x000d8bad

000d52ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d52ec:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d52ee:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d52f0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d52f4:	db3d      	blt.n	d5372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d52f6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d52fa:	4294      	cmp	r4, r2
   d52fc:	dd39      	ble.n	d5372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d52fe:	2900      	cmp	r1, #0
      w += x;
   d5300:	bfbe      	ittt	lt
   d5302:	185b      	addlt	r3, r3, r1
   d5304:	b21b      	sxthlt	r3, r3
      x  = 0;
   d5306:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5308:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d530c:	18ce      	adds	r6, r1, r3
   d530e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5310:	bfc4      	itt	gt
   d5312:	1a63      	subgt	r3, r4, r1
   d5314:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d5316:	2b00      	cmp	r3, #0
   d5318:	dd2b      	ble.n	d5372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d531a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d531c:	10d6      	asrs	r6, r2, #3
   d531e:	fb14 1106 	smlabb	r1, r4, r6, r1
   d5322:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d5324:	f002 0007 	and.w	r0, r2, #7
   d5328:	2201      	movs	r2, #1
   d532a:	4082      	lsls	r2, r0
      switch(color) {
   d532c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d532e:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5330:	d016      	beq.n	d5360 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d5332:	2d02      	cmp	r5, #2
   d5334:	d00b      	beq.n	d534e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d5336:	b9e5      	cbnz	r5, d5372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5338:	43d2      	mvns	r2, r2
   d533a:	b2d2      	uxtb	r2, r2
   d533c:	440b      	add	r3, r1
   d533e:	4299      	cmp	r1, r3
   d5340:	d017      	beq.n	d5372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5342:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5346:	4010      	ands	r0, r2
   d5348:	f801 0c01 	strb.w	r0, [r1, #-1]
   d534c:	e7f7      	b.n	d533e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d534e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5350:	4299      	cmp	r1, r3
   d5352:	d00e      	beq.n	d5372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5354:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5358:	4050      	eors	r0, r2
   d535a:	f801 0c01 	strb.w	r0, [r1, #-1]
   d535e:	e7f7      	b.n	d5350 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5360:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d5362:	4299      	cmp	r1, r3
   d5364:	d005      	beq.n	d5372 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5366:	f811 0b01 	ldrb.w	r0, [r1], #1
   d536a:	4310      	orrs	r0, r2
   d536c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5370:	e7f7      	b.n	d5362 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d5372:	bd70      	pop	{r4, r5, r6, pc}

000d5374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5374:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5376:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5378:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d537c:	db76      	blt.n	d546c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d537e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d5382:	42a9      	cmp	r1, r5
   d5384:	da72      	bge.n	d546c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d5386:	2a00      	cmp	r2, #0
      __h += __y;
   d5388:	bfbc      	itt	lt
   d538a:	18d2      	addlt	r2, r2, r3
   d538c:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d538e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d5392:	bfb8      	it	lt
   d5394:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5396:	18d7      	adds	r7, r2, r3
   d5398:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d539a:	bfc4      	itt	gt
   d539c:	1aa3      	subgt	r3, r4, r2
   d539e:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d53a0:	2b00      	cmp	r3, #0
   d53a2:	dd63      	ble.n	d546c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d53a4:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d53a8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d53aa:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d53ae:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d53b2:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d53b4:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d53b8:	d023      	beq.n	d5402 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d53ba:	f1c2 0208 	rsb	r2, r2, #8
   d53be:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d53c0:	4d2c      	ldr	r5, [pc, #176]	; (d5474 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d53c2:	4293      	cmp	r3, r2
   d53c4:	bf3c      	itt	cc
   d53c6:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d53ca:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d53ce:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d53d0:	bf3c      	itt	cc
   d53d2:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d53d6:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d53da:	2e01      	cmp	r6, #1
   d53dc:	d007      	beq.n	d53ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d53de:	2e02      	cmp	r6, #2
   d53e0:	d02e      	beq.n	d5440 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d53e2:	b94e      	cbnz	r6, d53f8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d53e4:	f817 c001 	ldrb.w	ip, [r7, r1]
   d53e8:	ea2c 0505 	bic.w	r5, ip, r5
   d53ec:	e003      	b.n	d53f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d53ee:	f817 c001 	ldrb.w	ip, [r7, r1]
   d53f2:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d53f6:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d53f8:	4293      	cmp	r3, r2
   d53fa:	d337      	bcc.n	d546c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d53fc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5400:	440c      	add	r4, r1
        h -= mod;
   d5402:	1a9a      	subs	r2, r3, r2
   d5404:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d5406:	2a07      	cmp	r2, #7
   d5408:	d90e      	bls.n	d5428 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d540a:	2e02      	cmp	r6, #2
   d540c:	d11d      	bne.n	d544a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d540e:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5410:	7821      	ldrb	r1, [r4, #0]
   d5412:	43c9      	mvns	r1, r1
   d5414:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d5416:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5418:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d541c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d541e:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5420:	440c      	add	r4, r1
            } while(h >= 8);
   d5422:	d8f5      	bhi.n	d5410 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d5424:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5428:	b302      	cbz	r2, d546c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d542a:	4b13      	ldr	r3, [pc, #76]	; (d5478 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d542c:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d542e:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5430:	d019      	beq.n	d5466 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d5432:	2e02      	cmp	r6, #2
   d5434:	d01b      	beq.n	d546e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d5436:	b9ce      	cbnz	r6, d546c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5438:	7822      	ldrb	r2, [r4, #0]
   d543a:	ea22 0303 	bic.w	r3, r2, r3
   d543e:	e014      	b.n	d546a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5440:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5444:	ea85 050c 	eor.w	r5, r5, ip
   d5448:	e7d5      	b.n	d53f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d544a:	2e00      	cmp	r6, #0
   d544c:	bf14      	ite	ne
   d544e:	25ff      	movne	r5, #255	; 0xff
   d5450:	2500      	moveq	r5, #0
   d5452:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5454:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d5456:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5458:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d545c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d545e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5460:	440c      	add	r4, r1
            } while(h >= 8);
   d5462:	d8f7      	bhi.n	d5454 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5464:	e7de      	b.n	d5424 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d5466:	7822      	ldrb	r2, [r4, #0]
   d5468:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d546a:	7023      	strb	r3, [r4, #0]
}
   d546c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d546e:	7822      	ldrb	r2, [r4, #0]
   d5470:	4053      	eors	r3, r2
   d5472:	e7fa      	b.n	d546a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5474:	000d8b84 	.word	0x000d8b84
   d5478:	000d8b8c 	.word	0x000d8b8c

000d547c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d547c:	b470      	push	{r4, r5, r6}
   d547e:	4614      	mov	r4, r2
  switch(rotation) {
   d5480:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5482:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5486:	2a02      	cmp	r2, #2
   d5488:	d00d      	beq.n	d54a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d548a:	2a03      	cmp	r2, #3
   d548c:	d018      	beq.n	d54c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d548e:	2a01      	cmp	r2, #1
   d5490:	d111      	bne.n	d54b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d5492:	8902      	ldrh	r2, [r0, #8]
   d5494:	43e4      	mvns	r4, r4
   d5496:	4414      	add	r4, r2
   d5498:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d549a:	9603      	str	r6, [sp, #12]
   d549c:	460a      	mov	r2, r1
   d549e:	4621      	mov	r1, r4
}
   d54a0:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d54a2:	f7ff bf67 	b.w	d5374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d54a6:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d54a8:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d54aa:	43e4      	mvns	r4, r4
    x -= (w-1);
   d54ac:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d54ae:	4414      	add	r4, r2
    x -= (w-1);
   d54b0:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d54b2:	b224      	sxth	r4, r4
    x -= (w-1);
   d54b4:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d54b6:	9603      	str	r6, [sp, #12]
   d54b8:	4622      	mov	r2, r4
}
   d54ba:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d54bc:	f7ff bf16 	b.w	d52ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d54c0:	8945      	ldrh	r5, [r0, #10]
   d54c2:	4419      	add	r1, r3
   d54c4:	1a69      	subs	r1, r5, r1
   d54c6:	b209      	sxth	r1, r1
    break;
   d54c8:	e7e7      	b.n	d549a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d54ca <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d54ca:	b430      	push	{r4, r5}
   d54cc:	4614      	mov	r4, r2
  switch(rotation) {
   d54ce:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d54d0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d54d4:	2a02      	cmp	r2, #2
   d54d6:	d00d      	beq.n	d54f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d54d8:	2a03      	cmp	r2, #3
   d54da:	d018      	beq.n	d550e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d54dc:	2a01      	cmp	r2, #1
   d54de:	d111      	bne.n	d5504 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d54e0:	18e2      	adds	r2, r4, r3
   d54e2:	8904      	ldrh	r4, [r0, #8]
   d54e4:	1aa4      	subs	r4, r4, r2
   d54e6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d54e8:	9502      	str	r5, [sp, #8]
   d54ea:	460a      	mov	r2, r1
   d54ec:	4621      	mov	r1, r4
}
   d54ee:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d54f0:	f7ff befc 	b.w	d52ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d54f4:	8902      	ldrh	r2, [r0, #8]
   d54f6:	43c9      	mvns	r1, r1
   d54f8:	4411      	add	r1, r2
    y -= (h-1);
   d54fa:	18e2      	adds	r2, r4, r3
   d54fc:	8944      	ldrh	r4, [r0, #10]
   d54fe:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5500:	b209      	sxth	r1, r1
    y -= (h-1);
   d5502:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d5504:	9502      	str	r5, [sp, #8]
   d5506:	4622      	mov	r2, r4
}
   d5508:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d550a:	f7ff bf33 	b.w	d5374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d550e:	8942      	ldrh	r2, [r0, #10]
   d5510:	43c9      	mvns	r1, r1
   d5512:	4411      	add	r1, r2
   d5514:	b209      	sxth	r1, r1
    break;
   d5516:	e7e7      	b.n	d54e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5518 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d551c:	4604      	mov	r4, r0
  TRANSACTION_START
   d551e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5520:	2800      	cmp	r0, #0
   d5522:	d042      	beq.n	d55aa <_ZN16Adafruit_SSD13067displayEv+0x92>
   d5524:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5526:	f002 f9d5 	bl	d78d4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d552a:	4947      	ldr	r1, [pc, #284]	; (d5648 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d552c:	2205      	movs	r2, #5
   d552e:	4620      	mov	r0, r4
   d5530:	f7ff fd29 	bl	d4f86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5534:	7a21      	ldrb	r1, [r4, #8]
   d5536:	3901      	subs	r1, #1
   d5538:	4620      	mov	r0, r4
   d553a:	b2c9      	uxtb	r1, r1
   d553c:	f7ff fcbc 	bl	d4eb8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5540:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5544:	1dde      	adds	r6, r3, #7
   d5546:	bf48      	it	mi
   d5548:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d554c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5550:	8923      	ldrh	r3, [r4, #8]
   d5552:	10f6      	asrs	r6, r6, #3
   d5554:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5558:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d555c:	2800      	cmp	r0, #0
   d555e:	d03a      	beq.n	d55d6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5560:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5564:	f002 f9c4 	bl	d78f0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5568:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d556a:	6803      	ldr	r3, [r0, #0]
   d556c:	2140      	movs	r1, #64	; 0x40
   d556e:	689b      	ldr	r3, [r3, #8]
   d5570:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5572:	2701      	movs	r7, #1
    while(count--) {
   d5574:	42b5      	cmp	r5, r6
   d5576:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5578:	d024      	beq.n	d55c4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d557a:	2f1f      	cmp	r7, #31
   d557c:	d90c      	bls.n	d5598 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d557e:	f002 f9be 	bl	d78fe <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5582:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5586:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5588:	f002 f9b2 	bl	d78f0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d558c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d558e:	6803      	ldr	r3, [r0, #0]
   d5590:	2140      	movs	r1, #64	; 0x40
   d5592:	689b      	ldr	r3, [r3, #8]
   d5594:	4798      	blx	r3
        bytesOut = 1;
   d5596:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5598:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d559a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d559e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d55a0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d55a2:	689b      	ldr	r3, [r3, #8]
   d55a4:	4798      	blx	r3
      bytesOut++;
   d55a6:	b2ff      	uxtb	r7, r7
    while(count--) {
   d55a8:	e7e4      	b.n	d5574 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d55aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d55ac:	b118      	cbz	r0, d55b6 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d55ae:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d55b2:	f000 fbd3 	bl	d5d5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d55b6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d55ba:	2100      	movs	r1, #0
   d55bc:	b280      	uxth	r0, r0
   d55be:	f002 fade 	bl	d7b7e <digitalWrite>
   d55c2:	e7b2      	b.n	d552a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d55c4:	f002 f99b 	bl	d78fe <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d55c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d55ca:	b378      	cbz	r0, d562c <_ZN16Adafruit_SSD13067displayEv+0x114>
   d55cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d55ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d55d2:	f002 b97f 	b.w	d78d4 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d55d6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d55da:	2101      	movs	r1, #1
   d55dc:	b280      	uxth	r0, r0
   d55de:	f002 face 	bl	d7b7e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d55e2:	42b5      	cmp	r5, r6
   d55e4:	d0f0      	beq.n	d55c8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d55e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d55e8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d55ec:	b118      	cbz	r0, d55f6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d55ee:	4649      	mov	r1, r9
   d55f0:	f000 fc22 	bl	d5e38 <_ZN8SPIClass8transferEh>
   d55f4:	e7f5      	b.n	d55e2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d55f6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d55f8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d55fc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5600:	ea09 0108 	and.w	r1, r9, r8
   d5604:	b280      	uxth	r0, r0
   d5606:	f002 faba 	bl	d7b7e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d560a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d560e:	2101      	movs	r1, #1
   d5610:	b280      	uxth	r0, r0
   d5612:	f002 fab4 	bl	d7b7e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5616:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d561a:	2100      	movs	r1, #0
   d561c:	b280      	uxth	r0, r0
   d561e:	f002 faae 	bl	d7b7e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5622:	3f01      	subs	r7, #1
   d5624:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5628:	d1e8      	bne.n	d55fc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d562a:	e7da      	b.n	d55e2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d562c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5630:	2101      	movs	r1, #1
   d5632:	b280      	uxth	r0, r0
   d5634:	f002 faa3 	bl	d7b7e <digitalWrite>
   d5638:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d563a:	b118      	cbz	r0, d5644 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d563c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5640:	f000 bb73 	b.w	d5d2a <_ZN8SPIClass14endTransactionEv>
}
   d5644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5648:	000d8bb0 	.word	0x000d8bb0

000d564c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d564c:	b508      	push	{r3, lr}
   d564e:	4b02      	ldr	r3, [pc, #8]	; (d5658 <netdb_freeaddrinfo+0xc>)
   d5650:	681b      	ldr	r3, [r3, #0]
   d5652:	689b      	ldr	r3, [r3, #8]
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	bd08      	pop	{r3, pc}
   d5658:	00030268 	.word	0x00030268

000d565c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d565c:	b508      	push	{r3, lr}
   d565e:	4b02      	ldr	r3, [pc, #8]	; (d5668 <netdb_getaddrinfo+0xc>)
   d5660:	681b      	ldr	r3, [r3, #0]
   d5662:	68db      	ldr	r3, [r3, #12]
   d5664:	9301      	str	r3, [sp, #4]
   d5666:	bd08      	pop	{r3, pc}
   d5668:	00030268 	.word	0x00030268

000d566c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d566c:	b508      	push	{r3, lr}
   d566e:	4b02      	ldr	r3, [pc, #8]	; (d5678 <HAL_Pin_Mode+0xc>)
   d5670:	681b      	ldr	r3, [r3, #0]
   d5672:	689b      	ldr	r3, [r3, #8]
   d5674:	9301      	str	r3, [sp, #4]
   d5676:	bd08      	pop	{r3, pc}
   d5678:	0003022c 	.word	0x0003022c

000d567c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b02      	ldr	r3, [pc, #8]	; (d5688 <HAL_Get_Pin_Mode+0xc>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	68db      	ldr	r3, [r3, #12]
   d5684:	9301      	str	r3, [sp, #4]
   d5686:	bd08      	pop	{r3, pc}
   d5688:	0003022c 	.word	0x0003022c

000d568c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d568c:	b508      	push	{r3, lr}
   d568e:	4b02      	ldr	r3, [pc, #8]	; (d5698 <HAL_GPIO_Write+0xc>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	691b      	ldr	r3, [r3, #16]
   d5694:	9301      	str	r3, [sp, #4]
   d5696:	bd08      	pop	{r3, pc}
   d5698:	0003022c 	.word	0x0003022c

000d569c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <HAL_GPIO_Read+0xc>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	695b      	ldr	r3, [r3, #20]
   d56a4:	9301      	str	r3, [sp, #4]
   d56a6:	bd08      	pop	{r3, pc}
   d56a8:	0003022c 	.word	0x0003022c

000d56ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d56ac:	b508      	push	{r3, lr}
   d56ae:	4b02      	ldr	r3, [pc, #8]	; (d56b8 <HAL_RNG_GetRandomNumber+0xc>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	685b      	ldr	r3, [r3, #4]
   d56b4:	9301      	str	r3, [sp, #4]
   d56b6:	bd08      	pop	{r3, pc}
   d56b8:	00030218 	.word	0x00030218

000d56bc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b02      	ldr	r3, [pc, #8]	; (d56c8 <HAL_Delay_Microseconds+0xc>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	68db      	ldr	r3, [r3, #12]
   d56c4:	9301      	str	r3, [sp, #4]
   d56c6:	bd08      	pop	{r3, pc}
   d56c8:	00030218 	.word	0x00030218

000d56cc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d56cc:	b508      	push	{r3, lr}
   d56ce:	4b02      	ldr	r3, [pc, #8]	; (d56d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	695b      	ldr	r3, [r3, #20]
   d56d4:	9301      	str	r3, [sp, #4]
   d56d6:	bd08      	pop	{r3, pc}
   d56d8:	00030218 	.word	0x00030218

000d56dc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d56dc:	b508      	push	{r3, lr}
   d56de:	4b02      	ldr	r3, [pc, #8]	; (d56e8 <hal_ble_stack_init+0xc>)
   d56e0:	681b      	ldr	r3, [r3, #0]
   d56e2:	689b      	ldr	r3, [r3, #8]
   d56e4:	9301      	str	r3, [sp, #4]
   d56e6:	bd08      	pop	{r3, pc}
   d56e8:	00030278 	.word	0x00030278

000d56ec <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <hal_ble_gap_set_advertising_data+0xc>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d56f4:	9301      	str	r3, [sp, #4]
   d56f6:	bd08      	pop	{r3, pc}
   d56f8:	00030278 	.word	0x00030278

000d56fc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d56fc:	b508      	push	{r3, lr}
   d56fe:	4b02      	ldr	r3, [pc, #8]	; (d5708 <hal_ble_gap_set_scan_response_data+0xc>)
   d5700:	681b      	ldr	r3, [r3, #0]
   d5702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	bd08      	pop	{r3, pc}
   d5708:	00030278 	.word	0x00030278

000d570c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b02      	ldr	r3, [pc, #8]	; (d5718 <hal_ble_gap_start_advertising+0xc>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5714:	9301      	str	r3, [sp, #4]
   d5716:	bd08      	pop	{r3, pc}
   d5718:	00030278 	.word	0x00030278

000d571c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d571c:	b508      	push	{r3, lr}
   d571e:	4b03      	ldr	r3, [pc, #12]	; (d572c <hal_ble_gap_disconnect+0x10>)
   d5720:	681b      	ldr	r3, [r3, #0]
   d5722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5726:	9301      	str	r3, [sp, #4]
   d5728:	bd08      	pop	{r3, pc}
   d572a:	0000      	.short	0x0000
   d572c:	00030278 	.word	0x00030278

000d5730 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5730:	b508      	push	{r3, lr}
   d5732:	4b03      	ldr	r3, [pc, #12]	; (d5740 <hal_ble_gatt_server_add_service+0x10>)
   d5734:	681b      	ldr	r3, [r3, #0]
   d5736:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d573a:	9301      	str	r3, [sp, #4]
   d573c:	bd08      	pop	{r3, pc}
   d573e:	0000      	.short	0x0000
   d5740:	00030278 	.word	0x00030278

000d5744 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b03      	ldr	r3, [pc, #12]	; (d5754 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d574e:	9301      	str	r3, [sp, #4]
   d5750:	bd08      	pop	{r3, pc}
   d5752:	0000      	.short	0x0000
   d5754:	00030278 	.word	0x00030278

000d5758 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b03      	ldr	r3, [pc, #12]	; (d5768 <hal_ble_gatt_client_write_with_response+0x10>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5762:	9301      	str	r3, [sp, #4]
   d5764:	bd08      	pop	{r3, pc}
   d5766:	0000      	.short	0x0000
   d5768:	00030278 	.word	0x00030278

000d576c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d576c:	b508      	push	{r3, lr}
   d576e:	4b03      	ldr	r3, [pc, #12]	; (d577c <hal_ble_gatt_client_write_without_response+0x10>)
   d5770:	681b      	ldr	r3, [r3, #0]
   d5772:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5776:	9301      	str	r3, [sp, #4]
   d5778:	bd08      	pop	{r3, pc}
   d577a:	0000      	.short	0x0000
   d577c:	00030278 	.word	0x00030278

000d5780 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d5780:	b508      	push	{r3, lr}
   d5782:	4b03      	ldr	r3, [pc, #12]	; (d5790 <hal_ble_gap_get_connection_info+0x10>)
   d5784:	681b      	ldr	r3, [r3, #0]
   d5786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d578a:	9301      	str	r3, [sp, #4]
   d578c:	bd08      	pop	{r3, pc}
   d578e:	0000      	.short	0x0000
   d5790:	00030278 	.word	0x00030278

000d5794 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b03      	ldr	r3, [pc, #12]	; (d57a4 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d579e:	9301      	str	r3, [sp, #4]
   d57a0:	bd08      	pop	{r3, pc}
   d57a2:	0000      	.short	0x0000
   d57a4:	00030278 	.word	0x00030278

000d57a8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b03      	ldr	r3, [pc, #12]	; (d57b8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d57b2:	9301      	str	r3, [sp, #4]
   d57b4:	bd08      	pop	{r3, pc}
   d57b6:	0000      	.short	0x0000
   d57b8:	00030278 	.word	0x00030278

000d57bc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b03      	ldr	r3, [pc, #12]	; (d57cc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d57c6:	9301      	str	r3, [sp, #4]
   d57c8:	bd08      	pop	{r3, pc}
   d57ca:	0000      	.short	0x0000
   d57cc:	00030278 	.word	0x00030278

000d57d0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b03      	ldr	r3, [pc, #12]	; (d57e0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d57da:	9301      	str	r3, [sp, #4]
   d57dc:	bd08      	pop	{r3, pc}
   d57de:	0000      	.short	0x0000
   d57e0:	00030278 	.word	0x00030278

000d57e4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <os_mutex_create+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030248 	.word	0x00030248

000d57f4 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <os_mutex_destroy+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030248 	.word	0x00030248

000d5804 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <os_mutex_recursive_create+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030248 	.word	0x00030248

000d5814 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <os_mutex_recursive_destroy+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030248 	.word	0x00030248

000d5824 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <os_mutex_recursive_lock+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030248 	.word	0x00030248

000d5834 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <os_mutex_recursive_unlock+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	00030248 	.word	0x00030248

000d5844 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <inet_inet_ntop+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	695b      	ldr	r3, [r3, #20]
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	00030264 	.word	0x00030264

000d5854 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <hal_usart_init+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	681b      	ldr	r3, [r3, #0]
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	0003023c 	.word	0x0003023c

000d5864 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <hal_usart_write+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	68db      	ldr	r3, [r3, #12]
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	0003023c 	.word	0x0003023c

000d5874 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <hal_usart_available+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	691b      	ldr	r3, [r3, #16]
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	0003023c 	.word	0x0003023c

000d5884 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <hal_usart_read+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	695b      	ldr	r3, [r3, #20]
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	0003023c 	.word	0x0003023c

000d5894 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b02      	ldr	r3, [pc, #8]	; (d58a0 <hal_usart_peek+0xc>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	699b      	ldr	r3, [r3, #24]
   d589c:	9301      	str	r3, [sp, #4]
   d589e:	bd08      	pop	{r3, pc}
   d58a0:	0003023c 	.word	0x0003023c

000d58a4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d58a4:	b508      	push	{r3, lr}
   d58a6:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <hal_usart_flush+0xc>)
   d58a8:	681b      	ldr	r3, [r3, #0]
   d58aa:	69db      	ldr	r3, [r3, #28]
   d58ac:	9301      	str	r3, [sp, #4]
   d58ae:	bd08      	pop	{r3, pc}
   d58b0:	0003023c 	.word	0x0003023c

000d58b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d58b4:	b508      	push	{r3, lr}
   d58b6:	4b02      	ldr	r3, [pc, #8]	; (d58c0 <hal_usart_is_enabled+0xc>)
   d58b8:	681b      	ldr	r3, [r3, #0]
   d58ba:	6a1b      	ldr	r3, [r3, #32]
   d58bc:	9301      	str	r3, [sp, #4]
   d58be:	bd08      	pop	{r3, pc}
   d58c0:	0003023c 	.word	0x0003023c

000d58c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d58c4:	b508      	push	{r3, lr}
   d58c6:	4b02      	ldr	r3, [pc, #8]	; (d58d0 <hal_usart_available_data_for_write+0xc>)
   d58c8:	681b      	ldr	r3, [r3, #0]
   d58ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d58cc:	9301      	str	r3, [sp, #4]
   d58ce:	bd08      	pop	{r3, pc}
   d58d0:	0003023c 	.word	0x0003023c

000d58d4 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <hal_i2c_set_speed+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	681b      	ldr	r3, [r3, #0]
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	00030228 	.word	0x00030228

000d58e4 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <hal_i2c_begin+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	68db      	ldr	r3, [r3, #12]
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	00030228 	.word	0x00030228

000d58f4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <hal_i2c_begin_transmission+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	699b      	ldr	r3, [r3, #24]
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	00030228 	.word	0x00030228

000d5904 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <hal_i2c_end_transmission+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	69db      	ldr	r3, [r3, #28]
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	00030228 	.word	0x00030228

000d5914 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <hal_i2c_write+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	6a1b      	ldr	r3, [r3, #32]
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	00030228 	.word	0x00030228

000d5924 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <hal_i2c_available+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	00030228 	.word	0x00030228

000d5934 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <hal_i2c_read+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	00030228 	.word	0x00030228

000d5944 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <hal_i2c_peek+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030228 	.word	0x00030228

000d5954 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <hal_i2c_flush+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030228 	.word	0x00030228

000d5964 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <hal_i2c_is_enabled+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030228 	.word	0x00030228

000d5974 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <hal_i2c_init+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030228 	.word	0x00030228

000d5984 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <hal_spi_begin+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	681b      	ldr	r3, [r3, #0]
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030230 	.word	0x00030230

000d5994 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <hal_spi_transfer+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	695b      	ldr	r3, [r3, #20]
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030230 	.word	0x00030230

000d59a4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <hal_spi_init+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	69db      	ldr	r3, [r3, #28]
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	00030230 	.word	0x00030230

000d59b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <hal_spi_is_enabled+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	6a1b      	ldr	r3, [r3, #32]
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	00030230 	.word	0x00030230

000d59c4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <hal_spi_info+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	00030230 	.word	0x00030230

000d59d4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <hal_spi_set_settings+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	00030230 	.word	0x00030230

000d59e4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d59e4:	b508      	push	{r3, lr}
   d59e6:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <hal_spi_acquire+0xc>)
   d59e8:	681b      	ldr	r3, [r3, #0]
   d59ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d59ec:	9301      	str	r3, [sp, #4]
   d59ee:	bd08      	pop	{r3, pc}
   d59f0:	00030230 	.word	0x00030230

000d59f4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <hal_spi_release+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	00030230 	.word	0x00030230

000d5a04 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <HAL_USB_USART_Init+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	681b      	ldr	r3, [r3, #0]
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	0003024c 	.word	0x0003024c

000d5a14 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <HAL_USB_USART_Begin+0xc>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	685b      	ldr	r3, [r3, #4]
   d5a1c:	9301      	str	r3, [sp, #4]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	0003024c 	.word	0x0003024c

000d5a24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5a24:	b508      	push	{r3, lr}
   d5a26:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <HAL_USB_USART_Available_Data+0xc>)
   d5a28:	681b      	ldr	r3, [r3, #0]
   d5a2a:	691b      	ldr	r3, [r3, #16]
   d5a2c:	9301      	str	r3, [sp, #4]
   d5a2e:	bd08      	pop	{r3, pc}
   d5a30:	0003024c 	.word	0x0003024c

000d5a34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5a34:	b508      	push	{r3, lr}
   d5a36:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5a38:	681b      	ldr	r3, [r3, #0]
   d5a3a:	695b      	ldr	r3, [r3, #20]
   d5a3c:	9301      	str	r3, [sp, #4]
   d5a3e:	bd08      	pop	{r3, pc}
   d5a40:	0003024c 	.word	0x0003024c

000d5a44 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b02      	ldr	r3, [pc, #8]	; (d5a50 <HAL_USB_USART_Receive_Data+0xc>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	699b      	ldr	r3, [r3, #24]
   d5a4c:	9301      	str	r3, [sp, #4]
   d5a4e:	bd08      	pop	{r3, pc}
   d5a50:	0003024c 	.word	0x0003024c

000d5a54 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a54:	b508      	push	{r3, lr}
   d5a56:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <HAL_USB_USART_Send_Data+0xc>)
   d5a58:	681b      	ldr	r3, [r3, #0]
   d5a5a:	69db      	ldr	r3, [r3, #28]
   d5a5c:	9301      	str	r3, [sp, #4]
   d5a5e:	bd08      	pop	{r3, pc}
   d5a60:	0003024c 	.word	0x0003024c

000d5a64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5a64:	b508      	push	{r3, lr}
   d5a66:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <HAL_USB_USART_Flush_Data+0xc>)
   d5a68:	681b      	ldr	r3, [r3, #0]
   d5a6a:	6a1b      	ldr	r3, [r3, #32]
   d5a6c:	9301      	str	r3, [sp, #4]
   d5a6e:	bd08      	pop	{r3, pc}
   d5a70:	0003024c 	.word	0x0003024c

000d5a74 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d5a74:	b508      	push	{r3, lr}
   d5a76:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <LED_SetSignalingColor+0xc>)
   d5a78:	681b      	ldr	r3, [r3, #0]
   d5a7a:	685b      	ldr	r3, [r3, #4]
   d5a7c:	9301      	str	r3, [sp, #4]
   d5a7e:	bd08      	pop	{r3, pc}
   d5a80:	00030260 	.word	0x00030260

000d5a84 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5a84:	b508      	push	{r3, lr}
   d5a86:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <LED_Signaling_Start+0xc>)
   d5a88:	681b      	ldr	r3, [r3, #0]
   d5a8a:	689b      	ldr	r3, [r3, #8]
   d5a8c:	9301      	str	r3, [sp, #4]
   d5a8e:	bd08      	pop	{r3, pc}
   d5a90:	00030260 	.word	0x00030260

000d5a94 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5a94:	b508      	push	{r3, lr}
   d5a96:	4b02      	ldr	r3, [pc, #8]	; (d5aa0 <LED_Signaling_Stop+0xc>)
   d5a98:	681b      	ldr	r3, [r3, #0]
   d5a9a:	68db      	ldr	r3, [r3, #12]
   d5a9c:	9301      	str	r3, [sp, #4]
   d5a9e:	bd08      	pop	{r3, pc}
   d5aa0:	00030260 	.word	0x00030260

000d5aa4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5aa4:	b508      	push	{r3, lr}
   d5aa6:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <LED_RGB_IsOverRidden+0xc>)
   d5aa8:	681b      	ldr	r3, [r3, #0]
   d5aaa:	699b      	ldr	r3, [r3, #24]
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	bd08      	pop	{r3, pc}
   d5ab0:	00030260 	.word	0x00030260

000d5ab4 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5ab4:	b508      	push	{r3, lr}
   d5ab6:	4b02      	ldr	r3, [pc, #8]	; (d5ac0 <LED_On+0xc>)
   d5ab8:	681b      	ldr	r3, [r3, #0]
   d5aba:	69db      	ldr	r3, [r3, #28]
   d5abc:	9301      	str	r3, [sp, #4]
   d5abe:	bd08      	pop	{r3, pc}
   d5ac0:	00030260 	.word	0x00030260

000d5ac4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5ac4:	b508      	push	{r3, lr}
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <panic_+0xc>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	bd08      	pop	{r3, pc}
   d5ad0:	00030260 	.word	0x00030260

000d5ad4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5ad4:	b508      	push	{r3, lr}
   d5ad6:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <log_message+0xc>)
   d5ad8:	681b      	ldr	r3, [r3, #0]
   d5ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5adc:	9301      	str	r3, [sp, #4]
   d5ade:	bd08      	pop	{r3, pc}
   d5ae0:	00030260 	.word	0x00030260

000d5ae4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	4b02      	ldr	r3, [pc, #8]	; (d5af0 <set_system_mode+0xc>)
   d5ae8:	681b      	ldr	r3, [r3, #0]
   d5aea:	685b      	ldr	r3, [r3, #4]
   d5aec:	9301      	str	r3, [sp, #4]
   d5aee:	bd08      	pop	{r3, pc}
   d5af0:	00030220 	.word	0x00030220

000d5af4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5af4:	b508      	push	{r3, lr}
   d5af6:	4b02      	ldr	r3, [pc, #8]	; (d5b00 <system_delay_ms+0xc>)
   d5af8:	681b      	ldr	r3, [r3, #0]
   d5afa:	695b      	ldr	r3, [r3, #20]
   d5afc:	9301      	str	r3, [sp, #4]
   d5afe:	bd08      	pop	{r3, pc}
   d5b00:	00030220 	.word	0x00030220

000d5b04 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5b04:	b508      	push	{r3, lr}
   d5b06:	4b02      	ldr	r3, [pc, #8]	; (d5b10 <system_thread_set_state+0xc>)
   d5b08:	681b      	ldr	r3, [r3, #0]
   d5b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b0c:	9301      	str	r3, [sp, #4]
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	00030220 	.word	0x00030220

000d5b14 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5b14:	b508      	push	{r3, lr}
   d5b16:	4b03      	ldr	r3, [pc, #12]	; (d5b24 <system_ctrl_set_app_request_handler+0x10>)
   d5b18:	681b      	ldr	r3, [r3, #0]
   d5b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5b1e:	9301      	str	r3, [sp, #4]
   d5b20:	bd08      	pop	{r3, pc}
   d5b22:	0000      	.short	0x0000
   d5b24:	00030220 	.word	0x00030220

000d5b28 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b03      	ldr	r3, [pc, #12]	; (d5b38 <system_ctrl_set_result+0x10>)
   d5b2c:	681b      	ldr	r3, [r3, #0]
   d5b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5b32:	9301      	str	r3, [sp, #4]
   d5b34:	bd08      	pop	{r3, pc}
   d5b36:	0000      	.short	0x0000
   d5b38:	00030220 	.word	0x00030220

000d5b3c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b3c:	b508      	push	{r3, lr}
   d5b3e:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <network_connect+0xc>)
   d5b40:	681b      	ldr	r3, [r3, #0]
   d5b42:	685b      	ldr	r3, [r3, #4]
   d5b44:	9301      	str	r3, [sp, #4]
   d5b46:	bd08      	pop	{r3, pc}
   d5b48:	00030240 	.word	0x00030240

000d5b4c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <network_connecting+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	689b      	ldr	r3, [r3, #8]
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	00030240 	.word	0x00030240

000d5b5c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <network_disconnect+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	68db      	ldr	r3, [r3, #12]
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	00030240 	.word	0x00030240

000d5b6c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <network_ready+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	691b      	ldr	r3, [r3, #16]
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	00030240 	.word	0x00030240

000d5b7c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <network_on+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	695b      	ldr	r3, [r3, #20]
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	00030240 	.word	0x00030240

000d5b8c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b8c:	b508      	push	{r3, lr}
   d5b8e:	4b02      	ldr	r3, [pc, #8]	; (d5b98 <network_off+0xc>)
   d5b90:	681b      	ldr	r3, [r3, #0]
   d5b92:	699b      	ldr	r3, [r3, #24]
   d5b94:	9301      	str	r3, [sp, #4]
   d5b96:	bd08      	pop	{r3, pc}
   d5b98:	00030240 	.word	0x00030240

000d5b9c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5b9c:	b508      	push	{r3, lr}
   d5b9e:	4b02      	ldr	r3, [pc, #8]	; (d5ba8 <network_listen+0xc>)
   d5ba0:	681b      	ldr	r3, [r3, #0]
   d5ba2:	69db      	ldr	r3, [r3, #28]
   d5ba4:	9301      	str	r3, [sp, #4]
   d5ba6:	bd08      	pop	{r3, pc}
   d5ba8:	00030240 	.word	0x00030240

000d5bac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <network_listening+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	6a1b      	ldr	r3, [r3, #32]
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	00030240 	.word	0x00030240

000d5bbc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <network_set_listen_timeout+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	00030240 	.word	0x00030240

000d5bcc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <network_get_listen_timeout+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	00030240 	.word	0x00030240

000d5bdc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <network_is_on+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	00030240 	.word	0x00030240

000d5bec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <network_is_off+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	00030240 	.word	0x00030240

000d5bfc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	00030244 	.word	0x00030244

000d5c0c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <malloc+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	681b      	ldr	r3, [r3, #0]
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	0003021c 	.word	0x0003021c

000d5c1c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <free+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	685b      	ldr	r3, [r3, #4]
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	0003021c 	.word	0x0003021c

000d5c2c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <realloc+0xc>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	689b      	ldr	r3, [r3, #8]
   d5c34:	9301      	str	r3, [sp, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	0003021c 	.word	0x0003021c

000d5c3c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5c3c:	b508      	push	{r3, lr}
   d5c3e:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <vsnprintf+0xc>)
   d5c40:	681b      	ldr	r3, [r3, #0]
   d5c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c44:	9301      	str	r3, [sp, #4]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	0003021c 	.word	0x0003021c

000d5c4c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5c4c:	b508      	push	{r3, lr}
   d5c4e:	4b02      	ldr	r3, [pc, #8]	; (d5c58 <abort+0xc>)
   d5c50:	681b      	ldr	r3, [r3, #0]
   d5c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c54:	9301      	str	r3, [sp, #4]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	0003021c 	.word	0x0003021c

000d5c5c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <newlib_impure_ptr_callback+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	0003021c 	.word	0x0003021c

000d5c6c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c6c:	2200      	movs	r2, #0
   d5c6e:	6840      	ldr	r0, [r0, #4]
   d5c70:	4611      	mov	r1, r2
   d5c72:	f7ff bf9b 	b.w	d5bac <network_listening>

000d5c76 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5c76:	2200      	movs	r2, #0
   d5c78:	6840      	ldr	r0, [r0, #4]
   d5c7a:	4611      	mov	r1, r2
   d5c7c:	f7ff bfa6 	b.w	d5bcc <network_get_listen_timeout>

000d5c80 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5c80:	6840      	ldr	r0, [r0, #4]
   d5c82:	2200      	movs	r2, #0
   d5c84:	f7ff bf9a 	b.w	d5bbc <network_set_listen_timeout>

000d5c88 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c88:	6840      	ldr	r0, [r0, #4]
   d5c8a:	2200      	movs	r2, #0
   d5c8c:	f081 0101 	eor.w	r1, r1, #1
   d5c90:	f7ff bf84 	b.w	d5b9c <network_listen>

000d5c94 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5c94:	2300      	movs	r3, #0
   d5c96:	6840      	ldr	r0, [r0, #4]
   d5c98:	461a      	mov	r2, r3
   d5c9a:	4619      	mov	r1, r3
   d5c9c:	f7ff bf76 	b.w	d5b8c <network_off>

000d5ca0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5ca0:	2300      	movs	r3, #0
   d5ca2:	6840      	ldr	r0, [r0, #4]
   d5ca4:	461a      	mov	r2, r3
   d5ca6:	4619      	mov	r1, r3
   d5ca8:	f7ff bf68 	b.w	d5b7c <network_on>

000d5cac <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5cac:	2200      	movs	r2, #0
   d5cae:	6840      	ldr	r0, [r0, #4]
   d5cb0:	4611      	mov	r1, r2
   d5cb2:	f7ff bf5b 	b.w	d5b6c <network_ready>

000d5cb6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5cb6:	2200      	movs	r2, #0
   d5cb8:	6840      	ldr	r0, [r0, #4]
   d5cba:	4611      	mov	r1, r2
   d5cbc:	f7ff bf46 	b.w	d5b4c <network_connecting>

000d5cc0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5cc0:	6840      	ldr	r0, [r0, #4]
   d5cc2:	2200      	movs	r2, #0
   d5cc4:	2102      	movs	r1, #2
   d5cc6:	f7ff bf49 	b.w	d5b5c <network_disconnect>

000d5cca <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5cca:	2300      	movs	r3, #0
   d5ccc:	6840      	ldr	r0, [r0, #4]
   d5cce:	461a      	mov	r2, r3
   d5cd0:	f7ff bf34 	b.w	d5b3c <network_connect>

000d5cd4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5cd4:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5cd6:	2203      	movs	r2, #3
   d5cd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5cda:	4a02      	ldr	r2, [pc, #8]	; (d5ce4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5cdc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5cde:	4770      	bx	lr
   d5ce0:	2003e644 	.word	0x2003e644
   d5ce4:	000d8bc0 	.word	0x000d8bc0

000d5ce8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5ce8:	2100      	movs	r1, #0
   d5cea:	f7ff be7b 	b.w	d59e4 <hal_spi_acquire>

000d5cee <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5cee:	2100      	movs	r1, #0
   d5cf0:	f7ff be80 	b.w	d59f4 <hal_spi_release>

000d5cf4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5cf4:	b510      	push	{r4, lr}
   d5cf6:	4604      	mov	r4, r0
   d5cf8:	4608      	mov	r0, r1
{
    _spi = spi;
   d5cfa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5cfc:	f7ff fe52 	bl	d59a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5d00:	2300      	movs	r3, #0
   d5d02:	6063      	str	r3, [r4, #4]
}
   d5d04:	4620      	mov	r0, r4
   d5d06:	bd10      	pop	{r4, pc}

000d5d08 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5d08:	b510      	push	{r4, lr}
   d5d0a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5d0c:	7800      	ldrb	r0, [r0, #0]
   d5d0e:	f7ff ffeb 	bl	d5ce8 <_ZN8SPIClass4lockEv.isra.0>
   d5d12:	b948      	cbnz	r0, d5d28 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5d14:	7820      	ldrb	r0, [r4, #0]
   d5d16:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5d1a:	f7ff fe33 	bl	d5984 <hal_spi_begin>
        unlock();
   d5d1e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5d24:	f7ff bfe3 	b.w	d5cee <_ZN8SPIClass6unlockEv.isra.0>
}
   d5d28:	bd10      	pop	{r4, pc}

000d5d2a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5d2a:	7800      	ldrb	r0, [r0, #0]
   d5d2c:	f7ff bfdf 	b.w	d5cee <_ZN8SPIClass6unlockEv.isra.0>

000d5d30 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5d30:	0840      	lsrs	r0, r0, #1
{
   d5d32:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5d34:	6018      	str	r0, [r3, #0]
   d5d36:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5d38:	6818      	ldr	r0, [r3, #0]
   d5d3a:	4288      	cmp	r0, r1
   d5d3c:	b2e5      	uxtb	r5, r4
   d5d3e:	d906      	bls.n	d5d4e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5d40:	3401      	adds	r4, #1
   d5d42:	2c08      	cmp	r4, #8
   d5d44:	d002      	beq.n	d5d4c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5d46:	0840      	lsrs	r0, r0, #1
   d5d48:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5d4a:	e7f5      	b.n	d5d38 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5d4c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5d50:	5d5b      	ldrb	r3, [r3, r5]
   d5d52:	7013      	strb	r3, [r2, #0]
}
   d5d54:	bd30      	pop	{r4, r5, pc}
   d5d56:	bf00      	nop
   d5d58:	000d8bf4 	.word	0x000d8bf4

000d5d5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d60:	4606      	mov	r6, r0
   d5d62:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5d64:	7800      	ldrb	r0, [r0, #0]
{
   d5d66:	460c      	mov	r4, r1
    CHECK(lock());
   d5d68:	f7ff ffbe 	bl	d5ce8 <_ZN8SPIClass4lockEv.isra.0>
   d5d6c:	2800      	cmp	r0, #0
   d5d6e:	db1b      	blt.n	d5da8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5d70:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5d72:	2214      	movs	r2, #20
   d5d74:	2100      	movs	r1, #0
   d5d76:	a809      	add	r0, sp, #36	; 0x24
   d5d78:	f002 f8d0 	bl	d7f1c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5d7c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5d7e:	2200      	movs	r2, #0
   d5d80:	a909      	add	r1, sp, #36	; 0x24
   d5d82:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5d84:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5d88:	f7ff fe1c 	bl	d59c4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5d8c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5d90:	b113      	cbz	r3, d5d98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5d92:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5d96:	b155      	cbz	r5, d5dae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5d98:	2700      	movs	r7, #0
   d5d9a:	46b9      	mov	r9, r7
   d5d9c:	46b8      	mov	r8, r7
   d5d9e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5da0:	7923      	ldrb	r3, [r4, #4]
   d5da2:	b15d      	cbz	r5, d5dbc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5da4:	b1c3      	cbz	r3, d5dd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5da6:	2000      	movs	r0, #0
}
   d5da8:	b00f      	add	sp, #60	; 0x3c
   d5daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5dae:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5db2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5db6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5dba:	e7f1      	b.n	d5da0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5dbc:	2b00      	cmp	r3, #0
   d5dbe:	d135      	bne.n	d5e2c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5dc0:	68a3      	ldr	r3, [r4, #8]
   d5dc2:	4543      	cmp	r3, r8
   d5dc4:	d108      	bne.n	d5dd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5dc6:	f88d 9020 	strb.w	r9, [sp, #32]
   d5dca:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5dce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5dd2:	89a3      	ldrh	r3, [r4, #12]
   d5dd4:	429a      	cmp	r2, r3
   d5dd6:	d0e6      	beq.n	d5da6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5dd8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5dda:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5ddc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5de0:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5de2:	ab04      	add	r3, sp, #16
   d5de4:	f10d 020f 	add.w	r2, sp, #15
   d5de8:	f7ff ffa2 	bl	d5d30 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5dec:	7921      	ldrb	r1, [r4, #4]
   d5dee:	b985      	cbnz	r5, d5e12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5df0:	b989      	cbnz	r1, d5e16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5df2:	68a3      	ldr	r3, [r4, #8]
   d5df4:	4543      	cmp	r3, r8
   d5df6:	d30e      	bcc.n	d5e16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5df8:	f88d 9020 	strb.w	r9, [sp, #32]
   d5dfc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5e00:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5e04:	89a3      	ldrh	r3, [r4, #12]
   d5e06:	429a      	cmp	r2, r3
   d5e08:	d105      	bne.n	d5e16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5e0a:	9b04      	ldr	r3, [sp, #16]
   d5e0c:	4543      	cmp	r3, r8
   d5e0e:	d102      	bne.n	d5e16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5e10:	e7c9      	b.n	d5da6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5e12:	2900      	cmp	r1, #0
   d5e14:	d1f9      	bne.n	d5e0a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5e16:	2300      	movs	r3, #0
   d5e18:	9301      	str	r3, [sp, #4]
   d5e1a:	7b63      	ldrb	r3, [r4, #13]
   d5e1c:	9300      	str	r3, [sp, #0]
   d5e1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5e22:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5e24:	7830      	ldrb	r0, [r6, #0]
   d5e26:	f7ff fdd5 	bl	d59d4 <hal_spi_set_settings>
   d5e2a:	e7bc      	b.n	d5da6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5e2c:	e9cd 5500 	strd	r5, r5, [sp]
   d5e30:	462b      	mov	r3, r5
   d5e32:	462a      	mov	r2, r5
   d5e34:	2101      	movs	r1, #1
   d5e36:	e7f5      	b.n	d5e24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5e38 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5e38:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5e3a:	7800      	ldrb	r0, [r0, #0]
   d5e3c:	f7ff fdaa 	bl	d5994 <hal_spi_transfer>
}
   d5e40:	b2c0      	uxtb	r0, r0
   d5e42:	bd08      	pop	{r3, pc}

000d5e44 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5e44:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5e46:	4b09      	ldr	r3, [pc, #36]	; (d5e6c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5e48:	4c09      	ldr	r4, [pc, #36]	; (d5e70 <_GLOBAL__sub_I_System+0x2c>)
   d5e4a:	2202      	movs	r2, #2
   d5e4c:	2000      	movs	r0, #0
   d5e4e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5e50:	4b08      	ldr	r3, [pc, #32]	; (d5e74 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5e52:	6020      	str	r0, [r4, #0]
   d5e54:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5e56:	71a0      	strb	r0, [r4, #6]
   d5e58:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5e5a:	f7ff fe43 	bl	d5ae4 <set_system_mode>
SystemClass System;
   d5e5e:	4620      	mov	r0, r4
   d5e60:	4a05      	ldr	r2, [pc, #20]	; (d5e78 <_GLOBAL__sub_I_System+0x34>)
   d5e62:	4906      	ldr	r1, [pc, #24]	; (d5e7c <_GLOBAL__sub_I_System+0x38>)
   d5e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5e68:	f001 bef6 	b.w	d7c58 <__aeabi_atexit>
   d5e6c:	2003e658 	.word	0x2003e658
   d5e70:	2003e64c 	.word	0x2003e64c
   d5e74:	ffff0000 	.word	0xffff0000
   d5e78:	2003e56c 	.word	0x2003e56c
   d5e7c:	000d4131 	.word	0x000d4131

000d5e80 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5e80:	b510      	push	{r4, lr}
   d5e82:	4604      	mov	r4, r0
{
	free(buffer);
   d5e84:	6800      	ldr	r0, [r0, #0]
   d5e86:	f7ff fec9 	bl	d5c1c <free>
}
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	bd10      	pop	{r4, pc}

000d5e8e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5e8e:	b510      	push	{r4, lr}
   d5e90:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5e92:	6800      	ldr	r0, [r0, #0]
   d5e94:	b108      	cbz	r0, d5e9a <_ZN6String10invalidateEv+0xc>
   d5e96:	f7ff fec1 	bl	d5c1c <free>
	buffer = NULL;
   d5e9a:	2300      	movs	r3, #0
	capacity = len = 0;
   d5e9c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5ea0:	6023      	str	r3, [r4, #0]
}
   d5ea2:	bd10      	pop	{r4, pc}

000d5ea4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5ea4:	b538      	push	{r3, r4, r5, lr}
   d5ea6:	4604      	mov	r4, r0
   d5ea8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5eaa:	6800      	ldr	r0, [r0, #0]
   d5eac:	3101      	adds	r1, #1
   d5eae:	f7ff febd 	bl	d5c2c <realloc>
	if (newbuffer) {
   d5eb2:	b110      	cbz	r0, d5eba <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5eb4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5eb8:	2001      	movs	r0, #1
	}
	return 0;
}
   d5eba:	bd38      	pop	{r3, r4, r5, pc}

000d5ebc <_ZN6String7reserveEj>:
{
   d5ebc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5ebe:	6803      	ldr	r3, [r0, #0]
{
   d5ec0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5ec2:	b123      	cbz	r3, d5ece <_ZN6String7reserveEj+0x12>
   d5ec4:	6843      	ldr	r3, [r0, #4]
   d5ec6:	428b      	cmp	r3, r1
   d5ec8:	d301      	bcc.n	d5ece <_ZN6String7reserveEj+0x12>
   d5eca:	2001      	movs	r0, #1
}
   d5ecc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5ece:	4620      	mov	r0, r4
   d5ed0:	f7ff ffe8 	bl	d5ea4 <_ZN6String12changeBufferEj>
   d5ed4:	2800      	cmp	r0, #0
   d5ed6:	d0f9      	beq.n	d5ecc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5ed8:	68a3      	ldr	r3, [r4, #8]
   d5eda:	2b00      	cmp	r3, #0
   d5edc:	d1f5      	bne.n	d5eca <_ZN6String7reserveEj+0xe>
   d5ede:	6822      	ldr	r2, [r4, #0]
   d5ee0:	7013      	strb	r3, [r2, #0]
   d5ee2:	e7f2      	b.n	d5eca <_ZN6String7reserveEj+0xe>

000d5ee4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5ee6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5ee8:	4611      	mov	r1, r2
   d5eea:	9201      	str	r2, [sp, #4]
{
   d5eec:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5eee:	f7ff ffe5 	bl	d5ebc <_ZN6String7reserveEj>
   d5ef2:	9a01      	ldr	r2, [sp, #4]
   d5ef4:	b928      	cbnz	r0, d5f02 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	f7ff ffc9 	bl	d5e8e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5efc:	4620      	mov	r0, r4
   d5efe:	b003      	add	sp, #12
   d5f00:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5f02:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5f04:	4629      	mov	r1, r5
   d5f06:	6820      	ldr	r0, [r4, #0]
   d5f08:	f001 ffe0 	bl	d7ecc <memcpy>
	buffer[len] = 0;
   d5f0c:	6822      	ldr	r2, [r4, #0]
   d5f0e:	68a3      	ldr	r3, [r4, #8]
   d5f10:	2100      	movs	r1, #0
   d5f12:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5f14:	e7f2      	b.n	d5efc <_ZN6String4copyEPKcj+0x18>

000d5f16 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5f16:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5f18:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5f1a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5f1e:	4604      	mov	r4, r0
	len = 0;
   d5f20:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f22:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5f24:	b141      	cbz	r1, d5f38 <_ZN6StringC1EPKc+0x22>
   d5f26:	4608      	mov	r0, r1
   d5f28:	9101      	str	r1, [sp, #4]
   d5f2a:	f002 f82d 	bl	d7f88 <strlen>
   d5f2e:	9901      	ldr	r1, [sp, #4]
   d5f30:	4602      	mov	r2, r0
   d5f32:	4620      	mov	r0, r4
   d5f34:	f7ff ffd6 	bl	d5ee4 <_ZN6String4copyEPKcj>
}
   d5f38:	4620      	mov	r0, r4
   d5f3a:	b002      	add	sp, #8
   d5f3c:	bd10      	pop	{r4, pc}

000d5f3e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5f3e:	b513      	push	{r0, r1, r4, lr}
   d5f40:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5f42:	b159      	cbz	r1, d5f5c <_ZN6StringaSEPKc+0x1e>
   d5f44:	4608      	mov	r0, r1
   d5f46:	9101      	str	r1, [sp, #4]
   d5f48:	f002 f81e 	bl	d7f88 <strlen>
   d5f4c:	9901      	ldr	r1, [sp, #4]
   d5f4e:	4602      	mov	r2, r0
   d5f50:	4620      	mov	r0, r4
   d5f52:	f7ff ffc7 	bl	d5ee4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5f56:	4620      	mov	r0, r4
   d5f58:	b002      	add	sp, #8
   d5f5a:	bd10      	pop	{r4, pc}
	else invalidate();
   d5f5c:	f7ff ff97 	bl	d5e8e <_ZN6String10invalidateEv>
   d5f60:	e7f9      	b.n	d5f56 <_ZN6StringaSEPKc+0x18>

000d5f62 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d5f62:	b558      	push	{r3, r4, r6, lr}
   d5f64:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d5f66:	b12a      	cbz	r2, d5f74 <_ZNK6String8getBytesEPhjj+0x12>
   d5f68:	b121      	cbz	r1, d5f74 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d5f6a:	6884      	ldr	r4, [r0, #8]
   d5f6c:	42a3      	cmp	r3, r4
   d5f6e:	d302      	bcc.n	d5f76 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d5f70:	2300      	movs	r3, #0
   d5f72:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d5f74:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d5f76:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d5f78:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d5f7a:	6801      	ldr	r1, [r0, #0]
   d5f7c:	4294      	cmp	r4, r2
   d5f7e:	bf28      	it	cs
   d5f80:	4614      	movcs	r4, r2
   d5f82:	4419      	add	r1, r3
   d5f84:	4622      	mov	r2, r4
   d5f86:	4630      	mov	r0, r6
   d5f88:	f002 f806 	bl	d7f98 <strncpy>
	buf[n] = 0;
   d5f8c:	2300      	movs	r3, #0
   d5f8e:	5533      	strb	r3, [r6, r4]
   d5f90:	e7f0      	b.n	d5f74 <_ZNK6String8getBytesEPhjj+0x12>

000d5f92 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5f92:	4770      	bx	lr

000d5f94 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d5f94:	4770      	bx	lr

000d5f96 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d5f96:	4770      	bx	lr

000d5f98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5f98:	4770      	bx	lr
	...

000d5f9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5f9c:	4b06      	ldr	r3, [pc, #24]	; (d5fb8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5f9e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5fa0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d5fa2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5fa6:	d005      	beq.n	d5fb4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5fa8:	4608      	mov	r0, r1
   d5faa:	f001 fe61 	bl	d7c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5fae:	2800      	cmp	r0, #0
	return nullptr;
   d5fb0:	bf08      	it	eq
   d5fb2:	2400      	moveq	r4, #0
      }
   d5fb4:	4620      	mov	r0, r4
   d5fb6:	bd10      	pop	{r4, pc}
   d5fb8:	000d8d44 	.word	0x000d8d44

000d5fbc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5fbc:	4b06      	ldr	r3, [pc, #24]	; (d5fd8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5fbe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5fc0:	b510      	push	{r4, lr}
   d5fc2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5fc6:	d005      	beq.n	d5fd4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5fc8:	4608      	mov	r0, r1
   d5fca:	f001 fe51 	bl	d7c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5fce:	2800      	cmp	r0, #0
	return nullptr;
   d5fd0:	bf08      	it	eq
   d5fd2:	2400      	moveq	r4, #0
      }
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	bd10      	pop	{r4, pc}
   d5fd8:	000d8d44 	.word	0x000d8d44

000d5fdc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5fdc:	4b06      	ldr	r3, [pc, #24]	; (d5ff8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5fde:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5fe0:	b510      	push	{r4, lr}
   d5fe2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5fe6:	d005      	beq.n	d5ff4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5fe8:	4608      	mov	r0, r1
   d5fea:	f001 fe41 	bl	d7c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5fee:	2800      	cmp	r0, #0
	return nullptr;
   d5ff0:	bf08      	it	eq
   d5ff2:	2400      	moveq	r4, #0
      }
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	bd10      	pop	{r4, pc}
   d5ff8:	000d8d44 	.word	0x000d8d44

000d5ffc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5ffc:	b510      	push	{r4, lr}
   d5ffe:	2168      	movs	r1, #104	; 0x68
   d6000:	4604      	mov	r4, r0
   d6002:	f001 fe2e 	bl	d7c62 <_ZdlPvj>
   d6006:	4620      	mov	r0, r4
   d6008:	bd10      	pop	{r4, pc}

000d600a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d600a:	b510      	push	{r4, lr}
   d600c:	2128      	movs	r1, #40	; 0x28
   d600e:	4604      	mov	r4, r0
   d6010:	f001 fe27 	bl	d7c62 <_ZdlPvj>
   d6014:	4620      	mov	r0, r4
   d6016:	bd10      	pop	{r4, pc}

000d6018 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6018:	b510      	push	{r4, lr}
   d601a:	2130      	movs	r1, #48	; 0x30
   d601c:	4604      	mov	r4, r0
   d601e:	f001 fe20 	bl	d7c62 <_ZdlPvj>
   d6022:	4620      	mov	r0, r4
   d6024:	bd10      	pop	{r4, pc}

000d6026 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6026:	f7fe b838 	b.w	d409a <_ZdlPv>

000d602a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d602a:	f7fe b836 	b.w	d409a <_ZdlPv>

000d602e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d602e:	f7fe b834 	b.w	d409a <_ZdlPv>

000d6032 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6032:	b510      	push	{r4, lr}
          _M_dispose();
   d6034:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6036:	4604      	mov	r4, r0
          _M_dispose();
   d6038:	689b      	ldr	r3, [r3, #8]
   d603a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d603c:	68a3      	ldr	r3, [r4, #8]
   d603e:	3b01      	subs	r3, #1
   d6040:	60a3      	str	r3, [r4, #8]
   d6042:	b92b      	cbnz	r3, d6050 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6044:	6823      	ldr	r3, [r4, #0]
   d6046:	4620      	mov	r0, r4
   d6048:	68db      	ldr	r3, [r3, #12]
    }
   d604a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d604e:	4718      	bx	r3
    }
   d6050:	bd10      	pop	{r4, pc}

000d6052 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6052:	b510      	push	{r4, lr}
   d6054:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6056:	6800      	ldr	r0, [r0, #0]
   d6058:	b108      	cbz	r0, d605e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d605a:	f7ff fbdb 	bl	d5814 <os_mutex_recursive_destroy>
    }
   d605e:	4620      	mov	r0, r4
   d6060:	bd10      	pop	{r4, pc}
	...

000d6064 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d6064:	b510      	push	{r4, lr}
        mutex_.lock();
   d6066:	4b04      	ldr	r3, [pc, #16]	; (d6078 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d6068:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d606a:	6818      	ldr	r0, [r3, #0]
   d606c:	f7ff fbda 	bl	d5824 <os_mutex_recursive_lock>
        locked_ = true;
   d6070:	2301      	movs	r3, #1
   d6072:	7023      	strb	r3, [r4, #0]
    }
   d6074:	bd10      	pop	{r4, pc}
   d6076:	bf00      	nop
   d6078:	2003e664 	.word	0x2003e664

000d607c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d607c:	b510      	push	{r4, lr}
        mutex_.unlock();
   d607e:	4b04      	ldr	r3, [pc, #16]	; (d6090 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d6080:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6082:	6818      	ldr	r0, [r3, #0]
   d6084:	f7ff fbd6 	bl	d5834 <os_mutex_recursive_unlock>
        locked_ = false;
   d6088:	2300      	movs	r3, #0
   d608a:	7023      	strb	r3, [r4, #0]
    }
   d608c:	bd10      	pop	{r4, pc}
   d608e:	bf00      	nop
   d6090:	2003e664 	.word	0x2003e664

000d6094 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6094:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6096:	2500      	movs	r5, #0
   d6098:	1cec      	adds	r4, r5, #3
   d609a:	428c      	cmp	r4, r1
   d609c:	d80d      	bhi.n	d60ba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d609e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d60a0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d60a2:	5d87      	ldrb	r7, [r0, r6]
   d60a4:	4297      	cmp	r7, r2
   d60a6:	d105      	bne.n	d60b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d60a8:	4426      	add	r6, r4
   d60aa:	42b1      	cmp	r1, r6
   d60ac:	d305      	bcc.n	d60ba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d60ae:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d60b0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d60b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d60b4:	3401      	adds	r4, #1
   d60b6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d60b8:	e7ee      	b.n	d6098 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d60ba:	2000      	movs	r0, #0
   d60bc:	e7f9      	b.n	d60b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d60be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d60be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d60c2:	4604      	mov	r4, r0
   d60c4:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d60c8:	461e      	mov	r6, r3
   d60ca:	4689      	mov	r9, r1
   d60cc:	ab01      	add	r3, sp, #4
   d60ce:	4690      	mov	r8, r2
   d60d0:	460a      	mov	r2, r1
   d60d2:	6a01      	ldr	r1, [r0, #32]
   d60d4:	f7ff ffde 	bl	d6094 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d60d8:	6a25      	ldr	r5, [r4, #32]
   d60da:	1cb3      	adds	r3, r6, #2
   d60dc:	bb17      	cbnz	r7, d6124 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d60de:	b308      	cbz	r0, d6124 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d60e0:	195f      	adds	r7, r3, r5
   d60e2:	1a3f      	subs	r7, r7, r0
   d60e4:	2f1f      	cmp	r7, #31
   d60e6:	d819      	bhi.n	d611c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d60e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d60ec:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d60f0:	eba5 0209 	sub.w	r2, r5, r9
   d60f4:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d60f6:	eb00 0109 	add.w	r1, r0, r9
   d60fa:	eb06 000a 	add.w	r0, r6, sl
   d60fe:	b292      	uxth	r2, r2
   d6100:	4421      	add	r1, r4
   d6102:	4420      	add	r0, r4
   d6104:	f001 fef0 	bl	d7ee8 <memmove>
            selfData_[offset] = len + 1;
   d6108:	1c73      	adds	r3, r6, #1
   d610a:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d610e:	4632      	mov	r2, r6
   d6110:	4641      	mov	r1, r8
   d6112:	eb04 000a 	add.w	r0, r4, sl
   d6116:	f001 fed9 	bl	d7ecc <memcpy>
            selfLen_ = staLen + len + 2;
   d611a:	6227      	str	r7, [r4, #32]
}
   d611c:	6a20      	ldr	r0, [r4, #32]
   d611e:	b002      	add	sp, #8
   d6120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6124:	442b      	add	r3, r5
   d6126:	2b1f      	cmp	r3, #31
   d6128:	d8f8      	bhi.n	d611c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d612a:	1c73      	adds	r3, r6, #1
   d612c:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d612e:	1ca8      	adds	r0, r5, #2
   d6130:	4425      	add	r5, r4
   d6132:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d6134:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6136:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d613a:	4641      	mov	r1, r8
   d613c:	4420      	add	r0, r4
   d613e:	f001 fec5 	bl	d7ecc <memcpy>
        selfLen_ += len;
   d6142:	6a23      	ldr	r3, [r4, #32]
   d6144:	4433      	add	r3, r6
   d6146:	6223      	str	r3, [r4, #32]
   d6148:	e7e8      	b.n	d611c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d614c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d614c:	4a02      	ldr	r2, [pc, #8]	; (d6158 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d614e:	2100      	movs	r1, #0
   d6150:	200a      	movs	r0, #10
   d6152:	f7ff bcb7 	b.w	d5ac4 <panic_>
   d6156:	bf00      	nop
   d6158:	000d56bd 	.word	0x000d56bd

000d615c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d615c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d615e:	b538      	push	{r3, r4, r5, lr}
   d6160:	4604      	mov	r4, r0
	  switch (__op)
   d6162:	d007      	beq.n	d6174 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d6164:	2a03      	cmp	r2, #3
   d6166:	d011      	beq.n	d618c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d6168:	2a01      	cmp	r2, #1
   d616a:	d101      	bne.n	d6170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d616c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d616e:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6170:	2000      	movs	r0, #0
   d6172:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6174:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6176:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6178:	f7fd ff8b 	bl	d4092 <_Znwj>
   d617c:	4603      	mov	r3, r0
   d617e:	2800      	cmp	r0, #0
   d6180:	d0f5      	beq.n	d616e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d6182:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6186:	e883 0003 	stmia.w	r3, {r0, r1}
   d618a:	e7f0      	b.n	d616e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d618c:	6800      	ldr	r0, [r0, #0]
   d618e:	2800      	cmp	r0, #0
   d6190:	d0ee      	beq.n	d6170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d6192:	2108      	movs	r1, #8
   d6194:	f001 fd65 	bl	d7c62 <_ZdlPvj>
   d6198:	e7ea      	b.n	d6170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d619a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d619a:	b430      	push	{r4, r5}
   d619c:	460d      	mov	r5, r1
   d619e:	4611      	mov	r1, r2
   d61a0:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d61a2:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d61a4:	6809      	ldr	r1, [r1, #0]
   d61a6:	6828      	ldr	r0, [r5, #0]
   d61a8:	e9d3 4300 	ldrd	r4, r3, [r3]
   d61ac:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d61ae:	bc30      	pop	{r4, r5}
   d61b0:	4760      	bx	ip

000d61b2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d61b2:	b510      	push	{r4, lr}
      if (_M_manager)
   d61b4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d61b6:	4604      	mov	r4, r0
      if (_M_manager)
   d61b8:	b113      	cbz	r3, d61c0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d61ba:	2203      	movs	r2, #3
   d61bc:	4601      	mov	r1, r0
   d61be:	4798      	blx	r3
    }
   d61c0:	4620      	mov	r0, r4
   d61c2:	bd10      	pop	{r4, pc}

000d61c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d61c4:	b510      	push	{r4, lr}
   d61c6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d61c8:	3058      	adds	r0, #88	; 0x58
   d61ca:	f7ff fff2 	bl	d61b2 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d61ce:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d61d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d61d6:	f7ff be53 	b.w	d5e80 <_ZN6StringD1Ev>

000d61da <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d61da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d61de:	b2da      	uxtb	r2, r3
   d61e0:	2a09      	cmp	r2, #9
   d61e2:	d801      	bhi.n	d61e8 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d61e4:	4618      	mov	r0, r3
   d61e6:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d61e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d61ec:	2b05      	cmp	r3, #5
   d61ee:	d801      	bhi.n	d61f4 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d61f0:	3857      	subs	r0, #87	; 0x57
   d61f2:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d61f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d61f8:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d61fa:	bf94      	ite	ls
   d61fc:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d61fe:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6202:	4770      	bx	lr

000d6204 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d6204:	b510      	push	{r4, lr}
            locked_(false) {
   d6206:	2300      	movs	r3, #0
    WiringBleLock() :
   d6208:	4604      	mov	r4, r0
            locked_(false) {
   d620a:	7003      	strb	r3, [r0, #0]
        lock();
   d620c:	f7ff ff2a 	bl	d6064 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d6210:	4620      	mov	r0, r4
   d6212:	bd10      	pop	{r4, pc}

000d6214 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d6214:	b510      	push	{r4, lr}
        if (locked_) {
   d6216:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d6218:	4604      	mov	r4, r0
        if (locked_) {
   d621a:	b10b      	cbz	r3, d6220 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d621c:	f7ff ff2e 	bl	d607c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d6220:	4620      	mov	r0, r4
   d6222:	bd10      	pop	{r4, pc}

000d6224 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d6224:	b082      	sub	sp, #8
   d6226:	4603      	mov	r3, r0
    address_ = addr;
   d6228:	6808      	ldr	r0, [r1, #0]
   d622a:	6849      	ldr	r1, [r1, #4]
   d622c:	466a      	mov	r2, sp
   d622e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d6230:	466a      	mov	r2, sp
   d6232:	ca03      	ldmia	r2!, {r0, r1}
   d6234:	6018      	str	r0, [r3, #0]
}
   d6236:	4618      	mov	r0, r3
    address_ = addr.address_;
   d6238:	6059      	str	r1, [r3, #4]
}
   d623a:	b002      	add	sp, #8
   d623c:	4770      	bx	lr

000d623e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d623e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6240:	7982      	ldrb	r2, [r0, #6]
   d6242:	798b      	ldrb	r3, [r1, #6]
   d6244:	429a      	cmp	r2, r3
   d6246:	d106      	bne.n	d6256 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6248:	2206      	movs	r2, #6
   d624a:	f001 fe31 	bl	d7eb0 <memcmp>
   d624e:	fab0 f080 	clz	r0, r0
   d6252:	0940      	lsrs	r0, r0, #5
}
   d6254:	bd08      	pop	{r3, pc}
    return false;
   d6256:	2000      	movs	r0, #0
   d6258:	e7fc      	b.n	d6254 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d625a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d625a:	f04f 33ff 	mov.w	r3, #4294967295
   d625e:	6003      	str	r3, [r0, #0]
   d6260:	8083      	strh	r3, [r0, #4]
}
   d6262:	2000      	movs	r0, #0
   d6264:	4770      	bx	lr

000d6266 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d6266:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d6268:	b508      	push	{r3, lr}
        : address_{} {
   d626a:	6001      	str	r1, [r0, #0]
   d626c:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d626e:	4602      	mov	r2, r0
    clear();
   d6270:	f7ff fff3 	bl	d625a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d6274:	7191      	strb	r1, [r2, #6]
}
   d6276:	4610      	mov	r0, r2
   d6278:	bd08      	pop	{r3, pc}
	...

000d627c <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d627c:	2201      	movs	r2, #1
   d627e:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6280:	4a06      	ldr	r2, [pc, #24]	; (d629c <_ZN8particle7BleUuidC1Ev+0x20>)
   d6282:	6811      	ldr	r1, [r2, #0]
   d6284:	6001      	str	r1, [r0, #0]
   d6286:	6851      	ldr	r1, [r2, #4]
   d6288:	6041      	str	r1, [r0, #4]
   d628a:	8911      	ldrh	r1, [r2, #8]
   d628c:	7a92      	ldrb	r2, [r2, #10]
   d628e:	7282      	strb	r2, [r0, #10]
   d6290:	2200      	movs	r2, #0
   d6292:	8101      	strh	r1, [r0, #8]
   d6294:	f8c0 200b 	str.w	r2, [r0, #11]
   d6298:	73c2      	strb	r2, [r0, #15]
}
   d629a:	4770      	bx	lr
   d629c:	000d8d4c 	.word	0x000d8d4c

000d62a0 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d62a0:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d62a2:	690b      	ldr	r3, [r1, #16]
   d62a4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d62a6:	f101 0210 	add.w	r2, r1, #16
   d62aa:	4603      	mov	r3, r0
   d62ac:	f851 4b04 	ldr.w	r4, [r1], #4
   d62b0:	f843 4b04 	str.w	r4, [r3], #4
   d62b4:	4291      	cmp	r1, r2
   d62b6:	d1f9      	bne.n	d62ac <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d62b8:	bd10      	pop	{r4, pc}

000d62ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d62ba:	b510      	push	{r4, lr}
    if (uuid128) {
   d62bc:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d62be:	4604      	mov	r4, r0
    if (uuid128) {
   d62c0:	b1b1      	cbz	r1, d62f0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d62c2:	2a01      	cmp	r2, #1
   d62c4:	f101 0210 	add.w	r2, r1, #16
   d62c8:	d10a      	bne.n	d62e0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d62ca:	4601      	mov	r1, r0
   d62cc:	f853 0b04 	ldr.w	r0, [r3], #4
   d62d0:	f841 0b04 	str.w	r0, [r1], #4
   d62d4:	4293      	cmp	r3, r2
   d62d6:	d1f9      	bne.n	d62cc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d62d8:	2301      	movs	r3, #1
   d62da:	6123      	str	r3, [r4, #16]
}
   d62dc:	4620      	mov	r0, r4
   d62de:	bd10      	pop	{r4, pc}
   d62e0:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d62e2:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d62e6:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d62ea:	429a      	cmp	r2, r3
   d62ec:	d1f9      	bne.n	d62e2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d62ee:	e7f3      	b.n	d62d8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d62f0:	2210      	movs	r2, #16
   d62f2:	f001 fe13 	bl	d7f1c <memset>
   d62f6:	e7f1      	b.n	d62dc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d62f8 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d62f8:	b538      	push	{r3, r4, r5, lr}
   d62fa:	4604      	mov	r4, r0
   d62fc:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d62fe:	461a      	mov	r2, r3
   d6300:	f7ff ffdb 	bl	d62ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6304:	81a5      	strh	r5, [r4, #12]
}
   d6306:	4620      	mov	r0, r4
   d6308:	bd38      	pop	{r3, r4, r5, pc}
	...

000d630c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d630c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d630e:	6902      	ldr	r2, [r0, #16]
   d6310:	b922      	cbnz	r2, d631c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d6312:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6314:	3800      	subs	r0, #0
   d6316:	bf18      	it	ne
   d6318:	2001      	movne	r0, #1
}
   d631a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d631c:	4902      	ldr	r1, [pc, #8]	; (d6328 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d631e:	2210      	movs	r2, #16
   d6320:	f001 fdc6 	bl	d7eb0 <memcmp>
   d6324:	e7f6      	b.n	d6314 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d6326:	bf00      	nop
   d6328:	000d8d6c 	.word	0x000d8d6c

000d632c <_ZNK8particle7BleUuid4typeEv>:
}
   d632c:	6900      	ldr	r0, [r0, #16]
   d632e:	4770      	bx	lr

000d6330 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d6330:	b538      	push	{r3, r4, r5, lr}
   d6332:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d6334:	2214      	movs	r2, #20
   d6336:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d6338:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d633a:	f001 fdef 	bl	d7f1c <memset>
    if (type_ == BleUuidType::SHORT) {
   d633e:	6923      	ldr	r3, [r4, #16]
   d6340:	b93b      	cbnz	r3, d6352 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6342:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d6344:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6346:	7b23      	ldrb	r3, [r4, #12]
   d6348:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d634c:	802b      	strh	r3, [r5, #0]
}
   d634e:	4628      	mov	r0, r5
   d6350:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d6352:	2301      	movs	r3, #1
   d6354:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6356:	f104 0210 	add.w	r2, r4, #16
   d635a:	462b      	mov	r3, r5
   d635c:	f854 1b04 	ldr.w	r1, [r4], #4
   d6360:	f843 1b04 	str.w	r1, [r3], #4
   d6364:	4294      	cmp	r4, r2
   d6366:	d1f9      	bne.n	d635c <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d6368:	e7f1      	b.n	d634e <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d636a <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d636a:	7b42      	ldrb	r2, [r0, #13]
   d636c:	7b00      	ldrb	r0, [r0, #12]
}
   d636e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d6372:	4770      	bx	lr

000d6374 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d6374:	4770      	bx	lr

000d6376 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d6376:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6378:	6902      	ldr	r2, [r0, #16]
   d637a:	690b      	ldr	r3, [r1, #16]
   d637c:	429a      	cmp	r2, r3
   d637e:	d106      	bne.n	d638e <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6380:	2210      	movs	r2, #16
   d6382:	f001 fd95 	bl	d7eb0 <memcmp>
   d6386:	fab0 f080 	clz	r0, r0
   d638a:	0940      	lsrs	r0, r0, #5
}
   d638c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d638e:	2000      	movs	r0, #0
   d6390:	e7fc      	b.n	d638c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d6394 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d6394:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d6396:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d639a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d639c:	4b32      	ldr	r3, [pc, #200]	; (d6468 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d639e:	681a      	ldr	r2, [r3, #0]
   d63a0:	6002      	str	r2, [r0, #0]
   d63a2:	685a      	ldr	r2, [r3, #4]
   d63a4:	6042      	str	r2, [r0, #4]
   d63a6:	2500      	movs	r5, #0
   d63a8:	891a      	ldrh	r2, [r3, #8]
   d63aa:	7a9b      	ldrb	r3, [r3, #10]
   d63ac:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d63ae:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d63b0:	7283      	strb	r3, [r0, #10]
   d63b2:	f8c0 500b 	str.w	r5, [r0, #11]
   d63b6:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d63b8:	460e      	mov	r6, r1
   d63ba:	b321      	cbz	r1, d6406 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d63bc:	2124      	movs	r1, #36	; 0x24
   d63be:	4630      	mov	r0, r6
   d63c0:	f001 fdfd 	bl	d7fbe <strnlen>
   d63c4:	2804      	cmp	r0, #4
   d63c6:	d121      	bne.n	d640c <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d63c8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d63cc:	af01      	add	r7, sp, #4
   d63ce:	1cb5      	adds	r5, r6, #2
   d63d0:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d63d2:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d63d6:	f7ff ff00 	bl	d61da <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d63da:	f1b0 0800 	subs.w	r8, r0, #0
   d63de:	db10      	blt.n	d6402 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d63e0:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d63e4:	f7ff fef9 	bl	d61da <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d63e8:	2800      	cmp	r0, #0
   d63ea:	db0a      	blt.n	d6402 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d63ec:	3502      	adds	r5, #2
   d63ee:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d63f2:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d63f4:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d63f8:	d1eb      	bne.n	d63d2 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d63fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d63fe:	ba5b      	rev16	r3, r3
   d6400:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d6402:	2300      	movs	r3, #0
   d6404:	6123      	str	r3, [r4, #16]
}
   d6406:	b002      	add	sp, #8
   d6408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d640c:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d640e:	2124      	movs	r1, #36	; 0x24
   d6410:	4630      	mov	r0, r6
   d6412:	f001 fdd4 	bl	d7fbe <strnlen>
   d6416:	42a8      	cmp	r0, r5
   d6418:	d806      	bhi.n	d6428 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d641a:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d641c:	2300      	movs	r3, #0
    while (len > 0) {
   d641e:	42bc      	cmp	r4, r7
   d6420:	d0f1      	beq.n	d6406 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d6422:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d6426:	e7fa      	b.n	d641e <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6428:	2f00      	cmp	r7, #0
   d642a:	d0ec      	beq.n	d6406 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d642c:	5d70      	ldrb	r0, [r6, r5]
   d642e:	f7ff fed4 	bl	d61da <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d6432:	0603      	lsls	r3, r0, #24
   d6434:	d415      	bmi.n	d6462 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d6436:	0100      	lsls	r0, r0, #4
   d6438:	3f01      	subs	r7, #1
   d643a:	fa5f f880 	uxtb.w	r8, r0
   d643e:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d6442:	2124      	movs	r1, #36	; 0x24
   d6444:	4630      	mov	r0, r6
   d6446:	f001 fdba 	bl	d7fbe <strnlen>
   d644a:	3501      	adds	r5, #1
   d644c:	42a8      	cmp	r0, r5
   d644e:	d908      	bls.n	d6462 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d6450:	5d70      	ldrb	r0, [r6, r5]
   d6452:	f7ff fec2 	bl	d61da <_ZN8particle11hexToNibbleEc>
   d6456:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d6458:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d645a:	bfa4      	itt	ge
   d645c:	ea40 0008 	orrge.w	r0, r0, r8
   d6460:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6462:	3501      	adds	r5, #1
   d6464:	e7d3      	b.n	d640e <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d6466:	bf00      	nop
   d6468:	000d8d4c 	.word	0x000d8d4c

000d646c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d646c:	b513      	push	{r0, r1, r4, lr}
   d646e:	4604      	mov	r4, r0
   d6470:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d6472:	f7ff ff03 	bl	d627c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d6476:	4620      	mov	r0, r4
   d6478:	9901      	ldr	r1, [sp, #4]
   d647a:	f7ff ff8b 	bl	d6394 <_ZN8particle7BleUuid9constructEPKc>
}
   d647e:	4620      	mov	r0, r4
   d6480:	b002      	add	sp, #8
   d6482:	bd10      	pop	{r4, pc}

000d6484 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6484:	b430      	push	{r4, r5}
   d6486:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d648a:	b912      	cbnz	r2, d6492 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d648c:	6a00      	ldr	r0, [r0, #32]
}
   d648e:	bc30      	pop	{r4, r5}
   d6490:	4770      	bx	lr
   d6492:	9502      	str	r5, [sp, #8]
   d6494:	bc30      	pop	{r4, r5}
   d6496:	f7ff be12 	b.w	d60be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d649a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d649a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d649c:	4604      	mov	r4, r0
          selfLen_(0) {
   d649e:	4602      	mov	r2, r0
   d64a0:	f100 011f 	add.w	r1, r0, #31
   d64a4:	2300      	movs	r3, #0
   d64a6:	f802 3b01 	strb.w	r3, [r2], #1
   d64aa:	4291      	cmp	r1, r2
   d64ac:	d1fb      	bne.n	d64a6 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d64ae:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d64b0:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d64b2:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d64b4:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d64b6:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d64ba:	4619      	mov	r1, r3
   d64bc:	f10d 020f 	add.w	r2, sp, #15
   d64c0:	4620      	mov	r0, r4
   d64c2:	f7ff ffdf 	bl	d6484 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d64c6:	4620      	mov	r0, r4
   d64c8:	b004      	add	sp, #16
   d64ca:	bd10      	pop	{r4, pc}

000d64cc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d64cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d64ce:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d64d0:	460e      	mov	r6, r1
   d64d2:	ab01      	add	r3, sp, #4
   d64d4:	6a01      	ldr	r1, [r0, #32]
   d64d6:	4604      	mov	r4, r0
   d64d8:	f7ff fddc 	bl	d6094 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d64dc:	4605      	mov	r5, r0
   d64de:	b178      	cbz	r0, d6500 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d64e0:	9801      	ldr	r0, [sp, #4]
   d64e2:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d64e4:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d64e6:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d64e8:	4421      	add	r1, r4
   d64ea:	1b52      	subs	r2, r2, r5
   d64ec:	4420      	add	r0, r4
   d64ee:	f001 fced 	bl	d7ecc <memcpy>
        selfLen_ -= len;
   d64f2:	6a20      	ldr	r0, [r4, #32]
   d64f4:	1b40      	subs	r0, r0, r5
   d64f6:	6220      	str	r0, [r4, #32]
        remove(type);
   d64f8:	4631      	mov	r1, r6
   d64fa:	4620      	mov	r0, r4
   d64fc:	f7ff ffe6 	bl	d64cc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d6500:	b002      	add	sp, #8
   d6502:	bd70      	pop	{r4, r5, r6, pc}

000d6504 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d6504:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d6506:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d650a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d650c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d650e:	8043      	strh	r3, [r0, #2]
   d6510:	220e      	movs	r2, #14
   d6512:	4629      	mov	r1, r5
   d6514:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d6516:	7105      	strb	r5, [r0, #4]
   d6518:	3006      	adds	r0, #6
   d651a:	f001 fcff 	bl	d7f1c <memset>
   d651e:	f104 0014 	add.w	r0, r4, #20
   d6522:	f7ff feab 	bl	d627c <_ZN8particle7BleUuidC1Ev>
   d6526:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d652a:	f7ff fea7 	bl	d627c <_ZN8particle7BleUuidC1Ev>
   d652e:	4904      	ldr	r1, [pc, #16]	; (d6540 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d6530:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6534:	f7ff fcef 	bl	d5f16 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d6538:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d653a:	4620      	mov	r0, r4
   d653c:	bd38      	pop	{r3, r4, r5, pc}
   d653e:	bf00      	nop
   d6540:	000d800c 	.word	0x000d800c

000d6544 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d6544:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6546:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d654a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d654e:	4293      	cmp	r3, r2
   d6550:	4618      	mov	r0, r3
   d6552:	d006      	beq.n	d6562 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d6554:	6804      	ldr	r4, [r0, #0]
   d6556:	8824      	ldrh	r4, [r4, #0]
   d6558:	428c      	cmp	r4, r1
   d655a:	f103 0308 	add.w	r3, r3, #8
   d655e:	d1f6      	bne.n	d654e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d6560:	bd10      	pop	{r4, pc}
        return nullptr;
   d6562:	2000      	movs	r0, #0
   d6564:	e7fc      	b.n	d6560 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d6568 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d6568:	b5f0      	push	{r4, r5, r6, r7, lr}
   d656a:	4606      	mov	r6, r0
   d656c:	b085      	sub	sp, #20
   d656e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d6570:	460d      	mov	r5, r1
   d6572:	2900      	cmp	r1, #0
   d6574:	d050      	beq.n	d6618 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d6576:	2a00      	cmp	r2, #0
   d6578:	d04e      	beq.n	d6618 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d657a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d657c:	7823      	ldrb	r3, [r4, #0]
   d657e:	2af4      	cmp	r2, #244	; 0xf4
   d6580:	bf28      	it	cs
   d6582:	22f4      	movcs	r2, #244	; 0xf4
   d6584:	b343      	cbz	r3, d65d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d6586:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d6588:	0798      	lsls	r0, r3, #30
   d658a:	d509      	bpl.n	d65a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d658c:	89a0      	ldrh	r0, [r4, #12]
   d658e:	9203      	str	r2, [sp, #12]
   d6590:	2300      	movs	r3, #0
   d6592:	f7ff f8d7 	bl	d5744 <hal_ble_gatt_server_set_characteristic_value>
   d6596:	2800      	cmp	r0, #0
   d6598:	9a03      	ldr	r2, [sp, #12]
   d659a:	da03      	bge.n	d65a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d659c:	b005      	add	sp, #20
   d659e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d65a0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d65a4:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d65a6:	7923      	ldrb	r3, [r4, #4]
   d65a8:	06d9      	lsls	r1, r3, #27
   d65aa:	d509      	bpl.n	d65c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d65ac:	2f01      	cmp	r7, #1
   d65ae:	d007      	beq.n	d65c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d65b0:	89a0      	ldrh	r0, [r4, #12]
   d65b2:	2300      	movs	r3, #0
   d65b4:	4629      	mov	r1, r5
}
   d65b6:	b005      	add	sp, #20
   d65b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d65bc:	f7ff b8fe 	b.w	d57bc <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d65c0:	069b      	lsls	r3, r3, #26
   d65c2:	d5eb      	bpl.n	d659c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d65c4:	2f02      	cmp	r7, #2
   d65c6:	d0e9      	beq.n	d659c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d65c8:	89a0      	ldrh	r0, [r4, #12]
   d65ca:	2300      	movs	r3, #0
   d65cc:	4629      	mov	r1, r5
}
   d65ce:	b005      	add	sp, #20
   d65d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d65d4:	f7ff b8fc 	b.w	d57d0 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d65d8:	8860      	ldrh	r0, [r4, #2]
   d65da:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d65de:	4288      	cmp	r0, r1
   d65e0:	d01c      	beq.n	d661c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d65e2:	7921      	ldrb	r1, [r4, #4]
   d65e4:	074e      	lsls	r6, r1, #29
   d65e6:	d501      	bpl.n	d65ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d65e8:	2f01      	cmp	r7, #1
   d65ea:	d104      	bne.n	d65f6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d65ec:	070b      	lsls	r3, r1, #28
   d65ee:	d409      	bmi.n	d6604 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d65f0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d65f4:	e7d2      	b.n	d659c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d65f6:	89a1      	ldrh	r1, [r4, #12]
   d65f8:	9300      	str	r3, [sp, #0]
   d65fa:	4613      	mov	r3, r2
   d65fc:	462a      	mov	r2, r5
   d65fe:	f7ff f8b5 	bl	d576c <hal_ble_gatt_client_write_without_response>
   d6602:	e7cb      	b.n	d659c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6604:	2f02      	cmp	r7, #2
   d6606:	d0f3      	beq.n	d65f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6608:	2300      	movs	r3, #0
   d660a:	89a1      	ldrh	r1, [r4, #12]
   d660c:	9300      	str	r3, [sp, #0]
   d660e:	4613      	mov	r3, r2
   d6610:	462a      	mov	r2, r5
   d6612:	f7ff f8a1 	bl	d5758 <hal_ble_gatt_client_write_with_response>
   d6616:	e7c1      	b.n	d659c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d6618:	4802      	ldr	r0, [pc, #8]	; (d6624 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d661a:	e7bf      	b.n	d659c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d661c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d6620:	e7bc      	b.n	d659c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d6622:	bf00      	nop
   d6624:	fffffef2 	.word	0xfffffef2

000d6628 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d662c:	2600      	movs	r6, #0
   d662e:	6006      	str	r6, [r0, #0]
   d6630:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6632:	2028      	movs	r0, #40	; 0x28
   d6634:	460c      	mov	r4, r1
   d6636:	f7fd fd2c 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d663a:	1e05      	subs	r5, r0, #0
   d663c:	f105 080c 	add.w	r8, r5, #12
   d6640:	d00f      	beq.n	d6662 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d6642:	2301      	movs	r3, #1
   d6644:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6648:	4b08      	ldr	r3, [pc, #32]	; (d666c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d664a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d664c:	4640      	mov	r0, r8
   d664e:	f7ff fe15 	bl	d627c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d6652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d6654:	622e      	str	r6, [r5, #32]
   d6656:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d665a:	4646      	mov	r6, r8
   d665c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d665e:	6823      	ldr	r3, [r4, #0]
   d6660:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d6662:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6666:	4638      	mov	r0, r7
   d6668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d666c:	000d8d14 	.word	0x000d8d14

000d6670 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6670:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6672:	2500      	movs	r5, #0
   d6674:	6005      	str	r5, [r0, #0]
   d6676:	4606      	mov	r6, r0
   d6678:	2030      	movs	r0, #48	; 0x30
   d667a:	f7fd fd0a 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d667e:	4604      	mov	r4, r0
   d6680:	b188      	cbz	r0, d66a6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d6682:	2301      	movs	r3, #1
   d6684:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d6688:	4b09      	ldr	r3, [pc, #36]	; (d66b0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d668a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d668c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6690:	8183      	strh	r3, [r0, #12]
   d6692:	300e      	adds	r0, #14
   d6694:	f7ff fde7 	bl	d6266 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d6698:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d669c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d66a0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d66a4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d66a6:	6074      	str	r4, [r6, #4]
   d66a8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d66aa:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d66ac:	4630      	mov	r0, r6
   d66ae:	bd70      	pop	{r4, r5, r6, pc}
   d66b0:	000d8d30 	.word	0x000d8d30

000d66b4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d66b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d66b6:	460d      	mov	r5, r1
   d66b8:	4604      	mov	r4, r0
    WiringBleLock lk;
   d66ba:	a801      	add	r0, sp, #4
   d66bc:	f7ff fda2 	bl	d6204 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d66c0:	682a      	ldr	r2, [r5, #0]
   d66c2:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d66c6:	6023      	str	r3, [r4, #0]
   d66c8:	6853      	ldr	r3, [r2, #4]
   d66ca:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d66cc:	a801      	add	r0, sp, #4
   d66ce:	f7ff fda1 	bl	d6214 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d66d2:	4620      	mov	r0, r4
   d66d4:	b003      	add	sp, #12
   d66d6:	bd30      	pop	{r4, r5, pc}

000d66d8 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d66d8:	b530      	push	{r4, r5, lr}
   d66da:	4605      	mov	r5, r0
   d66dc:	b087      	sub	sp, #28
   d66de:	460c      	mov	r4, r1
    WiringBleLock lk;
   d66e0:	a801      	add	r0, sp, #4
   d66e2:	f7ff fd8f 	bl	d6204 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d66e6:	682a      	ldr	r2, [r5, #0]
   d66e8:	6823      	ldr	r3, [r4, #0]
   d66ea:	8812      	ldrh	r2, [r2, #0]
   d66ec:	881b      	ldrh	r3, [r3, #0]
   d66ee:	429a      	cmp	r2, r3
   d66f0:	d10d      	bne.n	d670e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d66f2:	4629      	mov	r1, r5
   d66f4:	a802      	add	r0, sp, #8
   d66f6:	f7ff ffdd 	bl	d66b4 <_ZNK8particle13BlePeerDevice7addressEv>
   d66fa:	4621      	mov	r1, r4
   d66fc:	a804      	add	r0, sp, #16
   d66fe:	f7ff ffd9 	bl	d66b4 <_ZNK8particle13BlePeerDevice7addressEv>
   d6702:	a904      	add	r1, sp, #16
   d6704:	a802      	add	r0, sp, #8
   d6706:	f7ff fd9a 	bl	d623e <_ZNK8particle10BleAddresseqERKS0_>
   d670a:	4604      	mov	r4, r0
   d670c:	b900      	cbnz	r0, d6710 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d670e:	2400      	movs	r4, #0
    WiringBleLock lk;
   d6710:	a801      	add	r0, sp, #4
   d6712:	f7ff fd7f 	bl	d6214 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6716:	4620      	mov	r0, r4
   d6718:	b007      	add	sp, #28
   d671a:	bd30      	pop	{r4, r5, pc}

000d671c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d671c:	b510      	push	{r4, lr}
   d671e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6720:	2054      	movs	r0, #84	; 0x54
   d6722:	f7fd fcb6 	bl	d4092 <_Znwj>
   d6726:	4601      	mov	r1, r0
   d6728:	b160      	cbz	r0, d6744 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d672a:	2300      	movs	r3, #0
   d672c:	e9c0 3300 	strd	r3, r3, [r0]
   d6730:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6734:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d6738:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d673c:	6203      	str	r3, [r0, #32]
   d673e:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6740:	63c3      	str	r3, [r0, #60]	; 0x3c
   d6742:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6744:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d6746:	b919      	cbnz	r1, d6750 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d6748:	4a09      	ldr	r2, [pc, #36]	; (d6770 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d674a:	200a      	movs	r0, #10
   d674c:	f7ff f9ba 	bl	d5ac4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6750:	2000      	movs	r0, #0
   d6752:	f7fe ffc3 	bl	d56dc <hal_ble_stack_init>
   d6756:	b120      	cbz	r0, d6762 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d6758:	4a05      	ldr	r2, [pc, #20]	; (d6770 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d675a:	2100      	movs	r1, #0
   d675c:	200a      	movs	r0, #10
   d675e:	f7ff f9b1 	bl	d5ac4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6762:	6821      	ldr	r1, [r4, #0]
   d6764:	4803      	ldr	r0, [pc, #12]	; (d6774 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6766:	2200      	movs	r2, #0
   d6768:	f7ff f81e 	bl	d57a8 <hal_ble_set_callback_on_periph_link_events>
}
   d676c:	4620      	mov	r0, r4
   d676e:	bd10      	pop	{r4, pc}
   d6770:	000d56bd 	.word	0x000d56bd
   d6774:	000d6b85 	.word	0x000d6b85

000d6778 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6778:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d677a:	4c0b      	ldr	r4, [pc, #44]	; (d67a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d677c:	7823      	ldrb	r3, [r4, #0]
   d677e:	f3bf 8f5b 	dmb	ish
   d6782:	07db      	lsls	r3, r3, #31
   d6784:	d40e      	bmi.n	d67a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6786:	4620      	mov	r0, r4
   d6788:	f7fd fc94 	bl	d40b4 <__cxa_guard_acquire>
   d678c:	b150      	cbz	r0, d67a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d678e:	4807      	ldr	r0, [pc, #28]	; (d67ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6790:	f7ff ffc4 	bl	d671c <_ZN8particle14BleLocalDeviceC1Ev>
   d6794:	4620      	mov	r0, r4
   d6796:	f7fd fc92 	bl	d40be <__cxa_guard_release>
   d679a:	4a05      	ldr	r2, [pc, #20]	; (d67b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d679c:	4905      	ldr	r1, [pc, #20]	; (d67b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d679e:	4803      	ldr	r0, [pc, #12]	; (d67ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d67a0:	f001 fa5a 	bl	d7c58 <__aeabi_atexit>
    return instance;
}
   d67a4:	4801      	ldr	r0, [pc, #4]	; (d67ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d67a6:	bd10      	pop	{r4, pc}
   d67a8:	2003e65c 	.word	0x2003e65c
   d67ac:	2003e668 	.word	0x2003e668
   d67b0:	2003e56c 	.word	0x2003e56c
   d67b4:	000d698d 	.word	0x000d698d

000d67b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d67b8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d67ba:	6803      	ldr	r3, [r0, #0]
   d67bc:	3b09      	subs	r3, #9
   d67be:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d67c0:	b08d      	sub	sp, #52	; 0x34
   d67c2:	4604      	mov	r4, r0
   d67c4:	460d      	mov	r5, r1
    switch (event->type) {
   d67c6:	d811      	bhi.n	d67ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d67c8:	f7ff ffd6 	bl	d6778 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d67cc:	88a1      	ldrh	r1, [r4, #4]
   d67ce:	6800      	ldr	r0, [r0, #0]
   d67d0:	f7ff feb8 	bl	d6544 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d67d4:	4603      	mov	r3, r0
   d67d6:	b958      	cbnz	r0, d67f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d67d8:	2220      	movs	r2, #32
   d67da:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d67de:	4a0b      	ldr	r2, [pc, #44]	; (d680c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d67e0:	9200      	str	r2, [sp, #0]
   d67e2:	490b      	ldr	r1, [pc, #44]	; (d6810 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d67e4:	aa04      	add	r2, sp, #16
   d67e6:	2032      	movs	r0, #50	; 0x32
   d67e8:	f7ff f974 	bl	d5ad4 <log_message>
}
   d67ec:	b00d      	add	sp, #52	; 0x34
   d67ee:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d67f0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d67f2:	2a00      	cmp	r2, #0
   d67f4:	d0fa      	beq.n	d67ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d67f6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d67fa:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d67fe:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d6802:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d6804:	aa04      	add	r2, sp, #16
   d6806:	a903      	add	r1, sp, #12
   d6808:	47a0      	blx	r4
}
   d680a:	e7ef      	b.n	d67ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d680c:	000d8c23 	.word	0x000d8c23
   d6810:	000d8bfc 	.word	0x000d8bfc

000d6814 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6814:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d6816:	2000      	movs	r0, #0
   d6818:	f7fe ff60 	bl	d56dc <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d681c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d6820:	bd08      	pop	{r3, pc}

000d6822 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d6822:	4608      	mov	r0, r1
   d6824:	b911      	cbnz	r1, d682c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d6826:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d6828:	f7fe bf60 	b.w	d56ec <hal_ble_gap_set_advertising_data>
   d682c:	6a09      	ldr	r1, [r1, #32]
   d682e:	2200      	movs	r2, #0
   d6830:	e7fa      	b.n	d6828 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d6832 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d6832:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d6834:	4608      	mov	r0, r1
   d6836:	b929      	cbnz	r1, d6844 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d6838:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d683a:	b003      	add	sp, #12
   d683c:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6840:	f7fe bf5c 	b.w	d56fc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6844:	2101      	movs	r1, #1
   d6846:	9001      	str	r0, [sp, #4]
   d6848:	f7ff fe40 	bl	d64cc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d684c:	9801      	ldr	r0, [sp, #4]
   d684e:	2200      	movs	r2, #0
   d6850:	6a01      	ldr	r1, [r0, #32]
   d6852:	e7f2      	b.n	d683a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d6854 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6854:	b538      	push	{r3, r4, r5, lr}
   d6856:	4604      	mov	r4, r0
   d6858:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d685a:	f7ff ffe2 	bl	d6822 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d685e:	2800      	cmp	r0, #0
   d6860:	db0a      	blt.n	d6878 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d6862:	4629      	mov	r1, r5
   d6864:	4620      	mov	r0, r4
   d6866:	f7ff ffe4 	bl	d6832 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d686a:	2800      	cmp	r0, #0
   d686c:	db04      	blt.n	d6878 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d686e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d6872:	2000      	movs	r0, #0
   d6874:	f7fe bf4a 	b.w	d570c <hal_ble_gap_start_advertising>
}
   d6878:	bd38      	pop	{r3, r4, r5, pc}

000d687a <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d687a:	6803      	ldr	r3, [r0, #0]
   d687c:	69d8      	ldr	r0, [r3, #28]
}
   d687e:	2800      	cmp	r0, #0
   d6880:	bfd4      	ite	le
   d6882:	2000      	movle	r0, #0
   d6884:	2001      	movgt	r0, #1
   d6886:	4770      	bx	lr

000d6888 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6888:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d688a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d688c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d688e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6890:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d6892:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6894:	f7fd fbfd 	bl	d4092 <_Znwj>
   d6898:	b118      	cbz	r0, d68a2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d689a:	682b      	ldr	r3, [r5, #0]
   d689c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d689e:	686b      	ldr	r3, [r5, #4]
   d68a0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d68a2:	4b03      	ldr	r3, [pc, #12]	; (d68b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d68a4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d68a6:	4b03      	ldr	r3, [pc, #12]	; (d68b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d68a8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d68aa:	60a3      	str	r3, [r4, #8]
      }
   d68ac:	4620      	mov	r0, r4
   d68ae:	bd38      	pop	{r3, r4, r5, pc}
   d68b0:	000d619b 	.word	0x000d619b
   d68b4:	000d615d 	.word	0x000d615d

000d68b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d68b8:	680b      	ldr	r3, [r1, #0]
   d68ba:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d68bc:	b113      	cbz	r3, d68c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d68be:	685a      	ldr	r2, [r3, #4]
   d68c0:	3201      	adds	r2, #1
   d68c2:	605a      	str	r2, [r3, #4]
      }
   d68c4:	4770      	bx	lr

000d68c6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d68c6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d68c8:	f851 3b04 	ldr.w	r3, [r1], #4
   d68cc:	4604      	mov	r4, r0
   d68ce:	f840 3b04 	str.w	r3, [r0], #4
   d68d2:	f7ff fff1 	bl	d68b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d68d6:	6823      	ldr	r3, [r4, #0]
   d68d8:	b90b      	cbnz	r3, d68de <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d68da:	f7ff fc37 	bl	d614c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d68de:	4620      	mov	r0, r4
   d68e0:	bd10      	pop	{r4, pc}

000d68e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d68e2:	b510      	push	{r4, lr}
   d68e4:	f851 3b04 	ldr.w	r3, [r1], #4
   d68e8:	4604      	mov	r4, r0
   d68ea:	f840 3b04 	str.w	r3, [r0], #4
   d68ee:	f7ff ffe3 	bl	d68b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d68f2:	4620      	mov	r0, r4
   d68f4:	bd10      	pop	{r4, pc}

000d68f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d68f6:	b510      	push	{r4, lr}
   d68f8:	f851 3b04 	ldr.w	r3, [r1], #4
   d68fc:	4604      	mov	r4, r0
   d68fe:	f840 3b04 	str.w	r3, [r0], #4
   d6902:	f7ff ffd9 	bl	d68b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6906:	4620      	mov	r0, r4
   d6908:	bd10      	pop	{r4, pc}

000d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d690a:	b510      	push	{r4, lr}
   d690c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d690e:	6800      	ldr	r0, [r0, #0]
   d6910:	b128      	cbz	r0, d691e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6912:	6843      	ldr	r3, [r0, #4]
   d6914:	3b01      	subs	r3, #1
   d6916:	6043      	str	r3, [r0, #4]
   d6918:	b90b      	cbnz	r3, d691e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d691a:	f7ff fb8a 	bl	d6032 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d691e:	4620      	mov	r0, r4
   d6920:	bd10      	pop	{r4, pc}

000d6922 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d6922:	b510      	push	{r4, lr}
   d6924:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d6926:	3004      	adds	r0, #4
   d6928:	f7ff ffef 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d692c:	4620      	mov	r0, r4
   d692e:	bd10      	pop	{r4, pc}

000d6930 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6930:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6932:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6936:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6938:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d693c:	42ae      	cmp	r6, r5
   d693e:	d004      	beq.n	d694a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6940:	1d28      	adds	r0, r5, #4
   d6942:	f7ff ffe2 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6946:	3508      	adds	r5, #8
   d6948:	e7f8      	b.n	d693c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d694a:	6820      	ldr	r0, [r4, #0]
   d694c:	f7ff f966 	bl	d5c1c <free>
}
   d6950:	4620      	mov	r0, r4
   d6952:	bd70      	pop	{r4, r5, r6, pc}

000d6954 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6954:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6956:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d695a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d695c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6960:	42ae      	cmp	r6, r5
   d6962:	d004      	beq.n	d696e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6964:	1d28      	adds	r0, r5, #4
   d6966:	f7ff ffd0 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d696a:	3508      	adds	r5, #8
   d696c:	e7f8      	b.n	d6960 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d696e:	6820      	ldr	r0, [r4, #0]
   d6970:	f7ff f954 	bl	d5c1c <free>
}
   d6974:	4620      	mov	r0, r4
   d6976:	bd70      	pop	{r4, r5, r6, pc}

000d6978 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6978:	b510      	push	{r4, lr}
   d697a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d697c:	3024      	adds	r0, #36	; 0x24
   d697e:	f7ff ffe9 	bl	d6954 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6982:	f104 0018 	add.w	r0, r4, #24
   d6986:	f7ff ffd3 	bl	d6930 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d698a:	bd10      	pop	{r4, pc}

000d698c <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d698e:	6804      	ldr	r4, [r0, #0]
   d6990:	4606      	mov	r6, r0
   d6992:	b324      	cbz	r4, d69de <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d6994:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6998:	f7ff fc0b 	bl	d61b2 <_ZNSt14_Function_baseD1Ev>
   d699c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d69a0:	f7ff fc07 	bl	d61b2 <_ZNSt14_Function_baseD1Ev>
   d69a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d69a8:	f7ff fc03 	bl	d61b2 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d69ac:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d69b0:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d69b4:	42af      	cmp	r7, r5
   d69b6:	d004      	beq.n	d69c2 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d69b8:	1d28      	adds	r0, r5, #4
   d69ba:	f7ff ffa6 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69be:	3508      	adds	r5, #8
   d69c0:	e7f8      	b.n	d69b4 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d69c2:	69a0      	ldr	r0, [r4, #24]
   d69c4:	f7ff f92a 	bl	d5c1c <free>
    ~BleLocalDeviceImpl() = default;
   d69c8:	f104 000c 	add.w	r0, r4, #12
   d69cc:	f7ff ffc2 	bl	d6954 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d69d0:	4620      	mov	r0, r4
   d69d2:	f7ff ffad 	bl	d6930 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d69d6:	2154      	movs	r1, #84	; 0x54
   d69d8:	4620      	mov	r0, r4
   d69da:	f001 f942 	bl	d7c62 <_ZdlPvj>
   d69de:	4630      	mov	r0, r6
   d69e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69e2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d69e2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d69e4:	b510      	push	{r4, lr}
      if (_M_empty())
   d69e6:	b90a      	cbnz	r2, d69ec <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d69e8:	f001 f93f 	bl	d7c6a <_ZSt25__throw_bad_function_callv>
    }
   d69ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69f0:	68c3      	ldr	r3, [r0, #12]
   d69f2:	4718      	bx	r3

000d69f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d69f4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d69f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69f8:	4604      	mov	r4, r0
   d69fa:	460d      	mov	r5, r1
   d69fc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d69fe:	d914      	bls.n	d6a2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6a00:	4290      	cmp	r0, r2
   d6a02:	d213      	bcs.n	d6a2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6a04:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6a08:	1a75      	subs	r5, r6, r1
   d6a0a:	f1a1 0708 	sub.w	r7, r1, #8
   d6a0e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6a10:	42b7      	cmp	r7, r6
   d6a12:	d018      	beq.n	d6a46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6a14:	b11c      	cbz	r4, d6a1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6a16:	4631      	mov	r1, r6
   d6a18:	4620      	mov	r0, r4
   d6a1a:	f7ff ff6c 	bl	d68f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6a1e:	1d30      	adds	r0, r6, #4
   d6a20:	f7ff ff73 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6a24:	3e08      	subs	r6, #8
   d6a26:	3c08      	subs	r4, #8
   d6a28:	e7f2      	b.n	d6a10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6a2a:	d00c      	beq.n	d6a46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6a2c:	42b5      	cmp	r5, r6
   d6a2e:	d00a      	beq.n	d6a46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6a30:	b11c      	cbz	r4, d6a3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6a32:	4629      	mov	r1, r5
   d6a34:	4620      	mov	r0, r4
   d6a36:	f7ff ff5e 	bl	d68f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6a3a:	1d28      	adds	r0, r5, #4
   d6a3c:	f7ff ff65 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6a40:	3508      	adds	r5, #8
   d6a42:	3408      	adds	r4, #8
   d6a44:	e7f2      	b.n	d6a2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6a4c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6a50:	4605      	mov	r5, r0
   d6a52:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6a54:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d6a58:	42a7      	cmp	r7, r4
   d6a5a:	d103      	bne.n	d6a64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d6a5c:	2600      	movs	r6, #0
}
   d6a5e:	4630      	mov	r0, r6
   d6a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d6a64:	4641      	mov	r1, r8
   d6a66:	4620      	mov	r0, r4
   d6a68:	f7ff fe36 	bl	d66d8 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6a6c:	4606      	mov	r6, r0
   d6a6e:	b908      	cbnz	r0, d6a74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d6a70:	3408      	adds	r4, #8
   d6a72:	e7f1      	b.n	d6a58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d6a74:	2c00      	cmp	r4, #0
   d6a76:	d0f1      	beq.n	d6a5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d6a78:	1d20      	adds	r0, r4, #4
   d6a7a:	f7ff ff46 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d6a7e:	e9d5 3200 	ldrd	r3, r2, [r5]
   d6a82:	f104 0108 	add.w	r1, r4, #8
   d6a86:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6a8a:	4620      	mov	r0, r4
   d6a8c:	f7ff ffb2 	bl	d69f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6a90:	686b      	ldr	r3, [r5, #4]
   d6a92:	3b01      	subs	r3, #1
   d6a94:	606b      	str	r3, [r5, #4]
    return true;
   d6a96:	e7e2      	b.n	d6a5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d6a98 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   d6a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a9a:	4607      	mov	r7, r0
   d6a9c:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d6a9e:	4668      	mov	r0, sp
   d6aa0:	f7ff fbb0 	bl	d6204 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6aa4:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   d6aa6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   d6aaa:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   d6aae:	42ac      	cmp	r4, r5
   d6ab0:	d02b      	beq.n	d6b0a <_ZNK8particle14BleLocalDevice10disconnectEv+0x72>
        hal_ble_conn_info_t connInfo = {};
   d6ab2:	2224      	movs	r2, #36	; 0x24
   d6ab4:	2100      	movs	r1, #0
   d6ab6:	a801      	add	r0, sp, #4
   d6ab8:	f001 fa30 	bl	d7f1c <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   d6abc:	6823      	ldr	r3, [r4, #0]
   d6abe:	2200      	movs	r2, #0
   d6ac0:	8818      	ldrh	r0, [r3, #0]
   d6ac2:	a901      	add	r1, sp, #4
   d6ac4:	f7fe fe5c 	bl	d5780 <hal_ble_gap_get_connection_info>
   d6ac8:	4606      	mov	r6, r0
   d6aca:	b108      	cbz	r0, d6ad0 <_ZNK8particle14BleLocalDevice10disconnectEv+0x38>
    for (auto& p : impl()->peers()) {
   d6acc:	3408      	adds	r4, #8
   d6ace:	e7ee      	b.n	d6aae <_ZNK8particle14BleLocalDevice10disconnectEv+0x16>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d6ad0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6ad4:	2b01      	cmp	r3, #1
   d6ad6:	d1f9      	bne.n	d6acc <_ZNK8particle14BleLocalDevice10disconnectEv+0x34>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
   d6ad8:	4668      	mov	r0, sp
   d6ada:	f7ff facf 	bl	d607c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d6ade:	6823      	ldr	r3, [r4, #0]
   d6ae0:	4631      	mov	r1, r6
   d6ae2:	8818      	ldrh	r0, [r3, #0]
   d6ae4:	f7fe fe1a 	bl	d571c <hal_ble_gap_disconnect>
   d6ae8:	1e05      	subs	r5, r0, #0
   d6aea:	db08      	blt.n	d6afe <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>
            lk.lock();
   d6aec:	4668      	mov	r0, sp
   d6aee:	f7ff fab9 	bl	d6064 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
        return peers_;
   d6af2:	6838      	ldr	r0, [r7, #0]
            impl()->peers().removeOne(p);
   d6af4:	4621      	mov	r1, r4
   d6af6:	3018      	adds	r0, #24
   d6af8:	f7ff ffa6 	bl	d6a48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d6afc:	4635      	mov	r5, r6
    WiringBleLock lk;
   d6afe:	4668      	mov	r0, sp
   d6b00:	f7ff fb88 	bl	d6214 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d6b04:	4628      	mov	r0, r5
   d6b06:	b00b      	add	sp, #44	; 0x2c
   d6b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   d6b0a:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   d6b0e:	e7f6      	b.n	d6afe <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>

000d6b10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6b12:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6b14:	6846      	ldr	r6, [r0, #4]
   d6b16:	4668      	mov	r0, sp
   d6b18:	f7ff feed 	bl	d68f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6b1c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d6b20:	429f      	cmp	r7, r3
   d6b22:	db12      	blt.n	d6b4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d6b24:	3701      	adds	r7, #1
        if (n > 0) {
   d6b26:	2f00      	cmp	r7, #0
   d6b28:	dd29      	ble.n	d6b7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d6b2a:	00f8      	lsls	r0, r7, #3
   d6b2c:	f7ff f86e 	bl	d5c0c <malloc>
            if (!d) {
   d6b30:	4605      	mov	r5, r0
   d6b32:	b1f0      	cbz	r0, d6b72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d6b34:	e9d4 1200 	ldrd	r1, r2, [r4]
   d6b38:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6b3c:	f7ff ff5a 	bl	d69f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6b40:	6820      	ldr	r0, [r4, #0]
   d6b42:	f7ff f86b 	bl	d5c1c <free>
        data_ = d;
   d6b46:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6b48:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d6b4a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6b4c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6b4e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6b52:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6b56:	4631      	mov	r1, r6
   d6b58:	f106 0008 	add.w	r0, r6, #8
   d6b5c:	f7ff ff4a 	bl	d69f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6b60:	b11e      	cbz	r6, d6b6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d6b62:	4669      	mov	r1, sp
   d6b64:	4630      	mov	r0, r6
   d6b66:	f7ff fec6 	bl	d68f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6b6a:	6863      	ldr	r3, [r4, #4]
   d6b6c:	3301      	adds	r3, #1
   d6b6e:	6063      	str	r3, [r4, #4]
    return true;
   d6b70:	2501      	movs	r5, #1
   d6b72:	a801      	add	r0, sp, #4
   d6b74:	f7ff fec9 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6b78:	4628      	mov	r0, r5
   d6b7a:	b003      	add	sp, #12
   d6b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d6b7e:	2500      	movs	r5, #0
   d6b80:	e7de      	b.n	d6b40 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d6b84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b88:	4605      	mov	r5, r0
   d6b8a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d6b8c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6b8e:	460c      	mov	r4, r1
        WiringBleLock lk;
   d6b90:	f7ff fb38 	bl	d6204 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6b94:	682e      	ldr	r6, [r5, #0]
   d6b96:	2e04      	cmp	r6, #4
   d6b98:	d06b      	beq.n	d6c72 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d6b9a:	d807      	bhi.n	d6bac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d6b9c:	2e03      	cmp	r6, #3
   d6b9e:	d028      	beq.n	d6bf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d6ba0:	a803      	add	r0, sp, #12
   d6ba2:	f7ff fb37 	bl	d6214 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d6ba6:	b00e      	add	sp, #56	; 0x38
   d6ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d6bac:	f1a6 030c 	sub.w	r3, r6, #12
   d6bb0:	2b03      	cmp	r3, #3
   d6bb2:	d8f5      	bhi.n	d6ba0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6bb4:	89a9      	ldrh	r1, [r5, #12]
   d6bb6:	4620      	mov	r0, r4
   d6bb8:	f7ff fcc4 	bl	d6544 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6bbc:	4607      	mov	r7, r0
   d6bbe:	2800      	cmp	r0, #0
   d6bc0:	d0ee      	beq.n	d6ba0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d6bc2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d6bc4:	2b00      	cmp	r3, #0
   d6bc6:	d0eb      	beq.n	d6ba0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d6bc8:	2210      	movs	r2, #16
   d6bca:	2100      	movs	r1, #0
   d6bcc:	a807      	add	r0, sp, #28
   d6bce:	f001 f9a5 	bl	d7f1c <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6bd2:	2e0d      	cmp	r6, #13
                        };
   d6bd4:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d6bd6:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6bda:	f040 8092 	bne.w	d6d02 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d6bde:	686b      	ldr	r3, [r5, #4]
   d6be0:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d6be2:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6be4:	9308      	str	r3, [sp, #32]
   d6be6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6be8:	a906      	add	r1, sp, #24
   d6bea:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6bee:	4798      	blx	r3
   d6bf0:	e7d6      	b.n	d6ba0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d6bf2:	a804      	add	r0, sp, #16
   d6bf4:	f7ff fd3c 	bl	d6670 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6bf8:	9b04      	ldr	r3, [sp, #16]
   d6bfa:	89aa      	ldrh	r2, [r5, #12]
   d6bfc:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d6bfe:	6869      	ldr	r1, [r5, #4]
   d6c00:	9804      	ldr	r0, [sp, #16]
   d6c02:	3108      	adds	r1, #8
   d6c04:	3002      	adds	r0, #2
   d6c06:	f7ff fb0d 	bl	d6224 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d6c0a:	a904      	add	r1, sp, #16
   d6c0c:	a806      	add	r0, sp, #24
   d6c0e:	f7ff fe72 	bl	d68f6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d6c12:	a906      	add	r1, sp, #24
   d6c14:	f104 0018 	add.w	r0, r4, #24
   d6c18:	f7ff ff7a 	bl	d6b10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6c1c:	4605      	mov	r5, r0
   d6c1e:	a807      	add	r0, sp, #28
   d6c20:	f7ff fe73 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c24:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6c26:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d6c28:	b98d      	cbnz	r5, d6c4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6c2a:	4b3e      	ldr	r3, [pc, #248]	; (d6d24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d6c2c:	493e      	ldr	r1, [pc, #248]	; (d6d28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6c2e:	9300      	str	r3, [sp, #0]
   d6c30:	2032      	movs	r0, #50	; 0x32
   d6c32:	462b      	mov	r3, r5
   d6c34:	aa06      	add	r2, sp, #24
   d6c36:	9507      	str	r5, [sp, #28]
   d6c38:	f7fe ff4c 	bl	d5ad4 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6c3c:	9b04      	ldr	r3, [sp, #16]
   d6c3e:	4629      	mov	r1, r5
   d6c40:	8818      	ldrh	r0, [r3, #0]
   d6c42:	f7fe fd6b 	bl	d571c <hal_ble_gap_disconnect>
   d6c46:	a805      	add	r0, sp, #20
   d6c48:	f7ff fe5f 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c4c:	e7a8      	b.n	d6ba0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d6c4e:	4a37      	ldr	r2, [pc, #220]	; (d6d2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d6c50:	9200      	str	r2, [sp, #0]
   d6c52:	2300      	movs	r3, #0
   d6c54:	4934      	ldr	r1, [pc, #208]	; (d6d28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6c56:	9307      	str	r3, [sp, #28]
   d6c58:	aa06      	add	r2, sp, #24
   d6c5a:	2001      	movs	r0, #1
   d6c5c:	f7fe ff3a 	bl	d5ad4 <log_message>
                if (impl->connectedCallback_) {
   d6c60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6c62:	2b00      	cmp	r3, #0
   d6c64:	d0ef      	beq.n	d6c46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d6c66:	a904      	add	r1, sp, #16
   d6c68:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6c6c:	f7ff feb9 	bl	d69e2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d6c70:	e7e9      	b.n	d6c46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6c72:	89a9      	ldrh	r1, [r5, #12]
   d6c74:	4620      	mov	r0, r4
   d6c76:	f7ff fc65 	bl	d6544 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6c7a:	4606      	mov	r6, r0
   d6c7c:	2800      	cmp	r0, #0
   d6c7e:	d08f      	beq.n	d6ba0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d6c80:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d6c82:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6c8a:	802a      	strh	r2, [r5, #0]
   d6c8c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d6c90:	4299      	cmp	r1, r3
   d6c92:	d003      	beq.n	d6c9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d6c94:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6c98:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d6c9a:	e7f9      	b.n	d6c90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d6c9c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d6ca0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6ca4:	45b8      	cmp	r8, r7
   d6ca6:	d004      	beq.n	d6cb2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d6ca8:	1d38      	adds	r0, r7, #4
   d6caa:	f7ff fe2e 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cae:	3708      	adds	r7, #8
   d6cb0:	e7f8      	b.n	d6ca4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d6cb2:	2300      	movs	r3, #0
   d6cb4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d6cb6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d6cba:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6cbe:	45b8      	cmp	r8, r7
   d6cc0:	d004      	beq.n	d6ccc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d6cc2:	1d38      	adds	r0, r7, #4
   d6cc4:	f7ff fe21 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cc8:	3708      	adds	r7, #8
   d6cca:	e7f8      	b.n	d6cbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d6ccc:	2300      	movs	r3, #0
   d6cce:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d6cd0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d6cd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6cd4:	b123      	cbz	r3, d6ce0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d6cd6:	4631      	mov	r1, r6
   d6cd8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6cdc:	f7ff fe81 	bl	d69e2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d6ce0:	2300      	movs	r3, #0
   d6ce2:	2220      	movs	r2, #32
   d6ce4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6ce8:	4a11      	ldr	r2, [pc, #68]	; (d6d30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d6cea:	9200      	str	r2, [sp, #0]
   d6cec:	490e      	ldr	r1, [pc, #56]	; (d6d28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6cee:	aa06      	add	r2, sp, #24
   d6cf0:	2001      	movs	r0, #1
   d6cf2:	f7fe feef 	bl	d5ad4 <log_message>
                    impl->peers_.removeOne(*peer);
   d6cf6:	4631      	mov	r1, r6
   d6cf8:	f104 0018 	add.w	r0, r4, #24
   d6cfc:	f7ff fea4 	bl	d6a48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6d00:	e74e      	b.n	d6ba0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d6d02:	2e0f      	cmp	r6, #15
   d6d04:	f47f af6f 	bne.w	d6be6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d6d08:	686b      	ldr	r3, [r5, #4]
   d6d0a:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6d0c:	7a2b      	ldrb	r3, [r5, #8]
   d6d0e:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d6d12:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d6d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6d1a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6d1e:	2308      	movs	r3, #8
   d6d20:	e760      	b.n	d6be4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d6d22:	bf00      	nop
   d6d24:	000d8c3b 	.word	0x000d8c3b
   d6d28:	000d8bfc 	.word	0x000d8bfc
   d6d2c:	000d8c61 	.word	0x000d8c61
   d6d30:	000d8c7e 	.word	0x000d8c7e

000d6d34 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d6d34:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d6d36:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d6d38:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6d3a:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d6d3e:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6d42:	6823      	ldr	r3, [r4, #0]
   d6d44:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d46:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6d48:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d6d4a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d6d4c:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d6d4e:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d6d50:	f7ff fddb 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d6d54:	4620      	mov	r0, r4
   d6d56:	b002      	add	sp, #8
   d6d58:	bd10      	pop	{r4, pc}

000d6d5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6d5a:	b513      	push	{r0, r1, r4, lr}
   d6d5c:	460b      	mov	r3, r1
   d6d5e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d60:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6d64:	466c      	mov	r4, sp
   d6d66:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6d6a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6d6e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6d72:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6d76:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6d7a:	b002      	add	sp, #8
   d6d7c:	bd10      	pop	{r4, pc}

000d6d7e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d6d7e:	b538      	push	{r3, r4, r5, lr}
   d6d80:	4605      	mov	r5, r0
   d6d82:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d6d84:	f7ff ffe9 	bl	d6d5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d88:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6d8a:	68a2      	ldr	r2, [r4, #8]
   d6d8c:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d8e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d90:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6d92:	68e2      	ldr	r2, [r4, #12]
   d6d94:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d96:	60e3      	str	r3, [r4, #12]
      }
   d6d98:	bd38      	pop	{r3, r4, r5, pc}

000d6d9a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d6d9a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6d9c:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d6d9e:	4604      	mov	r4, r0
   d6da0:	4608      	mov	r0, r1
	__x.swap(*this);
   d6da2:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d6da4:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d6da6:	f7ff ffea 	bl	d6d7e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d6daa:	4621      	mov	r1, r4
   d6dac:	4668      	mov	r0, sp
   d6dae:	f7ff ffe6 	bl	d6d7e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d6db2:	4668      	mov	r0, sp
   d6db4:	f7ff f9fd 	bl	d61b2 <_ZNSt14_Function_baseD1Ev>
      }
   d6db8:	4620      	mov	r0, r4
   d6dba:	b004      	add	sp, #16
   d6dbc:	bd10      	pop	{r4, pc}

000d6dbe <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d6dbe:	b570      	push	{r4, r5, r6, lr}
   d6dc0:	460e      	mov	r6, r1
   d6dc2:	b088      	sub	sp, #32
   d6dc4:	4604      	mov	r4, r0
   d6dc6:	9201      	str	r2, [sp, #4]
   d6dc8:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d6dca:	f7ff fb9b 	bl	d6504 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d6dce:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d6dd0:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d6dd2:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d6dd4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6dd8:	f7ff f8b1 	bl	d5f3e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d6ddc:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d6de0:	b185      	cbz	r5, d6e04 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d6de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6de4:	9502      	str	r5, [sp, #8]
   d6de6:	a902      	add	r1, sp, #8
   d6de8:	a804      	add	r0, sp, #16
   d6dea:	9303      	str	r3, [sp, #12]
   d6dec:	f7ff fd4c 	bl	d6888 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d6df0:	a904      	add	r1, sp, #16
   d6df2:	4630      	mov	r0, r6
   d6df4:	f7ff ffd1 	bl	d6d9a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d6df8:	a804      	add	r0, sp, #16
   d6dfa:	f7ff f9da 	bl	d61b2 <_ZNSt14_Function_baseD1Ev>
    }
   d6dfe:	4620      	mov	r0, r4
   d6e00:	b008      	add	sp, #32
   d6e02:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d6e04:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d6e06:	e7f3      	b.n	d6df0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d6e08 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6e0c:	b086      	sub	sp, #24
   d6e0e:	4607      	mov	r7, r0
   d6e10:	461d      	mov	r5, r3
   d6e12:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6e14:	2300      	movs	r3, #0
   d6e16:	4689      	mov	r9, r1
   d6e18:	4692      	mov	sl, r2
   d6e1a:	9304      	str	r3, [sp, #16]
   d6e1c:	f7fd f939 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6e20:	1e06      	subs	r6, r0, #0
   d6e22:	f106 080c 	add.w	r8, r6, #12
   d6e26:	d01d      	beq.n	d6e64 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d6e28:	2301      	movs	r3, #1
	: _M_impl(__a)
   d6e2a:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d6e2c:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d6e30:	4b15      	ldr	r3, [pc, #84]	; (d6e88 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d6e32:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d6e36:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d6e3a:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d6e3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d6e40:	9300      	str	r3, [sp, #0]
   d6e42:	464a      	mov	r2, r9
   d6e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6e46:	a903      	add	r1, sp, #12
   d6e48:	4640      	mov	r0, r8
   d6e4a:	f7ff ffb8 	bl	d6dbe <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d6e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e52:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d6e54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d6e56:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d6e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e5a:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d6e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e60:	682b      	ldr	r3, [r5, #0]
   d6e62:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d6e64:	a904      	add	r1, sp, #16
   d6e66:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d6e68:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d6e6c:	f7ff ff62 	bl	d6d34 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d6e70:	a805      	add	r0, sp, #20
   d6e72:	f7ff fd4a 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d6e76:	6839      	ldr	r1, [r7, #0]
   d6e78:	b919      	cbnz	r1, d6e82 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d6e7a:	4a04      	ldr	r2, [pc, #16]	; (d6e8c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d6e7c:	200a      	movs	r0, #10
   d6e7e:	f7fe fe21 	bl	d5ac4 <panic_>
}
   d6e82:	b006      	add	sp, #24
   d6e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6e88:	000d8cf8 	.word	0x000d8cf8
   d6e8c:	000d56bd 	.word	0x000d56bd

000d6e90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6e90:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e94:	4604      	mov	r4, r0
   d6e96:	460d      	mov	r5, r1
   d6e98:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6e9a:	d914      	bls.n	d6ec6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6e9c:	4290      	cmp	r0, r2
   d6e9e:	d213      	bcs.n	d6ec8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6ea0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6ea4:	1a75      	subs	r5, r6, r1
   d6ea6:	f1a1 0708 	sub.w	r7, r1, #8
   d6eaa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6eac:	42b7      	cmp	r7, r6
   d6eae:	d018      	beq.n	d6ee2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6eb0:	b11c      	cbz	r4, d6eba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d6eb2:	4631      	mov	r1, r6
   d6eb4:	4620      	mov	r0, r4
   d6eb6:	f7ff fd14 	bl	d68e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6eba:	1d30      	adds	r0, r6, #4
   d6ebc:	f7ff fd25 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6ec0:	3e08      	subs	r6, #8
   d6ec2:	3c08      	subs	r4, #8
   d6ec4:	e7f2      	b.n	d6eac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6ec6:	d00c      	beq.n	d6ee2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6ec8:	42b5      	cmp	r5, r6
   d6eca:	d00a      	beq.n	d6ee2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6ecc:	b11c      	cbz	r4, d6ed6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6ece:	4629      	mov	r1, r5
   d6ed0:	4620      	mov	r0, r4
   d6ed2:	f7ff fd06 	bl	d68e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6ed6:	1d28      	adds	r0, r5, #4
   d6ed8:	f7ff fd17 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6edc:	3508      	adds	r5, #8
   d6ede:	3408      	adds	r4, #8
   d6ee0:	e7f2      	b.n	d6ec8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ee4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6ee4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6ee6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6ee8:	4605      	mov	r5, r0
        if (n > 0) {
   d6eea:	dd11      	ble.n	d6f10 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6eec:	00f0      	lsls	r0, r6, #3
   d6eee:	f7fe fe8d 	bl	d5c0c <malloc>
            if (!d) {
   d6ef2:	4604      	mov	r4, r0
   d6ef4:	b158      	cbz	r0, d6f0e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6ef6:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6efa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6efe:	f7ff ffc7 	bl	d6e90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6f02:	6828      	ldr	r0, [r5, #0]
   d6f04:	f7fe fe8a 	bl	d5c1c <free>
        data_ = d;
   d6f08:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6f0a:	60ae      	str	r6, [r5, #8]
        return true;
   d6f0c:	2001      	movs	r0, #1
    }
   d6f0e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6f10:	2400      	movs	r4, #0
   d6f12:	e7f6      	b.n	d6f02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6f14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6f16:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6f18:	6845      	ldr	r5, [r0, #4]
   d6f1a:	4668      	mov	r0, sp
   d6f1c:	f7ff fce1 	bl	d68e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6f20:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6f24:	4299      	cmp	r1, r3
   d6f26:	da10      	bge.n	d6f4a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6f28:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6f2a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6f2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6f30:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6f34:	4629      	mov	r1, r5
   d6f36:	f105 0008 	add.w	r0, r5, #8
   d6f3a:	f7ff ffa9 	bl	d6e90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6f3e:	b98d      	cbnz	r5, d6f64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d6f40:	6863      	ldr	r3, [r4, #4]
   d6f42:	3301      	adds	r3, #1
   d6f44:	6063      	str	r3, [r4, #4]
    return true;
   d6f46:	2601      	movs	r6, #1
   d6f48:	e006      	b.n	d6f58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6f4a:	3101      	adds	r1, #1
   d6f4c:	4620      	mov	r0, r4
   d6f4e:	f7ff ffc9 	bl	d6ee4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6f52:	4606      	mov	r6, r0
   d6f54:	2800      	cmp	r0, #0
   d6f56:	d1e7      	bne.n	d6f28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d6f58:	a801      	add	r0, sp, #4
   d6f5a:	f7ff fcd6 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6f5e:	4630      	mov	r0, r6
   d6f60:	b002      	add	sp, #8
   d6f62:	bd70      	pop	{r4, r5, r6, pc}
   d6f64:	4669      	mov	r1, sp
   d6f66:	4628      	mov	r0, r5
   d6f68:	f7ff fcbb 	bl	d68e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6f6c:	e7e8      	b.n	d6f40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d6f6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6f6e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f72:	4604      	mov	r4, r0
   d6f74:	460d      	mov	r5, r1
   d6f76:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6f78:	d914      	bls.n	d6fa4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6f7a:	4290      	cmp	r0, r2
   d6f7c:	d213      	bcs.n	d6fa6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6f7e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6f82:	1a75      	subs	r5, r6, r1
   d6f84:	f1a1 0708 	sub.w	r7, r1, #8
   d6f88:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6f8a:	42b7      	cmp	r7, r6
   d6f8c:	d018      	beq.n	d6fc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6f8e:	b11c      	cbz	r4, d6f98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6f90:	4631      	mov	r1, r6
   d6f92:	4620      	mov	r0, r4
   d6f94:	f7ff fc97 	bl	d68c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6f98:	1d30      	adds	r0, r6, #4
   d6f9a:	f7ff fcb6 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6f9e:	3e08      	subs	r6, #8
   d6fa0:	3c08      	subs	r4, #8
   d6fa2:	e7f2      	b.n	d6f8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6fa4:	d00c      	beq.n	d6fc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6fa6:	42b5      	cmp	r5, r6
   d6fa8:	d00a      	beq.n	d6fc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6faa:	b11c      	cbz	r4, d6fb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6fac:	4629      	mov	r1, r5
   d6fae:	4620      	mov	r0, r4
   d6fb0:	f7ff fc89 	bl	d68c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6fb4:	1d28      	adds	r0, r5, #4
   d6fb6:	f7ff fca8 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6fba:	3508      	adds	r5, #8
   d6fbc:	3408      	adds	r4, #8
   d6fbe:	e7f2      	b.n	d6fa6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6fc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6fc2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6fc4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6fc6:	4605      	mov	r5, r0
        if (n > 0) {
   d6fc8:	dd11      	ble.n	d6fee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6fca:	00f0      	lsls	r0, r6, #3
   d6fcc:	f7fe fe1e 	bl	d5c0c <malloc>
            if (!d) {
   d6fd0:	4604      	mov	r4, r0
   d6fd2:	b158      	cbz	r0, d6fec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6fd4:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6fd8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6fdc:	f7ff ffc7 	bl	d6f6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6fe0:	6828      	ldr	r0, [r5, #0]
   d6fe2:	f7fe fe1b 	bl	d5c1c <free>
        data_ = d;
   d6fe6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6fe8:	60ae      	str	r6, [r5, #8]
        return true;
   d6fea:	2001      	movs	r0, #1
    }
   d6fec:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6fee:	2400      	movs	r4, #0
   d6ff0:	e7f6      	b.n	d6fe0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6ff2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6ff4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6ff6:	6845      	ldr	r5, [r0, #4]
   d6ff8:	4668      	mov	r0, sp
   d6ffa:	f7ff fc64 	bl	d68c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6ffe:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d7002:	4299      	cmp	r1, r3
   d7004:	da10      	bge.n	d7028 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7006:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7008:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d700a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d700e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7012:	4629      	mov	r1, r5
   d7014:	f105 0008 	add.w	r0, r5, #8
   d7018:	f7ff ffa9 	bl	d6f6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d701c:	b98d      	cbnz	r5, d7042 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d701e:	6863      	ldr	r3, [r4, #4]
   d7020:	3301      	adds	r3, #1
   d7022:	6063      	str	r3, [r4, #4]
    return true;
   d7024:	2601      	movs	r6, #1
   d7026:	e006      	b.n	d7036 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7028:	3101      	adds	r1, #1
   d702a:	4620      	mov	r0, r4
   d702c:	f7ff ffc9 	bl	d6fc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7030:	4606      	mov	r6, r0
   d7032:	2800      	cmp	r0, #0
   d7034:	d1e7      	bne.n	d7006 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7036:	a801      	add	r0, sp, #4
   d7038:	f7ff fc67 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d703c:	4630      	mov	r0, r6
   d703e:	b002      	add	sp, #8
   d7040:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d7042:	4669      	mov	r1, sp
   d7044:	4628      	mov	r0, r5
   d7046:	f7ff fc3e 	bl	d68c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d704a:	e7e8      	b.n	d701e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d704c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7050:	4617      	mov	r7, r2
   d7052:	b0a1      	sub	sp, #132	; 0x84
   d7054:	4680      	mov	r8, r0
    WiringBleLock lk;
   d7056:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7058:	460e      	mov	r6, r1
    WiringBleLock lk;
   d705a:	f7ff f8d3 	bl	d6204 <_ZN8particle3ble13WiringBleLockC1Ev>
   d705e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d7060:	7923      	ldrb	r3, [r4, #4]
   d7062:	b953      	cbnz	r3, d707a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d7064:	4639      	mov	r1, r7
   d7066:	4640      	mov	r0, r8
   d7068:	f7ff fc2d 	bl	d68c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d706c:	a80a      	add	r0, sp, #40	; 0x28
   d706e:	f7ff f8d1 	bl	d6214 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d7072:	4640      	mov	r0, r8
   d7074:	b021      	add	sp, #132	; 0x84
   d7076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d707a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d707c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d7080:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d7084:	9303      	str	r3, [sp, #12]
   d7086:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d708a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d708e:	9b03      	ldr	r3, [sp, #12]
   d7090:	429d      	cmp	r5, r3
   d7092:	d021      	beq.n	d70d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d7094:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d7098:	4658      	mov	r0, fp
   d709a:	f109 0114 	add.w	r1, r9, #20
   d709e:	f7ff f96a 	bl	d6376 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d70a2:	b1b8      	cbz	r0, d70d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d70a4:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d70a8:	4650      	mov	r0, sl
   d70aa:	f7ff f964 	bl	d6376 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d70ae:	b188      	cbz	r0, d70d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d70b0:	6823      	ldr	r3, [r4, #0]
   d70b2:	f8d9 2000 	ldr.w	r2, [r9]
   d70b6:	4053      	eors	r3, r2
   d70b8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d70bc:	d10a      	bne.n	d70d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d70be:	2220      	movs	r2, #32
   d70c0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d70c4:	4a5e      	ldr	r2, [pc, #376]	; (d7240 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d70c6:	9200      	str	r2, [sp, #0]
   d70c8:	aa15      	add	r2, sp, #84	; 0x54
   d70ca:	495e      	ldr	r1, [pc, #376]	; (d7244 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d70cc:	2032      	movs	r0, #50	; 0x32
   d70ce:	f7fe fd01 	bl	d5ad4 <log_message>
   d70d2:	e7c7      	b.n	d7064 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d70d4:	3508      	adds	r5, #8
   d70d6:	e7da      	b.n	d708e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d70d8:	4650      	mov	r0, sl
   d70da:	f7ff f917 	bl	d630c <_ZNK8particle7BleUuid7isValidEv>
   d70de:	b960      	cbnz	r0, d70fa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d70e0:	4959      	ldr	r1, [pc, #356]	; (d7248 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d70e2:	2201      	movs	r2, #1
   d70e4:	a815      	add	r0, sp, #84	; 0x54
   d70e6:	ad15      	add	r5, sp, #84	; 0x54
   d70e8:	f7ff f8e7 	bl	d62ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d70ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70ee:	46d4      	mov	ip, sl
   d70f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d70f4:	682b      	ldr	r3, [r5, #0]
   d70f6:	f8cc 3000 	str.w	r3, [ip]
   d70fa:	6833      	ldr	r3, [r6, #0]
   d70fc:	e9d3 5300 	ldrd	r5, r3, [r3]
   d7100:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d7104:	455d      	cmp	r5, fp
   d7106:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d7108:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d710a:	d06e      	beq.n	d71ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d710c:	f855 0b08 	ldr.w	r0, [r5], #8
   d7110:	f7ff f931 	bl	d6376 <_ZNK8particle7BleUuideqERKS0_>
   d7114:	2800      	cmp	r0, #0
   d7116:	d0f5      	beq.n	d7104 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d7118:	f104 0a14 	add.w	sl, r4, #20
   d711c:	4650      	mov	r0, sl
   d711e:	f7ff f8f5 	bl	d630c <_ZNK8particle7BleUuid7isValidEv>
   d7122:	b988      	cbnz	r0, d7148 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d7124:	4b49      	ldr	r3, [pc, #292]	; (d724c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7126:	4948      	ldr	r1, [pc, #288]	; (d7248 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d7128:	881a      	ldrh	r2, [r3, #0]
   d712a:	3201      	adds	r2, #1
   d712c:	b292      	uxth	r2, r2
   d712e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7130:	a815      	add	r0, sp, #84	; 0x54
   d7132:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d7134:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7136:	f7ff f8df 	bl	d62f8 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d713a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d713c:	46d4      	mov	ip, sl
   d713e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7142:	682b      	ldr	r3, [r5, #0]
   d7144:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d7148:	2228      	movs	r2, #40	; 0x28
   d714a:	2100      	movs	r1, #0
   d714c:	a816      	add	r0, sp, #88	; 0x58
   d714e:	f000 fee5 	bl	d7f1c <memset>
    charInit.version = BLE_API_VERSION;
   d7152:	4b3f      	ldr	r3, [pc, #252]	; (d7250 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d7154:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d7156:	4651      	mov	r1, sl
   d7158:	a804      	add	r0, sp, #16
   d715a:	f7ff f8e9 	bl	d6330 <_ZN8particle7BleUuid7halUUIDEv>
   d715e:	ab04      	add	r3, sp, #16
   d7160:	aa18      	add	r2, sp, #96	; 0x60
   d7162:	f10d 0c20 	add.w	ip, sp, #32
   d7166:	6818      	ldr	r0, [r3, #0]
   d7168:	6859      	ldr	r1, [r3, #4]
   d716a:	4615      	mov	r5, r2
   d716c:	c503      	stmia	r5!, {r0, r1}
   d716e:	3308      	adds	r3, #8
   d7170:	4563      	cmp	r3, ip
   d7172:	462a      	mov	r2, r5
   d7174:	d1f7      	bne.n	d7166 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d7176:	6818      	ldr	r0, [r3, #0]
   d7178:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d717a:	7923      	ldrb	r3, [r4, #4]
   d717c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d7180:	f8d9 3000 	ldr.w	r3, [r9]
   d7184:	8a9b      	ldrh	r3, [r3, #20]
   d7186:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d718a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d718c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d718e:	4b31      	ldr	r3, [pc, #196]	; (d7254 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7190:	2200      	movs	r2, #0
   d7192:	1da1      	adds	r1, r4, #6
   d7194:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d7196:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d719a:	f7fe fafb 	bl	d5794 <hal_ble_gatt_server_add_characteristic>
   d719e:	2800      	cmp	r0, #0
   d71a0:	f47f af60 	bne.w	d7064 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d71a4:	2301      	movs	r3, #1
   d71a6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d71a8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d71aa:	4639      	mov	r1, r7
        return characteristics_;
   d71ac:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d71ae:	a80d      	add	r0, sp, #52	; 0x34
   d71b0:	f7ff fb89 	bl	d68c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d71b4:	4620      	mov	r0, r4
   d71b6:	a90d      	add	r1, sp, #52	; 0x34
   d71b8:	f7ff ff1b 	bl	d6ff2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d71bc:	4604      	mov	r4, r0
   d71be:	a80e      	add	r0, sp, #56	; 0x38
   d71c0:	f7ff fba3 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d71c4:	2c00      	cmp	r4, #0
   d71c6:	f47f af4d 	bne.w	d7064 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d71ca:	2320      	movs	r3, #32
   d71cc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d71d0:	4b21      	ldr	r3, [pc, #132]	; (d7258 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d71d2:	9300      	str	r3, [sp, #0]
   d71d4:	aa0d      	add	r2, sp, #52	; 0x34
   d71d6:	4623      	mov	r3, r4
   d71d8:	e777      	b.n	d70ca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d71da:	4639      	mov	r1, r7
   d71dc:	4640      	mov	r0, r8
   d71de:	f7ff fb72 	bl	d68c6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d71e2:	a80c      	add	r0, sp, #48	; 0x30
   d71e4:	f7ff fb91 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d71e8:	e740      	b.n	d706c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d71ea:	a80b      	add	r0, sp, #44	; 0x2c
   d71ec:	f7ff fa1c 	bl	d6628 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d71f0:	4651      	mov	r1, sl
   d71f2:	a815      	add	r0, sp, #84	; 0x54
   d71f4:	f7ff f89c 	bl	d6330 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d71f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d71fa:	2300      	movs	r3, #0
   d71fc:	3214      	adds	r2, #20
   d71fe:	a915      	add	r1, sp, #84	; 0x54
   d7200:	2001      	movs	r0, #1
   d7202:	f7fe fa95 	bl	d5730 <hal_ble_gatt_server_add_service>
   d7206:	2800      	cmp	r0, #0
   d7208:	d1e7      	bne.n	d71da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d720a:	6835      	ldr	r5, [r6, #0]
   d720c:	a90b      	add	r1, sp, #44	; 0x2c
   d720e:	a80d      	add	r0, sp, #52	; 0x34
   d7210:	f7ff fb67 	bl	d68e2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d7214:	4628      	mov	r0, r5
   d7216:	a90d      	add	r1, sp, #52	; 0x34
   d7218:	f7ff fe7c 	bl	d6f14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d721c:	4605      	mov	r5, r0
   d721e:	a80e      	add	r0, sp, #56	; 0x38
   d7220:	f7ff fb73 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7224:	2d00      	cmp	r5, #0
   d7226:	d0d8      	beq.n	d71da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d7228:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d722a:	6853      	ldr	r3, [r2, #4]
   d722c:	6812      	ldr	r2, [r2, #0]
   d722e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d7232:	3b01      	subs	r3, #1
   d7234:	a80c      	add	r0, sp, #48	; 0x30
   d7236:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d723a:	f7ff fb66 	bl	d690a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d723e:	e76b      	b.n	d7118 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d7240:	000d8c9d 	.word	0x000d8c9d
   d7244:	000d8bfc 	.word	0x000d8bfc
   d7248:	000d8d5c 	.word	0x000d8d5c
   d724c:	2003e660 	.word	0x2003e660
   d7250:	002c0001 	.word	0x002c0001
   d7254:	000d67b9 	.word	0x000d67b9
   d7258:	000d8cc8 	.word	0x000d8cc8

000d725c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d725c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d725e:	4c06      	ldr	r4, [pc, #24]	; (d7278 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7260:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7262:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7264:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7266:	f7fe facd 	bl	d5804 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d726a:	4620      	mov	r0, r4
   d726c:	4a03      	ldr	r2, [pc, #12]	; (d727c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d726e:	4904      	ldr	r1, [pc, #16]	; (d7280 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7274:	f000 bcf0 	b.w	d7c58 <__aeabi_atexit>
   d7278:	2003e664 	.word	0x2003e664
   d727c:	2003e56c 	.word	0x2003e56c
   d7280:	000d6053 	.word	0x000d6053

000d7284 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7286:	4606      	mov	r6, r0
   d7288:	460d      	mov	r5, r1
  size_t n = 0;
   d728a:	188f      	adds	r7, r1, r2
   d728c:	2400      	movs	r4, #0
  while (size--) {
   d728e:	42bd      	cmp	r5, r7
   d7290:	d00c      	beq.n	d72ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7292:	6833      	ldr	r3, [r6, #0]
   d7294:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7298:	689b      	ldr	r3, [r3, #8]
   d729a:	4630      	mov	r0, r6
   d729c:	4798      	blx	r3
     if (chunk>=0)
   d729e:	1e03      	subs	r3, r0, #0
   d72a0:	db01      	blt.n	d72a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d72a2:	441c      	add	r4, r3
  while (size--) {
   d72a4:	e7f3      	b.n	d728e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d72a6:	2c00      	cmp	r4, #0
   d72a8:	bf08      	it	eq
   d72aa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d72ac:	4620      	mov	r0, r4
   d72ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d72b0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d72b0:	b513      	push	{r0, r1, r4, lr}
   d72b2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d72b4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d72b6:	b159      	cbz	r1, d72d0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d72b8:	9101      	str	r1, [sp, #4]
   d72ba:	f000 fe65 	bl	d7f88 <strlen>
   d72be:	6823      	ldr	r3, [r4, #0]
   d72c0:	9901      	ldr	r1, [sp, #4]
   d72c2:	68db      	ldr	r3, [r3, #12]
   d72c4:	4602      	mov	r2, r0
   d72c6:	4620      	mov	r0, r4
    }
   d72c8:	b002      	add	sp, #8
   d72ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d72ce:	4718      	bx	r3
    }
   d72d0:	b002      	add	sp, #8
   d72d2:	bd10      	pop	{r4, pc}

000d72d4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d72d4:	b508      	push	{r3, lr}
  return write(str);
   d72d6:	f7ff ffeb 	bl	d72b0 <_ZN5Print5writeEPKc>
}
   d72da:	bd08      	pop	{r3, pc}

000d72dc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d72dc:	6803      	ldr	r3, [r0, #0]
   d72de:	689b      	ldr	r3, [r3, #8]
   d72e0:	4718      	bx	r3

000d72e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d72e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d72e4:	210d      	movs	r1, #13
{
   d72e6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d72e8:	f7ff fff8 	bl	d72dc <_ZN5Print5printEc>
  n += print('\n');
   d72ec:	210a      	movs	r1, #10
  size_t n = print('\r');
   d72ee:	4604      	mov	r4, r0
  n += print('\n');
   d72f0:	4628      	mov	r0, r5
   d72f2:	f7ff fff3 	bl	d72dc <_ZN5Print5printEc>
  return n;
}
   d72f6:	4420      	add	r0, r4
   d72f8:	bd38      	pop	{r3, r4, r5, pc}

000d72fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d72fa:	b530      	push	{r4, r5, lr}
   d72fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d72fe:	2300      	movs	r3, #0
   d7300:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7304:	2a01      	cmp	r2, #1
   d7306:	bf98      	it	ls
   d7308:	220a      	movls	r2, #10
   d730a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d730c:	460d      	mov	r5, r1
   d730e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7312:	fb01 5312 	mls	r3, r1, r2, r5
   d7316:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d731a:	2b09      	cmp	r3, #9
   d731c:	bf94      	ite	ls
   d731e:	3330      	addls	r3, #48	; 0x30
   d7320:	3337      	addhi	r3, #55	; 0x37
   d7322:	b2db      	uxtb	r3, r3
  } while(n);
   d7324:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7326:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d732a:	d9ef      	bls.n	d730c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d732c:	4621      	mov	r1, r4
   d732e:	f7ff ffbf 	bl	d72b0 <_ZN5Print5writeEPKc>
}
   d7332:	b00b      	add	sp, #44	; 0x2c
   d7334:	bd30      	pop	{r4, r5, pc}

000d7336 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d733a:	b086      	sub	sp, #24
   d733c:	af00      	add	r7, sp, #0
   d733e:	4605      	mov	r5, r0
   d7340:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d7342:	1d38      	adds	r0, r7, #4
   d7344:	2114      	movs	r1, #20
{
   d7346:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7348:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d734a:	f7fe fc77 	bl	d5c3c <vsnprintf>

    if (n<bufsize)
   d734e:	2813      	cmp	r0, #19
   d7350:	d80e      	bhi.n	d7370 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7352:	1d39      	adds	r1, r7, #4
   d7354:	4628      	mov	r0, r5
   d7356:	f7ff ffab 	bl	d72b0 <_ZN5Print5writeEPKc>
   d735a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d735c:	b11e      	cbz	r6, d7366 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d735e:	4628      	mov	r0, r5
   d7360:	f7ff ffbf 	bl	d72e2 <_ZN5Print7printlnEv>
   d7364:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7366:	4620      	mov	r0, r4
   d7368:	3718      	adds	r7, #24
   d736a:	46bd      	mov	sp, r7
   d736c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7370:	f100 0308 	add.w	r3, r0, #8
   d7374:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7378:	46e8      	mov	r8, sp
        char bigger[n+1];
   d737a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d737e:	4622      	mov	r2, r4
   d7380:	1c41      	adds	r1, r0, #1
   d7382:	683b      	ldr	r3, [r7, #0]
   d7384:	4668      	mov	r0, sp
   d7386:	f7fe fc59 	bl	d5c3c <vsnprintf>
  return write(str);
   d738a:	4669      	mov	r1, sp
   d738c:	4628      	mov	r0, r5
   d738e:	f7ff ff8f 	bl	d72b0 <_ZN5Print5writeEPKc>
   d7392:	4604      	mov	r4, r0
   d7394:	46c5      	mov	sp, r8
   d7396:	e7e1      	b.n	d735c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7398 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7398:	2300      	movs	r3, #0
   d739a:	6840      	ldr	r0, [r0, #4]
   d739c:	461a      	mov	r2, r3
   d739e:	4619      	mov	r1, r3
   d73a0:	f7fe bbec 	b.w	d5b7c <network_on>

000d73a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d73a4:	4b01      	ldr	r3, [pc, #4]	; (d73ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d73a6:	4a02      	ldr	r2, [pc, #8]	; (d73b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d73a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d73aa:	4770      	bx	lr
   d73ac:	2003e66c 	.word	0x2003e66c
   d73b0:	000d8d7c 	.word	0x000d8d7c

000d73b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d73b4:	4b02      	ldr	r3, [pc, #8]	; (d73c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d73b6:	681a      	ldr	r2, [r3, #0]
   d73b8:	4b02      	ldr	r3, [pc, #8]	; (d73c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d73ba:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d73bc:	4770      	bx	lr
   d73be:	bf00      	nop
   d73c0:	2003e504 	.word	0x2003e504
   d73c4:	2003e670 	.word	0x2003e670

000d73c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d73c8:	2100      	movs	r1, #0
   d73ca:	f7fe bb93 	b.w	d5af4 <system_delay_ms>

000d73ce <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d73ce:	b510      	push	{r4, lr}
   d73d0:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d73d2:	f7fe feee 	bl	d61b2 <_ZNSt14_Function_baseD1Ev>
   d73d6:	4620      	mov	r0, r4
   d73d8:	bd10      	pop	{r4, pc}

000d73da <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d73da:	b510      	push	{r4, lr}
   d73dc:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d73de:	f7fe fb61 	bl	d5aa4 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d73e2:	4284      	cmp	r4, r0
   d73e4:	d008      	beq.n	d73f8 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d73e6:	b11c      	cbz	r4, d73f0 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d73e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d73ec:	f7fe bb4a 	b.w	d5a84 <LED_Signaling_Start>
}
   d73f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d73f4:	f7fe bb4e 	b.w	d5a94 <LED_Signaling_Stop>
}
   d73f8:	bd10      	pop	{r4, pc}

000d73fa <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d73fa:	b570      	push	{r4, r5, r6, lr}
   d73fc:	4605      	mov	r5, r0
   d73fe:	460e      	mov	r6, r1
   d7400:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d7402:	f7fe fb4f 	bl	d5aa4 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d7406:	b150      	cbz	r0, d741e <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d7408:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d740c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d7410:	f7fe fb30 	bl	d5a74 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   d7414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   d7418:	20e7      	movs	r0, #231	; 0xe7
   d741a:	f7fe bb4b 	b.w	d5ab4 <LED_On>
}
   d741e:	bd70      	pop	{r4, r5, r6, pc}

000d7420 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7420:	4803      	ldr	r0, [pc, #12]	; (d7430 <_GLOBAL__sub_I_RGB+0x10>)
RGBClass RGB;
   d7422:	4a04      	ldr	r2, [pc, #16]	; (d7434 <_GLOBAL__sub_I_RGB+0x14>)
   d7424:	4904      	ldr	r1, [pc, #16]	; (d7438 <_GLOBAL__sub_I_RGB+0x18>)
   d7426:	2300      	movs	r3, #0
   d7428:	6083      	str	r3, [r0, #8]
   d742a:	f000 bc15 	b.w	d7c58 <__aeabi_atexit>
   d742e:	bf00      	nop
   d7430:	2003e674 	.word	0x2003e674
   d7434:	2003e56c 	.word	0x2003e56c
   d7438:	000d73cf 	.word	0x000d73cf

000d743c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d743c:	4b01      	ldr	r3, [pc, #4]	; (d7444 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d743e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7440:	4770      	bx	lr
   d7442:	bf00      	nop
   d7444:	2003e508 	.word	0x2003e508

000d7448 <serialEventRun>:
{
   d7448:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d744a:	4b0b      	ldr	r3, [pc, #44]	; (d7478 <serialEventRun+0x30>)
   d744c:	b143      	cbz	r3, d7460 <serialEventRun+0x18>
   d744e:	f000 f95b 	bl	d7708 <_Z16_fetch_usbserialv>
   d7452:	6803      	ldr	r3, [r0, #0]
   d7454:	691b      	ldr	r3, [r3, #16]
   d7456:	4798      	blx	r3
   d7458:	2800      	cmp	r0, #0
   d745a:	dd01      	ble.n	d7460 <serialEventRun+0x18>
        serialEvent();
   d745c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7460:	4b06      	ldr	r3, [pc, #24]	; (d747c <serialEventRun+0x34>)
   d7462:	b143      	cbz	r3, d7476 <serialEventRun+0x2e>
   d7464:	f000 f9ce 	bl	d7804 <_Z22__fetch_global_Serial1v>
   d7468:	6803      	ldr	r3, [r0, #0]
   d746a:	691b      	ldr	r3, [r3, #16]
   d746c:	4798      	blx	r3
   d746e:	2800      	cmp	r0, #0
   d7470:	dd01      	ble.n	d7476 <serialEventRun+0x2e>
        serialEvent1();
   d7472:	f3af 8000 	nop.w
}
   d7476:	bd08      	pop	{r3, pc}
	...

000d7480 <_post_loop>:
{
   d7480:	b508      	push	{r3, lr}
	serialEventRun();
   d7482:	f7ff ffe1 	bl	d7448 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7486:	f7fe f921 	bl	d56cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d748a:	4b01      	ldr	r3, [pc, #4]	; (d7490 <_post_loop+0x10>)
   d748c:	6018      	str	r0, [r3, #0]
}
   d748e:	bd08      	pop	{r3, pc}
   d7490:	2003e7d4 	.word	0x2003e7d4

000d7494 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7494:	4802      	ldr	r0, [pc, #8]	; (d74a0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7496:	4a03      	ldr	r2, [pc, #12]	; (d74a4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7498:	4903      	ldr	r1, [pc, #12]	; (d74a8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d749a:	1a12      	subs	r2, r2, r0
   d749c:	f000 bd16 	b.w	d7ecc <memcpy>
   d74a0:	2003f400 	.word	0x2003f400
   d74a4:	2003f404 	.word	0x2003f404
   d74a8:	000d8fd0 	.word	0x000d8fd0

000d74ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d74ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d74ae:	2300      	movs	r3, #0
   d74b0:	9300      	str	r3, [sp, #0]
   d74b2:	461a      	mov	r2, r3
   d74b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d74b8:	f7fe fb36 	bl	d5b28 <system_ctrl_set_result>
}
   d74bc:	b003      	add	sp, #12
   d74be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d74c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d74c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d74c6:	8843      	ldrh	r3, [r0, #2]
   d74c8:	2b0a      	cmp	r3, #10
   d74ca:	d008      	beq.n	d74de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d74cc:	2b50      	cmp	r3, #80	; 0x50
   d74ce:	d10b      	bne.n	d74e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d74d0:	4b09      	ldr	r3, [pc, #36]	; (d74f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d74d2:	681b      	ldr	r3, [r3, #0]
   d74d4:	b14b      	cbz	r3, d74ea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d74d6:	b003      	add	sp, #12
   d74d8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d74dc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d74de:	f7ff ffe5 	bl	d74ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d74e2:	b003      	add	sp, #12
   d74e4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d74e8:	2300      	movs	r3, #0
   d74ea:	9300      	str	r3, [sp, #0]
   d74ec:	461a      	mov	r2, r3
   d74ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d74f2:	f7fe fb19 	bl	d5b28 <system_ctrl_set_result>
}
   d74f6:	e7f4      	b.n	d74e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d74f8:	2003e688 	.word	0x2003e688

000d74fc <module_user_init_hook>:
{
   d74fc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d74fe:	4c12      	ldr	r4, [pc, #72]	; (d7548 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7500:	4812      	ldr	r0, [pc, #72]	; (d754c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7502:	4d13      	ldr	r5, [pc, #76]	; (d7550 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7504:	2100      	movs	r1, #0
   d7506:	f7fe fba9 	bl	d5c5c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d750a:	6823      	ldr	r3, [r4, #0]
   d750c:	42ab      	cmp	r3, r5
   d750e:	4b11      	ldr	r3, [pc, #68]	; (d7554 <module_user_init_hook+0x58>)
   d7510:	bf0c      	ite	eq
   d7512:	2201      	moveq	r2, #1
   d7514:	2200      	movne	r2, #0
   d7516:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7518:	d002      	beq.n	d7520 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d751a:	f7ff ffbb 	bl	d7494 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d751e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7520:	f7fe f8c4 	bl	d56ac <HAL_RNG_GetRandomNumber>
   d7524:	4604      	mov	r4, r0
    srand(seed);
   d7526:	f000 fd01 	bl	d7f2c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d752a:	4b0b      	ldr	r3, [pc, #44]	; (d7558 <module_user_init_hook+0x5c>)
   d752c:	b113      	cbz	r3, d7534 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d752e:	4620      	mov	r0, r4
   d7530:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7534:	2100      	movs	r1, #0
   d7536:	4808      	ldr	r0, [pc, #32]	; (d7558 <module_user_init_hook+0x5c>)
   d7538:	f7fe fb60 	bl	d5bfc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d753c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7540:	4806      	ldr	r0, [pc, #24]	; (d755c <module_user_init_hook+0x60>)
   d7542:	2100      	movs	r1, #0
   d7544:	f7fe bae6 	b.w	d5b14 <system_ctrl_set_app_request_handler>
   d7548:	2003f400 	.word	0x2003f400
   d754c:	000d743d 	.word	0x000d743d
   d7550:	9a271c1e 	.word	0x9a271c1e
   d7554:	2003e684 	.word	0x2003e684
   d7558:	00000000 	.word	0x00000000
   d755c:	000d74c5 	.word	0x000d74c5

000d7560 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7560:	4770      	bx	lr

000d7562 <_ZN9IPAddressD0Ev>:
   d7562:	b510      	push	{r4, lr}
   d7564:	2118      	movs	r1, #24
   d7566:	4604      	mov	r4, r0
   d7568:	f000 fb7b 	bl	d7c62 <_ZdlPvj>
   d756c:	4620      	mov	r0, r4
   d756e:	bd10      	pop	{r4, pc}

000d7570 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7570:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7572:	7d03      	ldrb	r3, [r0, #20]
   d7574:	2b06      	cmp	r3, #6
{
   d7576:	b08d      	sub	sp, #52	; 0x34
   d7578:	460e      	mov	r6, r1
   d757a:	f100 0704 	add.w	r7, r0, #4
   d757e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7582:	d012      	beq.n	d75aa <_ZNK9IPAddress7printToER5Print+0x3a>
   d7584:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7588:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d758c:	220a      	movs	r2, #10
   d758e:	4630      	mov	r0, r6
   d7590:	f7ff feb3 	bl	d72fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7594:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7596:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7598:	d019      	beq.n	d75ce <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d759a:	2c00      	cmp	r4, #0
   d759c:	d0f4      	beq.n	d7588 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d759e:	212e      	movs	r1, #46	; 0x2e
   d75a0:	4630      	mov	r0, r6
   d75a2:	f7ff fe9b 	bl	d72dc <_ZN5Print5printEc>
   d75a6:	4404      	add	r4, r0
   d75a8:	e7ee      	b.n	d7588 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d75aa:	232f      	movs	r3, #47	; 0x2f
   d75ac:	466a      	mov	r2, sp
   d75ae:	4639      	mov	r1, r7
   d75b0:	200a      	movs	r0, #10
		buf[0] = 0;
   d75b2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d75b6:	f7fe f945 	bl	d5844 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d75ba:	4668      	mov	r0, sp
   d75bc:	f000 fce4 	bl	d7f88 <strlen>
   d75c0:	6833      	ldr	r3, [r6, #0]
   d75c2:	4602      	mov	r2, r0
   d75c4:	68db      	ldr	r3, [r3, #12]
   d75c6:	4669      	mov	r1, sp
   d75c8:	4630      	mov	r0, r6
   d75ca:	4798      	blx	r3
   d75cc:	4604      	mov	r4, r0
    }
    return n;
}
   d75ce:	4620      	mov	r0, r4
   d75d0:	b00d      	add	sp, #52	; 0x34
   d75d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d75d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d75d4:	b510      	push	{r4, lr}
   d75d6:	4b05      	ldr	r3, [pc, #20]	; (d75ec <_ZN9IPAddressC1Ev+0x18>)
   d75d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d75da:	2211      	movs	r2, #17
   d75dc:	f840 3b04 	str.w	r3, [r0], #4
   d75e0:	2100      	movs	r1, #0
   d75e2:	f000 fc9b 	bl	d7f1c <memset>
}
   d75e6:	4620      	mov	r0, r4
   d75e8:	bd10      	pop	{r4, pc}
   d75ea:	bf00      	nop
   d75ec:	000d8da4 	.word	0x000d8da4

000d75f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d75f0:	4603      	mov	r3, r0
   d75f2:	4a07      	ldr	r2, [pc, #28]	; (d7610 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d75f4:	b510      	push	{r4, lr}
   d75f6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d75fa:	f101 0210 	add.w	r2, r1, #16
   d75fe:	f851 4b04 	ldr.w	r4, [r1], #4
   d7602:	f843 4b04 	str.w	r4, [r3], #4
   d7606:	4291      	cmp	r1, r2
   d7608:	d1f9      	bne.n	d75fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d760a:	780a      	ldrb	r2, [r1, #0]
   d760c:	701a      	strb	r2, [r3, #0]
}
   d760e:	bd10      	pop	{r4, pc}
   d7610:	000d8da4 	.word	0x000d8da4

000d7614 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7614:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7616:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d761a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d761e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7622:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7626:	2304      	movs	r3, #4
   d7628:	6041      	str	r1, [r0, #4]
   d762a:	7503      	strb	r3, [r0, #20]
}
   d762c:	bd10      	pop	{r4, pc}
	...

000d7630 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7630:	b513      	push	{r0, r1, r4, lr}
   d7632:	4b05      	ldr	r3, [pc, #20]	; (d7648 <_ZN9IPAddressC1EPKh+0x18>)
   d7634:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7636:	78cb      	ldrb	r3, [r1, #3]
   d7638:	9300      	str	r3, [sp, #0]
   d763a:	788b      	ldrb	r3, [r1, #2]
   d763c:	784a      	ldrb	r2, [r1, #1]
   d763e:	7809      	ldrb	r1, [r1, #0]
   d7640:	f7ff ffe8 	bl	d7614 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7644:	b002      	add	sp, #8
   d7646:	bd10      	pop	{r4, pc}
   d7648:	000d8da4 	.word	0x000d8da4

000d764c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d764c:	7441      	strb	r1, [r0, #17]
}
   d764e:	4770      	bx	lr

000d7650 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7650:	4770      	bx	lr

000d7652 <_ZN9USBSerial4readEv>:
{
   d7652:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7654:	2100      	movs	r1, #0
   d7656:	7c00      	ldrb	r0, [r0, #16]
   d7658:	f7fe f9f4 	bl	d5a44 <HAL_USB_USART_Receive_Data>
}
   d765c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7660:	bd08      	pop	{r3, pc}

000d7662 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7662:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7664:	2101      	movs	r1, #1
   d7666:	7c00      	ldrb	r0, [r0, #16]
   d7668:	f7fe f9ec 	bl	d5a44 <HAL_USB_USART_Receive_Data>
}
   d766c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7670:	bd08      	pop	{r3, pc}

000d7672 <_ZN9USBSerial17availableForWriteEv>:
{
   d7672:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7674:	7c00      	ldrb	r0, [r0, #16]
   d7676:	f7fe f9dd 	bl	d5a34 <HAL_USB_USART_Available_Data_For_Write>
}
   d767a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d767e:	bd08      	pop	{r3, pc}

000d7680 <_ZN9USBSerial9availableEv>:
{
   d7680:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7682:	7c00      	ldrb	r0, [r0, #16]
   d7684:	f7fe f9ce 	bl	d5a24 <HAL_USB_USART_Available_Data>
}
   d7688:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d768c:	bd08      	pop	{r3, pc}

000d768e <_ZN9USBSerial5writeEh>:
{
   d768e:	b513      	push	{r0, r1, r4, lr}
   d7690:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7692:	7c00      	ldrb	r0, [r0, #16]
{
   d7694:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7696:	f7fe f9cd 	bl	d5a34 <HAL_USB_USART_Available_Data_For_Write>
   d769a:	2800      	cmp	r0, #0
   d769c:	9901      	ldr	r1, [sp, #4]
   d769e:	dc01      	bgt.n	d76a4 <_ZN9USBSerial5writeEh+0x16>
   d76a0:	7c60      	ldrb	r0, [r4, #17]
   d76a2:	b120      	cbz	r0, d76ae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d76a4:	7c20      	ldrb	r0, [r4, #16]
   d76a6:	f7fe f9d5 	bl	d5a54 <HAL_USB_USART_Send_Data>
   d76aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d76ae:	b002      	add	sp, #8
   d76b0:	bd10      	pop	{r4, pc}

000d76b2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d76b2:	7c00      	ldrb	r0, [r0, #16]
   d76b4:	f7fe b9d6 	b.w	d5a64 <HAL_USB_USART_Flush_Data>

000d76b8 <_ZN9USBSerialD0Ev>:
   d76b8:	b510      	push	{r4, lr}
   d76ba:	2114      	movs	r1, #20
   d76bc:	4604      	mov	r4, r0
   d76be:	f000 fad0 	bl	d7c62 <_ZdlPvj>
   d76c2:	4620      	mov	r0, r4
   d76c4:	bd10      	pop	{r4, pc}
	...

000d76c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d76c8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d76ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d76ce:	4604      	mov	r4, r0
   d76d0:	4608      	mov	r0, r1
   d76d2:	2100      	movs	r1, #0
   d76d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d76d8:	4b04      	ldr	r3, [pc, #16]	; (d76ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d76da:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d76dc:	2301      	movs	r3, #1
  _serial = serial;
   d76de:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d76e0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d76e2:	4611      	mov	r1, r2
   d76e4:	f7fe f98e 	bl	d5a04 <HAL_USB_USART_Init>
}
   d76e8:	4620      	mov	r0, r4
   d76ea:	bd10      	pop	{r4, pc}
   d76ec:	000d8db8 	.word	0x000d8db8

000d76f0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d76f0:	7c00      	ldrb	r0, [r0, #16]
   d76f2:	2200      	movs	r2, #0
   d76f4:	f7fe b98e 	b.w	d5a14 <HAL_USB_USART_Begin>

000d76f8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d76f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d76fa:	2214      	movs	r2, #20
{
   d76fc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d76fe:	2100      	movs	r1, #0
   d7700:	f000 fc0c 	bl	d7f1c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7704:	4620      	mov	r0, r4
   d7706:	bd10      	pop	{r4, pc}

000d7708 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7708:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d770a:	4c10      	ldr	r4, [pc, #64]	; (d774c <_Z16_fetch_usbserialv+0x44>)
{
   d770c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d770e:	a803      	add	r0, sp, #12
   d7710:	f7ff fff2 	bl	d76f8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7714:	7821      	ldrb	r1, [r4, #0]
   d7716:	f3bf 8f5b 	dmb	ish
   d771a:	f011 0101 	ands.w	r1, r1, #1
   d771e:	d111      	bne.n	d7744 <_Z16_fetch_usbserialv+0x3c>
   d7720:	4620      	mov	r0, r4
   d7722:	9101      	str	r1, [sp, #4]
   d7724:	f7fc fcc6 	bl	d40b4 <__cxa_guard_acquire>
   d7728:	9901      	ldr	r1, [sp, #4]
   d772a:	b158      	cbz	r0, d7744 <_Z16_fetch_usbserialv+0x3c>
   d772c:	aa03      	add	r2, sp, #12
   d772e:	4808      	ldr	r0, [pc, #32]	; (d7750 <_Z16_fetch_usbserialv+0x48>)
   d7730:	f7ff ffca 	bl	d76c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7734:	4620      	mov	r0, r4
   d7736:	f7fc fcc2 	bl	d40be <__cxa_guard_release>
   d773a:	4a06      	ldr	r2, [pc, #24]	; (d7754 <_Z16_fetch_usbserialv+0x4c>)
   d773c:	4906      	ldr	r1, [pc, #24]	; (d7758 <_Z16_fetch_usbserialv+0x50>)
   d773e:	4804      	ldr	r0, [pc, #16]	; (d7750 <_Z16_fetch_usbserialv+0x48>)
   d7740:	f000 fa8a 	bl	d7c58 <__aeabi_atexit>
	return _usbserial;
}
   d7744:	4802      	ldr	r0, [pc, #8]	; (d7750 <_Z16_fetch_usbserialv+0x48>)
   d7746:	b008      	add	sp, #32
   d7748:	bd10      	pop	{r4, pc}
   d774a:	bf00      	nop
   d774c:	2003e68c 	.word	0x2003e68c
   d7750:	2003e690 	.word	0x2003e690
   d7754:	2003e56c 	.word	0x2003e56c
   d7758:	000d7651 	.word	0x000d7651

000d775c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d775c:	4770      	bx	lr

000d775e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d775e:	7441      	strb	r1, [r0, #17]
}
   d7760:	4770      	bx	lr

000d7762 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7762:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7764:	7c00      	ldrb	r0, [r0, #16]
   d7766:	f7fe f8ad 	bl	d58c4 <hal_usart_available_data_for_write>
}
   d776a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d776e:	bd08      	pop	{r3, pc}

000d7770 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7770:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7772:	7c00      	ldrb	r0, [r0, #16]
   d7774:	f7fe f87e 	bl	d5874 <hal_usart_available>
}
   d7778:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d777c:	bd08      	pop	{r3, pc}

000d777e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d777e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7780:	7c00      	ldrb	r0, [r0, #16]
   d7782:	f7fe f887 	bl	d5894 <hal_usart_peek>
}
   d7786:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d778a:	bd08      	pop	{r3, pc}

000d778c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d778c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d778e:	7c00      	ldrb	r0, [r0, #16]
   d7790:	f7fe f878 	bl	d5884 <hal_usart_read>
}
   d7794:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7798:	bd08      	pop	{r3, pc}

000d779a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d779a:	7c00      	ldrb	r0, [r0, #16]
   d779c:	f7fe b882 	b.w	d58a4 <hal_usart_flush>

000d77a0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d77a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d77a2:	7c45      	ldrb	r5, [r0, #17]
{
   d77a4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d77a6:	b12d      	cbz	r5, d77b4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d77a8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d77aa:	b003      	add	sp, #12
   d77ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d77b0:	f7fe b858 	b.w	d5864 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d77b4:	7c00      	ldrb	r0, [r0, #16]
   d77b6:	9101      	str	r1, [sp, #4]
   d77b8:	f7fe f884 	bl	d58c4 <hal_usart_available_data_for_write>
   d77bc:	2800      	cmp	r0, #0
   d77be:	9901      	ldr	r1, [sp, #4]
   d77c0:	dcf2      	bgt.n	d77a8 <_ZN11USARTSerial5writeEh+0x8>
}
   d77c2:	4628      	mov	r0, r5
   d77c4:	b003      	add	sp, #12
   d77c6:	bd30      	pop	{r4, r5, pc}

000d77c8 <_ZN11USARTSerialD0Ev>:
   d77c8:	b510      	push	{r4, lr}
   d77ca:	2114      	movs	r1, #20
   d77cc:	4604      	mov	r4, r0
   d77ce:	f000 fa48 	bl	d7c62 <_ZdlPvj>
   d77d2:	4620      	mov	r0, r4
   d77d4:	bd10      	pop	{r4, pc}
	...

000d77d8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d77d8:	b510      	push	{r4, lr}
   d77da:	f04f 0c00 	mov.w	ip, #0
   d77de:	4604      	mov	r4, r0
   d77e0:	4608      	mov	r0, r1
   d77e2:	4611      	mov	r1, r2
   d77e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d77e8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d77ec:	4a04      	ldr	r2, [pc, #16]	; (d7800 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d77ee:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d77f0:	2201      	movs	r2, #1
  _serial = serial;
   d77f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d77f4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d77f6:	461a      	mov	r2, r3
   d77f8:	f7fe f82c 	bl	d5854 <hal_usart_init>
}
   d77fc:	4620      	mov	r0, r4
   d77fe:	bd10      	pop	{r4, pc}
   d7800:	000d8de8 	.word	0x000d8de8

000d7804 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7804:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7806:	4c0e      	ldr	r4, [pc, #56]	; (d7840 <_Z22__fetch_global_Serial1v+0x3c>)
   d7808:	7821      	ldrb	r1, [r4, #0]
   d780a:	f3bf 8f5b 	dmb	ish
   d780e:	f011 0101 	ands.w	r1, r1, #1
   d7812:	d112      	bne.n	d783a <_Z22__fetch_global_Serial1v+0x36>
   d7814:	4620      	mov	r0, r4
   d7816:	9101      	str	r1, [sp, #4]
   d7818:	f7fc fc4c 	bl	d40b4 <__cxa_guard_acquire>
   d781c:	9901      	ldr	r1, [sp, #4]
   d781e:	b160      	cbz	r0, d783a <_Z22__fetch_global_Serial1v+0x36>
   d7820:	4a08      	ldr	r2, [pc, #32]	; (d7844 <_Z22__fetch_global_Serial1v+0x40>)
   d7822:	4b09      	ldr	r3, [pc, #36]	; (d7848 <_Z22__fetch_global_Serial1v+0x44>)
   d7824:	4809      	ldr	r0, [pc, #36]	; (d784c <_Z22__fetch_global_Serial1v+0x48>)
   d7826:	f7ff ffd7 	bl	d77d8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d782a:	4620      	mov	r0, r4
   d782c:	f7fc fc47 	bl	d40be <__cxa_guard_release>
   d7830:	4a07      	ldr	r2, [pc, #28]	; (d7850 <_Z22__fetch_global_Serial1v+0x4c>)
   d7832:	4908      	ldr	r1, [pc, #32]	; (d7854 <_Z22__fetch_global_Serial1v+0x50>)
   d7834:	4805      	ldr	r0, [pc, #20]	; (d784c <_Z22__fetch_global_Serial1v+0x48>)
   d7836:	f000 fa0f 	bl	d7c58 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d783a:	4804      	ldr	r0, [pc, #16]	; (d784c <_Z22__fetch_global_Serial1v+0x48>)
   d783c:	b002      	add	sp, #8
   d783e:	bd10      	pop	{r4, pc}
   d7840:	2003e6a4 	.word	0x2003e6a4
   d7844:	2003e6a8 	.word	0x2003e6a8
   d7848:	2003e72c 	.word	0x2003e72c
   d784c:	2003e7b0 	.word	0x2003e7b0
   d7850:	2003e56c 	.word	0x2003e56c
   d7854:	000d775d 	.word	0x000d775d

000d7858 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7858:	4770      	bx	lr

000d785a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d785a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d785c:	4606      	mov	r6, r0
   d785e:	4615      	mov	r5, r2
   d7860:	460c      	mov	r4, r1
   d7862:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7864:	42bc      	cmp	r4, r7
   d7866:	d006      	beq.n	d7876 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7868:	6833      	ldr	r3, [r6, #0]
   d786a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d786e:	689b      	ldr	r3, [r3, #8]
   d7870:	4630      	mov	r0, r6
   d7872:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7874:	e7f6      	b.n	d7864 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7876:	4628      	mov	r0, r5
   d7878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d787a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d787a:	7c00      	ldrb	r0, [r0, #16]
   d787c:	2200      	movs	r2, #0
   d787e:	f7fe b849 	b.w	d5914 <hal_i2c_write>

000d7882 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7882:	7c00      	ldrb	r0, [r0, #16]
   d7884:	2100      	movs	r1, #0
   d7886:	f7fe b84d 	b.w	d5924 <hal_i2c_available>

000d788a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d788a:	7c00      	ldrb	r0, [r0, #16]
   d788c:	2100      	movs	r1, #0
   d788e:	f7fe b851 	b.w	d5934 <hal_i2c_read>

000d7892 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7892:	7c00      	ldrb	r0, [r0, #16]
   d7894:	2100      	movs	r1, #0
   d7896:	f7fe b855 	b.w	d5944 <hal_i2c_peek>

000d789a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d789a:	7c00      	ldrb	r0, [r0, #16]
   d789c:	2100      	movs	r1, #0
   d789e:	f7fe b859 	b.w	d5954 <hal_i2c_flush>

000d78a2 <_ZN7TwoWireD0Ev>:
   d78a2:	b510      	push	{r4, lr}
   d78a4:	2114      	movs	r1, #20
   d78a6:	4604      	mov	r4, r0
   d78a8:	f000 f9db 	bl	d7c62 <_ZdlPvj>
   d78ac:	4620      	mov	r0, r4
   d78ae:	bd10      	pop	{r4, pc}

000d78b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d78b0:	b510      	push	{r4, lr}
   d78b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d78b6:	4604      	mov	r4, r0
   d78b8:	4608      	mov	r0, r1
   d78ba:	2100      	movs	r1, #0
   d78bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d78c0:	4b03      	ldr	r3, [pc, #12]	; (d78d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d78c2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d78c4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d78c6:	4611      	mov	r1, r2
   d78c8:	f7fe f854 	bl	d5974 <hal_i2c_init>
}
   d78cc:	4620      	mov	r0, r4
   d78ce:	bd10      	pop	{r4, pc}
   d78d0:	000d8e18 	.word	0x000d8e18

000d78d4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d78d4:	7c00      	ldrb	r0, [r0, #16]
   d78d6:	2200      	movs	r2, #0
   d78d8:	f7fd bffc 	b.w	d58d4 <hal_i2c_set_speed>

000d78dc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d78dc:	2300      	movs	r3, #0
   d78de:	7c00      	ldrb	r0, [r0, #16]
   d78e0:	461a      	mov	r2, r3
   d78e2:	4619      	mov	r1, r3
   d78e4:	f7fd bffe 	b.w	d58e4 <hal_i2c_begin>

000d78e8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d78e8:	7c00      	ldrb	r0, [r0, #16]
   d78ea:	2200      	movs	r2, #0
   d78ec:	f7fe b802 	b.w	d58f4 <hal_i2c_begin_transmission>

000d78f0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d78f0:	b2c9      	uxtb	r1, r1
   d78f2:	f7ff bff9 	b.w	d78e8 <_ZN7TwoWire17beginTransmissionEh>

000d78f6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d78f6:	7c00      	ldrb	r0, [r0, #16]
   d78f8:	2200      	movs	r2, #0
   d78fa:	f7fe b803 	b.w	d5904 <hal_i2c_end_transmission>

000d78fe <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d78fe:	2101      	movs	r1, #1
   d7900:	f7ff bff9 	b.w	d78f6 <_ZN7TwoWire15endTransmissionEh>

000d7904 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7904:	2200      	movs	r2, #0
   d7906:	6840      	ldr	r0, [r0, #4]
   d7908:	4611      	mov	r1, r2
   d790a:	f7fe b92f 	b.w	d5b6c <network_ready>

000d790e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d790e:	2200      	movs	r2, #0
   d7910:	6840      	ldr	r0, [r0, #4]
   d7912:	4611      	mov	r1, r2
   d7914:	f7fe b94a 	b.w	d5bac <network_listening>

000d7918 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7918:	2200      	movs	r2, #0
   d791a:	6840      	ldr	r0, [r0, #4]
   d791c:	4611      	mov	r1, r2
   d791e:	f7fe b955 	b.w	d5bcc <network_get_listen_timeout>

000d7922 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7922:	6840      	ldr	r0, [r0, #4]
   d7924:	2200      	movs	r2, #0
   d7926:	f7fe b949 	b.w	d5bbc <network_set_listen_timeout>

000d792a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d792a:	6840      	ldr	r0, [r0, #4]
   d792c:	2200      	movs	r2, #0
   d792e:	f081 0101 	eor.w	r1, r1, #1
   d7932:	f7fe b933 	b.w	d5b9c <network_listen>

000d7936 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7936:	2300      	movs	r3, #0
   d7938:	6840      	ldr	r0, [r0, #4]
   d793a:	461a      	mov	r2, r3
   d793c:	4619      	mov	r1, r3
   d793e:	f7fe b925 	b.w	d5b8c <network_off>

000d7942 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7942:	2200      	movs	r2, #0
   d7944:	6840      	ldr	r0, [r0, #4]
   d7946:	4611      	mov	r1, r2
   d7948:	f7fe b900 	b.w	d5b4c <network_connecting>

000d794c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d794c:	6840      	ldr	r0, [r0, #4]
   d794e:	2200      	movs	r2, #0
   d7950:	2102      	movs	r1, #2
   d7952:	f7fe b903 	b.w	d5b5c <network_disconnect>

000d7956 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7956:	2300      	movs	r3, #0
   d7958:	6840      	ldr	r0, [r0, #4]
   d795a:	461a      	mov	r2, r3
   d795c:	f7fe b8ee 	b.w	d5b3c <network_connect>

000d7960 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7960:	4b02      	ldr	r3, [pc, #8]	; (d796c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7962:	2204      	movs	r2, #4
   d7964:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7966:	4a02      	ldr	r2, [pc, #8]	; (d7970 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7968:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d796a:	4770      	bx	lr
   d796c:	2003e7c4 	.word	0x2003e7c4
   d7970:	000d8e40 	.word	0x000d8e40

000d7974 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7974:	2300      	movs	r3, #0
   d7976:	6840      	ldr	r0, [r0, #4]
   d7978:	461a      	mov	r2, r3
   d797a:	f7fe b8df 	b.w	d5b3c <network_connect>

000d797e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d797e:	6840      	ldr	r0, [r0, #4]
   d7980:	2200      	movs	r2, #0
   d7982:	2102      	movs	r1, #2
   d7984:	f7fe b8ea 	b.w	d5b5c <network_disconnect>

000d7988 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7988:	2200      	movs	r2, #0
   d798a:	6840      	ldr	r0, [r0, #4]
   d798c:	4611      	mov	r1, r2
   d798e:	f7fe b8dd 	b.w	d5b4c <network_connecting>

000d7992 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7992:	2200      	movs	r2, #0
   d7994:	6840      	ldr	r0, [r0, #4]
   d7996:	4611      	mov	r1, r2
   d7998:	f7fe b8e8 	b.w	d5b6c <network_ready>

000d799c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d799c:	2300      	movs	r3, #0
   d799e:	6840      	ldr	r0, [r0, #4]
   d79a0:	461a      	mov	r2, r3
   d79a2:	4619      	mov	r1, r3
   d79a4:	f7fe b8ea 	b.w	d5b7c <network_on>

000d79a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d79a8:	2300      	movs	r3, #0
   d79aa:	6840      	ldr	r0, [r0, #4]
   d79ac:	461a      	mov	r2, r3
   d79ae:	4619      	mov	r1, r3
   d79b0:	f7fe b8ec 	b.w	d5b8c <network_off>

000d79b4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d79b4:	6840      	ldr	r0, [r0, #4]
   d79b6:	2100      	movs	r1, #0
   d79b8:	f7fe b910 	b.w	d5bdc <network_is_on>

000d79bc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d79bc:	6840      	ldr	r0, [r0, #4]
   d79be:	2100      	movs	r1, #0
   d79c0:	f7fe b914 	b.w	d5bec <network_is_off>

000d79c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d79c4:	6840      	ldr	r0, [r0, #4]
   d79c6:	2200      	movs	r2, #0
   d79c8:	f081 0101 	eor.w	r1, r1, #1
   d79cc:	f7fe b8e6 	b.w	d5b9c <network_listen>

000d79d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d79d0:	6840      	ldr	r0, [r0, #4]
   d79d2:	2200      	movs	r2, #0
   d79d4:	f7fe b8f2 	b.w	d5bbc <network_set_listen_timeout>

000d79d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d79d8:	2200      	movs	r2, #0
   d79da:	6840      	ldr	r0, [r0, #4]
   d79dc:	4611      	mov	r1, r2
   d79de:	f7fe b8f5 	b.w	d5bcc <network_get_listen_timeout>

000d79e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d79e2:	2200      	movs	r2, #0
   d79e4:	6840      	ldr	r0, [r0, #4]
   d79e6:	4611      	mov	r1, r2
   d79e8:	f7fe b8e0 	b.w	d5bac <network_listening>

000d79ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d79ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d79f0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d79f2:	b095      	sub	sp, #84	; 0x54
   d79f4:	4616      	mov	r6, r2
   d79f6:	460d      	mov	r5, r1
   d79f8:	4607      	mov	r7, r0
    IPAddress addr;
   d79fa:	f7ff fdeb 	bl	d75d4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d79fe:	4621      	mov	r1, r4
   d7a00:	2218      	movs	r2, #24
   d7a02:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7a04:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7a06:	f000 fa89 	bl	d7f1c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7a0a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7a0c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7a10:	4621      	mov	r1, r4
   d7a12:	466b      	mov	r3, sp
   d7a14:	aa0c      	add	r2, sp, #48	; 0x30
   d7a16:	4630      	mov	r0, r6
   d7a18:	f7fd fe20 	bl	d565c <netdb_getaddrinfo>
    if (!r) {
   d7a1c:	4604      	mov	r4, r0
   d7a1e:	2800      	cmp	r0, #0
   d7a20:	d14c      	bne.n	d7abc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a22:	4602      	mov	r2, r0
   d7a24:	2101      	movs	r1, #1
   d7a26:	6868      	ldr	r0, [r5, #4]
   d7a28:	f7fe f8a0 	bl	d5b6c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a2c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a2e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a30:	4622      	mov	r2, r4
   d7a32:	6868      	ldr	r0, [r5, #4]
   d7a34:	f7fe f89a 	bl	d5b6c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a38:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a3a:	4681      	mov	r9, r0
        bool ok = false;
   d7a3c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a3e:	2e00      	cmp	r6, #0
   d7a40:	d03c      	beq.n	d7abc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7a42:	2900      	cmp	r1, #0
   d7a44:	d13a      	bne.n	d7abc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7a46:	6873      	ldr	r3, [r6, #4]
   d7a48:	2b02      	cmp	r3, #2
   d7a4a:	d003      	beq.n	d7a54 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7a4c:	2b0a      	cmp	r3, #10
   d7a4e:	d011      	beq.n	d7a74 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a50:	69f6      	ldr	r6, [r6, #28]
   d7a52:	e7f4      	b.n	d7a3e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7a54:	f1b8 0f00 	cmp.w	r8, #0
   d7a58:	d00a      	beq.n	d7a70 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7a5a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7a5c:	a806      	add	r0, sp, #24
   d7a5e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7a60:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7a62:	f7ff fde5 	bl	d7630 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7a68:	1d3c      	adds	r4, r7, #4
   d7a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7a6c:	682b      	ldr	r3, [r5, #0]
   d7a6e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7a70:	4641      	mov	r1, r8
   d7a72:	e7ed      	b.n	d7a50 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7a74:	f1b9 0f00 	cmp.w	r9, #0
   d7a78:	d101      	bne.n	d7a7e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7a7a:	4649      	mov	r1, r9
   d7a7c:	e7e8      	b.n	d7a50 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7a7e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7a80:	2210      	movs	r2, #16
   d7a82:	a801      	add	r0, sp, #4
   d7a84:	f000 fa4a 	bl	d7f1c <memset>
                    a.v = 6;
   d7a88:	2306      	movs	r3, #6
   d7a8a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7a8e:	ad01      	add	r5, sp, #4
   d7a90:	f104 0308 	add.w	r3, r4, #8
   d7a94:	3418      	adds	r4, #24
   d7a96:	6818      	ldr	r0, [r3, #0]
   d7a98:	6859      	ldr	r1, [r3, #4]
   d7a9a:	462a      	mov	r2, r5
   d7a9c:	c203      	stmia	r2!, {r0, r1}
   d7a9e:	3308      	adds	r3, #8
   d7aa0:	42a3      	cmp	r3, r4
   d7aa2:	4615      	mov	r5, r2
   d7aa4:	d1f7      	bne.n	d7a96 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7aa6:	a901      	add	r1, sp, #4
   d7aa8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7aaa:	ad07      	add	r5, sp, #28
   d7aac:	f7ff fda0 	bl	d75f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ab2:	1d3c      	adds	r4, r7, #4
   d7ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ab6:	682b      	ldr	r3, [r5, #0]
   d7ab8:	7023      	strb	r3, [r4, #0]
   d7aba:	e7de      	b.n	d7a7a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7abc:	9800      	ldr	r0, [sp, #0]
   d7abe:	f7fd fdc5 	bl	d564c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7ac2:	4638      	mov	r0, r7
   d7ac4:	b015      	add	sp, #84	; 0x54
   d7ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7acc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7acc:	4b02      	ldr	r3, [pc, #8]	; (d7ad8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7ace:	4a03      	ldr	r2, [pc, #12]	; (d7adc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7ad0:	601a      	str	r2, [r3, #0]
   d7ad2:	2200      	movs	r2, #0
   d7ad4:	605a      	str	r2, [r3, #4]

} // spark
   d7ad6:	4770      	bx	lr
   d7ad8:	2003e7cc 	.word	0x2003e7cc
   d7adc:	000d8e7c 	.word	0x000d8e7c

000d7ae0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7ae0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7ae2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7ae4:	d902      	bls.n	d7aec <pinAvailable+0xc>
    return false;
   d7ae6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7ae8:	b002      	add	sp, #8
   d7aea:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7aec:	f1a0 030b 	sub.w	r3, r0, #11
   d7af0:	2b02      	cmp	r3, #2
   d7af2:	d81a      	bhi.n	d7b2a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7af4:	4c17      	ldr	r4, [pc, #92]	; (d7b54 <pinAvailable+0x74>)
   d7af6:	7821      	ldrb	r1, [r4, #0]
   d7af8:	f3bf 8f5b 	dmb	ish
   d7afc:	f011 0101 	ands.w	r1, r1, #1
   d7b00:	d10b      	bne.n	d7b1a <pinAvailable+0x3a>
   d7b02:	4620      	mov	r0, r4
   d7b04:	9101      	str	r1, [sp, #4]
   d7b06:	f7fc fad5 	bl	d40b4 <__cxa_guard_acquire>
   d7b0a:	9901      	ldr	r1, [sp, #4]
   d7b0c:	b128      	cbz	r0, d7b1a <pinAvailable+0x3a>
   d7b0e:	4812      	ldr	r0, [pc, #72]	; (d7b58 <pinAvailable+0x78>)
   d7b10:	f7fe f8f0 	bl	d5cf4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7b14:	4620      	mov	r0, r4
   d7b16:	f7fc fad2 	bl	d40be <__cxa_guard_release>
   d7b1a:	4b0f      	ldr	r3, [pc, #60]	; (d7b58 <pinAvailable+0x78>)
   d7b1c:	7818      	ldrb	r0, [r3, #0]
   d7b1e:	f7fd ff49 	bl	d59b4 <hal_spi_is_enabled>
   d7b22:	2800      	cmp	r0, #0
   d7b24:	d1df      	bne.n	d7ae6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7b26:	2001      	movs	r0, #1
   d7b28:	e7de      	b.n	d7ae8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7b2a:	2801      	cmp	r0, #1
   d7b2c:	d809      	bhi.n	d7b42 <pinAvailable+0x62>
   d7b2e:	f000 f86b 	bl	d7c08 <_Z19__fetch_global_Wirev>
   d7b32:	2100      	movs	r1, #0
   d7b34:	7c00      	ldrb	r0, [r0, #16]
   d7b36:	f7fd ff15 	bl	d5964 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7b3a:	f080 0001 	eor.w	r0, r0, #1
   d7b3e:	b2c0      	uxtb	r0, r0
   d7b40:	e7d2      	b.n	d7ae8 <pinAvailable+0x8>
   d7b42:	3809      	subs	r0, #9
   d7b44:	2801      	cmp	r0, #1
   d7b46:	d8ee      	bhi.n	d7b26 <pinAvailable+0x46>
   d7b48:	f7ff fe5c 	bl	d7804 <_Z22__fetch_global_Serial1v>
   d7b4c:	7c00      	ldrb	r0, [r0, #16]
   d7b4e:	f7fd feb1 	bl	d58b4 <hal_usart_is_enabled>
   d7b52:	e7f2      	b.n	d7b3a <pinAvailable+0x5a>
   d7b54:	2003e638 	.word	0x2003e638
   d7b58:	2003e63c 	.word	0x2003e63c

000d7b5c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b5c:	2823      	cmp	r0, #35	; 0x23
{
   d7b5e:	b538      	push	{r3, r4, r5, lr}
   d7b60:	4604      	mov	r4, r0
   d7b62:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b64:	d80a      	bhi.n	d7b7c <pinMode+0x20>
   d7b66:	29ff      	cmp	r1, #255	; 0xff
   d7b68:	d008      	beq.n	d7b7c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7b6a:	f7ff ffb9 	bl	d7ae0 <pinAvailable>
   d7b6e:	b128      	cbz	r0, d7b7c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7b70:	4629      	mov	r1, r5
   d7b72:	4620      	mov	r0, r4
}
   d7b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7b78:	f7fd bd78 	b.w	d566c <HAL_Pin_Mode>
}
   d7b7c:	bd38      	pop	{r3, r4, r5, pc}

000d7b7e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7b7e:	b538      	push	{r3, r4, r5, lr}
   d7b80:	4604      	mov	r4, r0
   d7b82:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7b84:	f7fd fd7a 	bl	d567c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7b88:	28ff      	cmp	r0, #255	; 0xff
   d7b8a:	d010      	beq.n	d7bae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7b8c:	2806      	cmp	r0, #6
   d7b8e:	d804      	bhi.n	d7b9a <digitalWrite+0x1c>
   d7b90:	234d      	movs	r3, #77	; 0x4d
   d7b92:	fa23 f000 	lsr.w	r0, r3, r0
   d7b96:	07c3      	lsls	r3, r0, #31
   d7b98:	d409      	bmi.n	d7bae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7b9a:	4620      	mov	r0, r4
   d7b9c:	f7ff ffa0 	bl	d7ae0 <pinAvailable>
   d7ba0:	b128      	cbz	r0, d7bae <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7ba2:	4629      	mov	r1, r5
   d7ba4:	4620      	mov	r0, r4
}
   d7ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7baa:	f7fd bd6f 	b.w	d568c <HAL_GPIO_Write>
}
   d7bae:	bd38      	pop	{r3, r4, r5, pc}

000d7bb0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7bb0:	b510      	push	{r4, lr}
   d7bb2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7bb4:	f7fd fd62 	bl	d567c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7bb8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7bba:	b2db      	uxtb	r3, r3
   d7bbc:	2b01      	cmp	r3, #1
   d7bbe:	d908      	bls.n	d7bd2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7bc0:	4620      	mov	r0, r4
   d7bc2:	f7ff ff8d 	bl	d7ae0 <pinAvailable>
   d7bc6:	b120      	cbz	r0, d7bd2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7bc8:	4620      	mov	r0, r4
}
   d7bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7bce:	f7fd bd65 	b.w	d569c <HAL_GPIO_Read>
}
   d7bd2:	2000      	movs	r0, #0
   d7bd4:	bd10      	pop	{r4, pc}
	...

000d7bd8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7bd8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7bda:	2300      	movs	r3, #0
   d7bdc:	2520      	movs	r5, #32
   d7bde:	8043      	strh	r3, [r0, #2]
   d7be0:	2314      	movs	r3, #20
{
   d7be2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7be4:	8003      	strh	r3, [r0, #0]
   d7be6:	6085      	str	r5, [r0, #8]
   d7be8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7bea:	4906      	ldr	r1, [pc, #24]	; (d7c04 <_Z17acquireWireBufferv+0x2c>)
   d7bec:	4628      	mov	r0, r5
   d7bee:	f000 f83a 	bl	d7c66 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7bf2:	4904      	ldr	r1, [pc, #16]	; (d7c04 <_Z17acquireWireBufferv+0x2c>)
	};
   d7bf4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7bf6:	4628      	mov	r0, r5
   d7bf8:	f000 f835 	bl	d7c66 <_ZnajRKSt9nothrow_t>
	};
   d7bfc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7bfe:	4620      	mov	r0, r4
   d7c00:	bd38      	pop	{r3, r4, r5, pc}
   d7c02:	bf00      	nop
   d7c04:	000d8eb0 	.word	0x000d8eb0

000d7c08 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7c08:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c0a:	4d0f      	ldr	r5, [pc, #60]	; (d7c48 <_Z19__fetch_global_Wirev+0x40>)
   d7c0c:	7829      	ldrb	r1, [r5, #0]
   d7c0e:	f3bf 8f5b 	dmb	ish
   d7c12:	f011 0401 	ands.w	r4, r1, #1
{
   d7c16:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c18:	d113      	bne.n	d7c42 <_Z19__fetch_global_Wirev+0x3a>
   d7c1a:	4628      	mov	r0, r5
   d7c1c:	f7fc fa4a 	bl	d40b4 <__cxa_guard_acquire>
   d7c20:	b178      	cbz	r0, d7c42 <_Z19__fetch_global_Wirev+0x3a>
   d7c22:	a801      	add	r0, sp, #4
   d7c24:	f7ff ffd8 	bl	d7bd8 <_Z17acquireWireBufferv>
   d7c28:	aa01      	add	r2, sp, #4
   d7c2a:	4621      	mov	r1, r4
   d7c2c:	4807      	ldr	r0, [pc, #28]	; (d7c4c <_Z19__fetch_global_Wirev+0x44>)
   d7c2e:	f7ff fe3f 	bl	d78b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7c32:	4628      	mov	r0, r5
   d7c34:	f7fc fa43 	bl	d40be <__cxa_guard_release>
   d7c38:	4a05      	ldr	r2, [pc, #20]	; (d7c50 <_Z19__fetch_global_Wirev+0x48>)
   d7c3a:	4906      	ldr	r1, [pc, #24]	; (d7c54 <_Z19__fetch_global_Wirev+0x4c>)
   d7c3c:	4803      	ldr	r0, [pc, #12]	; (d7c4c <_Z19__fetch_global_Wirev+0x44>)
   d7c3e:	f000 f80b 	bl	d7c58 <__aeabi_atexit>
	return wire;
}
   d7c42:	4802      	ldr	r0, [pc, #8]	; (d7c4c <_Z19__fetch_global_Wirev+0x44>)
   d7c44:	b007      	add	sp, #28
   d7c46:	bd30      	pop	{r4, r5, pc}
   d7c48:	2003e7d8 	.word	0x2003e7d8
   d7c4c:	2003e7dc 	.word	0x2003e7dc
   d7c50:	2003e56c 	.word	0x2003e56c
   d7c54:	000d7859 	.word	0x000d7859

000d7c58 <__aeabi_atexit>:
   d7c58:	460b      	mov	r3, r1
   d7c5a:	4601      	mov	r1, r0
   d7c5c:	4618      	mov	r0, r3
   d7c5e:	f000 b919 	b.w	d7e94 <__cxa_atexit>

000d7c62 <_ZdlPvj>:
   d7c62:	f7fc ba1a 	b.w	d409a <_ZdlPv>

000d7c66 <_ZnajRKSt9nothrow_t>:
   d7c66:	f7fc ba16 	b.w	d4096 <_Znaj>

000d7c6a <_ZSt25__throw_bad_function_callv>:
   d7c6a:	b508      	push	{r3, lr}
   d7c6c:	f7fd ffee 	bl	d5c4c <abort>

000d7c70 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7c70:	4901      	ldr	r1, [pc, #4]	; (d7c78 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7c72:	f000 b8f9 	b.w	d7e68 <_ZNKSt9type_infoeqERKS_>
   d7c76:	bf00      	nop
   d7c78:	000d8ecc 	.word	0x000d8ecc

000d7c7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7c7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7c7e:	2400      	movs	r4, #0
   d7c80:	2310      	movs	r3, #16
   d7c82:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d7c86:	6803      	ldr	r3, [r0, #0]
   d7c88:	9400      	str	r4, [sp, #0]
   d7c8a:	699e      	ldr	r6, [r3, #24]
   d7c8c:	f88d 4004 	strb.w	r4, [sp, #4]
   d7c90:	4615      	mov	r5, r2
   d7c92:	466b      	mov	r3, sp
   d7c94:	6812      	ldr	r2, [r2, #0]
   d7c96:	47b0      	blx	r6
   d7c98:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7c9c:	f003 0306 	and.w	r3, r3, #6
   d7ca0:	2b06      	cmp	r3, #6
   d7ca2:	bf03      	ittte	eq
   d7ca4:	9b00      	ldreq	r3, [sp, #0]
   d7ca6:	602b      	streq	r3, [r5, #0]
   d7ca8:	2001      	moveq	r0, #1
   d7caa:	4620      	movne	r0, r4
   d7cac:	b004      	add	sp, #16
   d7cae:	bd70      	pop	{r4, r5, r6, pc}

000d7cb0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7cb0:	9800      	ldr	r0, [sp, #0]
   d7cb2:	4290      	cmp	r0, r2
   d7cb4:	bf14      	ite	ne
   d7cb6:	2001      	movne	r0, #1
   d7cb8:	2006      	moveq	r0, #6
   d7cba:	4770      	bx	lr

000d7cbc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d7cbc:	b510      	push	{r4, lr}
   d7cbe:	4b03      	ldr	r3, [pc, #12]	; (d7ccc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7cc0:	6003      	str	r3, [r0, #0]
   d7cc2:	4604      	mov	r4, r0
   d7cc4:	f000 f8cd 	bl	d7e62 <_ZNSt9type_infoD1Ev>
   d7cc8:	4620      	mov	r0, r4
   d7cca:	bd10      	pop	{r4, pc}
   d7ccc:	000d8f0c 	.word	0x000d8f0c

000d7cd0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7cd0:	b510      	push	{r4, lr}
   d7cd2:	4604      	mov	r4, r0
   d7cd4:	f7ff fff2 	bl	d7cbc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7cd8:	4620      	mov	r0, r4
   d7cda:	2108      	movs	r1, #8
   d7cdc:	f7ff ffc1 	bl	d7c62 <_ZdlPvj>
   d7ce0:	4620      	mov	r0, r4
   d7ce2:	bd10      	pop	{r4, pc}

000d7ce4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7ce8:	461f      	mov	r7, r3
   d7cea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d7cee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7cf2:	4598      	cmp	r8, r3
   d7cf4:	4606      	mov	r6, r0
   d7cf6:	4615      	mov	r5, r2
   d7cf8:	d107      	bne.n	d7d0a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7cfa:	9907      	ldr	r1, [sp, #28]
   d7cfc:	f000 f8b4 	bl	d7e68 <_ZNKSt9type_infoeqERKS_>
   d7d00:	b118      	cbz	r0, d7d0a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7d02:	7165      	strb	r5, [r4, #5]
   d7d04:	2000      	movs	r0, #0
   d7d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7d0a:	4639      	mov	r1, r7
   d7d0c:	4630      	mov	r0, r6
   d7d0e:	f000 f8ab 	bl	d7e68 <_ZNKSt9type_infoeqERKS_>
   d7d12:	2800      	cmp	r0, #0
   d7d14:	d0f6      	beq.n	d7d04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7d16:	2301      	movs	r3, #1
   d7d18:	f8c4 8000 	str.w	r8, [r4]
   d7d1c:	7125      	strb	r5, [r4, #4]
   d7d1e:	71a3      	strb	r3, [r4, #6]
   d7d20:	e7f0      	b.n	d7d04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7d22 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7d22:	b538      	push	{r3, r4, r5, lr}
   d7d24:	4615      	mov	r5, r2
   d7d26:	461c      	mov	r4, r3
   d7d28:	f000 f89e 	bl	d7e68 <_ZNKSt9type_infoeqERKS_>
   d7d2c:	b120      	cbz	r0, d7d38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7d2e:	2308      	movs	r3, #8
   d7d30:	60e3      	str	r3, [r4, #12]
   d7d32:	2306      	movs	r3, #6
   d7d34:	6025      	str	r5, [r4, #0]
   d7d36:	7123      	strb	r3, [r4, #4]
   d7d38:	bd38      	pop	{r3, r4, r5, pc}

000d7d3a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7d3c:	4605      	mov	r5, r0
   d7d3e:	460c      	mov	r4, r1
   d7d40:	9201      	str	r2, [sp, #4]
   d7d42:	461e      	mov	r6, r3
   d7d44:	f000 f890 	bl	d7e68 <_ZNKSt9type_infoeqERKS_>
   d7d48:	b950      	cbnz	r0, d7d60 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7d4a:	2e03      	cmp	r6, #3
   d7d4c:	d808      	bhi.n	d7d60 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7d4e:	6823      	ldr	r3, [r4, #0]
   d7d50:	9a01      	ldr	r2, [sp, #4]
   d7d52:	695b      	ldr	r3, [r3, #20]
   d7d54:	4629      	mov	r1, r5
   d7d56:	4620      	mov	r0, r4
   d7d58:	b002      	add	sp, #8
   d7d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7d5e:	4718      	bx	r3
   d7d60:	b002      	add	sp, #8
   d7d62:	bd70      	pop	{r4, r5, r6, pc}

000d7d64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7d64:	b510      	push	{r4, lr}
   d7d66:	4b03      	ldr	r3, [pc, #12]	; (d7d74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7d68:	6003      	str	r3, [r0, #0]
   d7d6a:	4604      	mov	r4, r0
   d7d6c:	f7ff ffa6 	bl	d7cbc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7d70:	4620      	mov	r0, r4
   d7d72:	bd10      	pop	{r4, pc}
   d7d74:	000d8f6c 	.word	0x000d8f6c

000d7d78 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7d78:	b510      	push	{r4, lr}
   d7d7a:	4604      	mov	r4, r0
   d7d7c:	f7ff fff2 	bl	d7d64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7d80:	4620      	mov	r0, r4
   d7d82:	210c      	movs	r1, #12
   d7d84:	f7ff ff6d 	bl	d7c62 <_ZdlPvj>
   d7d88:	4620      	mov	r0, r4
   d7d8a:	bd10      	pop	{r4, pc}

000d7d8c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7d8e:	9f08      	ldr	r7, [sp, #32]
   d7d90:	4297      	cmp	r7, r2
   d7d92:	4605      	mov	r5, r0
   d7d94:	460e      	mov	r6, r1
   d7d96:	4614      	mov	r4, r2
   d7d98:	d00a      	beq.n	d7db0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7d9a:	68a8      	ldr	r0, [r5, #8]
   d7d9c:	6802      	ldr	r2, [r0, #0]
   d7d9e:	9708      	str	r7, [sp, #32]
   d7da0:	6a15      	ldr	r5, [r2, #32]
   d7da2:	4631      	mov	r1, r6
   d7da4:	4622      	mov	r2, r4
   d7da6:	46ac      	mov	ip, r5
   d7da8:	b003      	add	sp, #12
   d7daa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7dae:	4760      	bx	ip
   d7db0:	4619      	mov	r1, r3
   d7db2:	9301      	str	r3, [sp, #4]
   d7db4:	f000 f858 	bl	d7e68 <_ZNKSt9type_infoeqERKS_>
   d7db8:	9b01      	ldr	r3, [sp, #4]
   d7dba:	2800      	cmp	r0, #0
   d7dbc:	d0ed      	beq.n	d7d9a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7dbe:	2006      	movs	r0, #6
   d7dc0:	b003      	add	sp, #12
   d7dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7dc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7dc4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7dc8:	460d      	mov	r5, r1
   d7dca:	4619      	mov	r1, r3
   d7dcc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7dd0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7dd4:	4681      	mov	r9, r0
   d7dd6:	4617      	mov	r7, r2
   d7dd8:	4698      	mov	r8, r3
   d7dda:	f000 f845 	bl	d7e68 <_ZNKSt9type_infoeqERKS_>
   d7dde:	b190      	cbz	r0, d7e06 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7de0:	2d00      	cmp	r5, #0
   d7de2:	6034      	str	r4, [r6, #0]
   d7de4:	7137      	strb	r7, [r6, #4]
   d7de6:	db09      	blt.n	d7dfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7de8:	1961      	adds	r1, r4, r5
   d7dea:	458a      	cmp	sl, r1
   d7dec:	bf0c      	ite	eq
   d7dee:	2106      	moveq	r1, #6
   d7df0:	2101      	movne	r1, #1
   d7df2:	71b1      	strb	r1, [r6, #6]
   d7df4:	2000      	movs	r0, #0
   d7df6:	b001      	add	sp, #4
   d7df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7dfc:	3502      	adds	r5, #2
   d7dfe:	d1f9      	bne.n	d7df4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7e00:	2301      	movs	r3, #1
   d7e02:	71b3      	strb	r3, [r6, #6]
   d7e04:	e7f6      	b.n	d7df4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7e06:	4554      	cmp	r4, sl
   d7e08:	d106      	bne.n	d7e18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7e0a:	4659      	mov	r1, fp
   d7e0c:	4648      	mov	r0, r9
   d7e0e:	f000 f82b 	bl	d7e68 <_ZNKSt9type_infoeqERKS_>
   d7e12:	b108      	cbz	r0, d7e18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7e14:	7177      	strb	r7, [r6, #5]
   d7e16:	e7ed      	b.n	d7df4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7e18:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7e1c:	6803      	ldr	r3, [r0, #0]
   d7e1e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7e22:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7e26:	69dc      	ldr	r4, [r3, #28]
   d7e28:	463a      	mov	r2, r7
   d7e2a:	4643      	mov	r3, r8
   d7e2c:	4629      	mov	r1, r5
   d7e2e:	46a4      	mov	ip, r4
   d7e30:	b001      	add	sp, #4
   d7e32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e36:	4760      	bx	ip

000d7e38 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7e3c:	4607      	mov	r7, r0
   d7e3e:	460c      	mov	r4, r1
   d7e40:	4615      	mov	r5, r2
   d7e42:	461e      	mov	r6, r3
   d7e44:	f7ff ff6d 	bl	d7d22 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7e48:	b948      	cbnz	r0, d7e5e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7e4a:	68b8      	ldr	r0, [r7, #8]
   d7e4c:	6803      	ldr	r3, [r0, #0]
   d7e4e:	699f      	ldr	r7, [r3, #24]
   d7e50:	462a      	mov	r2, r5
   d7e52:	4633      	mov	r3, r6
   d7e54:	4621      	mov	r1, r4
   d7e56:	46bc      	mov	ip, r7
   d7e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7e5c:	4760      	bx	ip
   d7e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7e62 <_ZNSt9type_infoD1Ev>:
   d7e62:	4770      	bx	lr

000d7e64 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7e64:	2000      	movs	r0, #0
   d7e66:	4770      	bx	lr

000d7e68 <_ZNKSt9type_infoeqERKS_>:
   d7e68:	4281      	cmp	r1, r0
   d7e6a:	b508      	push	{r3, lr}
   d7e6c:	d00e      	beq.n	d7e8c <_ZNKSt9type_infoeqERKS_+0x24>
   d7e6e:	6840      	ldr	r0, [r0, #4]
   d7e70:	7803      	ldrb	r3, [r0, #0]
   d7e72:	2b2a      	cmp	r3, #42	; 0x2a
   d7e74:	d00c      	beq.n	d7e90 <_ZNKSt9type_infoeqERKS_+0x28>
   d7e76:	6849      	ldr	r1, [r1, #4]
   d7e78:	780b      	ldrb	r3, [r1, #0]
   d7e7a:	2b2a      	cmp	r3, #42	; 0x2a
   d7e7c:	bf08      	it	eq
   d7e7e:	3101      	addeq	r1, #1
   d7e80:	f000 f878 	bl	d7f74 <strcmp>
   d7e84:	fab0 f080 	clz	r0, r0
   d7e88:	0940      	lsrs	r0, r0, #5
   d7e8a:	bd08      	pop	{r3, pc}
   d7e8c:	2001      	movs	r0, #1
   d7e8e:	e7fc      	b.n	d7e8a <_ZNKSt9type_infoeqERKS_+0x22>
   d7e90:	2000      	movs	r0, #0
   d7e92:	e7fa      	b.n	d7e8a <_ZNKSt9type_infoeqERKS_+0x22>

000d7e94 <__cxa_atexit>:
   d7e94:	b510      	push	{r4, lr}
   d7e96:	4c05      	ldr	r4, [pc, #20]	; (d7eac <__cxa_atexit+0x18>)
   d7e98:	4613      	mov	r3, r2
   d7e9a:	b12c      	cbz	r4, d7ea8 <__cxa_atexit+0x14>
   d7e9c:	460a      	mov	r2, r1
   d7e9e:	4601      	mov	r1, r0
   d7ea0:	2002      	movs	r0, #2
   d7ea2:	f3af 8000 	nop.w
   d7ea6:	bd10      	pop	{r4, pc}
   d7ea8:	4620      	mov	r0, r4
   d7eaa:	e7fc      	b.n	d7ea6 <__cxa_atexit+0x12>
   d7eac:	00000000 	.word	0x00000000

000d7eb0 <memcmp>:
   d7eb0:	b530      	push	{r4, r5, lr}
   d7eb2:	3901      	subs	r1, #1
   d7eb4:	2400      	movs	r4, #0
   d7eb6:	42a2      	cmp	r2, r4
   d7eb8:	d101      	bne.n	d7ebe <memcmp+0xe>
   d7eba:	2000      	movs	r0, #0
   d7ebc:	e005      	b.n	d7eca <memcmp+0x1a>
   d7ebe:	5d03      	ldrb	r3, [r0, r4]
   d7ec0:	3401      	adds	r4, #1
   d7ec2:	5d0d      	ldrb	r5, [r1, r4]
   d7ec4:	42ab      	cmp	r3, r5
   d7ec6:	d0f6      	beq.n	d7eb6 <memcmp+0x6>
   d7ec8:	1b58      	subs	r0, r3, r5
   d7eca:	bd30      	pop	{r4, r5, pc}

000d7ecc <memcpy>:
   d7ecc:	440a      	add	r2, r1
   d7ece:	4291      	cmp	r1, r2
   d7ed0:	f100 33ff 	add.w	r3, r0, #4294967295
   d7ed4:	d100      	bne.n	d7ed8 <memcpy+0xc>
   d7ed6:	4770      	bx	lr
   d7ed8:	b510      	push	{r4, lr}
   d7eda:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7ede:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7ee2:	4291      	cmp	r1, r2
   d7ee4:	d1f9      	bne.n	d7eda <memcpy+0xe>
   d7ee6:	bd10      	pop	{r4, pc}

000d7ee8 <memmove>:
   d7ee8:	4288      	cmp	r0, r1
   d7eea:	b510      	push	{r4, lr}
   d7eec:	eb01 0402 	add.w	r4, r1, r2
   d7ef0:	d902      	bls.n	d7ef8 <memmove+0x10>
   d7ef2:	4284      	cmp	r4, r0
   d7ef4:	4623      	mov	r3, r4
   d7ef6:	d807      	bhi.n	d7f08 <memmove+0x20>
   d7ef8:	1e43      	subs	r3, r0, #1
   d7efa:	42a1      	cmp	r1, r4
   d7efc:	d008      	beq.n	d7f10 <memmove+0x28>
   d7efe:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7f02:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7f06:	e7f8      	b.n	d7efa <memmove+0x12>
   d7f08:	4402      	add	r2, r0
   d7f0a:	4601      	mov	r1, r0
   d7f0c:	428a      	cmp	r2, r1
   d7f0e:	d100      	bne.n	d7f12 <memmove+0x2a>
   d7f10:	bd10      	pop	{r4, pc}
   d7f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7f1a:	e7f7      	b.n	d7f0c <memmove+0x24>

000d7f1c <memset>:
   d7f1c:	4402      	add	r2, r0
   d7f1e:	4603      	mov	r3, r0
   d7f20:	4293      	cmp	r3, r2
   d7f22:	d100      	bne.n	d7f26 <memset+0xa>
   d7f24:	4770      	bx	lr
   d7f26:	f803 1b01 	strb.w	r1, [r3], #1
   d7f2a:	e7f9      	b.n	d7f20 <memset+0x4>

000d7f2c <srand>:
   d7f2c:	b538      	push	{r3, r4, r5, lr}
   d7f2e:	4b0d      	ldr	r3, [pc, #52]	; (d7f64 <srand+0x38>)
   d7f30:	681d      	ldr	r5, [r3, #0]
   d7f32:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7f34:	4604      	mov	r4, r0
   d7f36:	b97b      	cbnz	r3, d7f58 <srand+0x2c>
   d7f38:	2018      	movs	r0, #24
   d7f3a:	f7fd fe67 	bl	d5c0c <malloc>
   d7f3e:	4a0a      	ldr	r2, [pc, #40]	; (d7f68 <srand+0x3c>)
   d7f40:	4b0a      	ldr	r3, [pc, #40]	; (d7f6c <srand+0x40>)
   d7f42:	63a8      	str	r0, [r5, #56]	; 0x38
   d7f44:	e9c0 2300 	strd	r2, r3, [r0]
   d7f48:	4b09      	ldr	r3, [pc, #36]	; (d7f70 <srand+0x44>)
   d7f4a:	6083      	str	r3, [r0, #8]
   d7f4c:	230b      	movs	r3, #11
   d7f4e:	8183      	strh	r3, [r0, #12]
   d7f50:	2201      	movs	r2, #1
   d7f52:	2300      	movs	r3, #0
   d7f54:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7f58:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7f5a:	2200      	movs	r2, #0
   d7f5c:	611c      	str	r4, [r3, #16]
   d7f5e:	615a      	str	r2, [r3, #20]
   d7f60:	bd38      	pop	{r3, r4, r5, pc}
   d7f62:	bf00      	nop
   d7f64:	2003e508 	.word	0x2003e508
   d7f68:	abcd330e 	.word	0xabcd330e
   d7f6c:	e66d1234 	.word	0xe66d1234
   d7f70:	0005deec 	.word	0x0005deec

000d7f74 <strcmp>:
   d7f74:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7f78:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7f7c:	2a01      	cmp	r2, #1
   d7f7e:	bf28      	it	cs
   d7f80:	429a      	cmpcs	r2, r3
   d7f82:	d0f7      	beq.n	d7f74 <strcmp>
   d7f84:	1ad0      	subs	r0, r2, r3
   d7f86:	4770      	bx	lr

000d7f88 <strlen>:
   d7f88:	4603      	mov	r3, r0
   d7f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f8e:	2a00      	cmp	r2, #0
   d7f90:	d1fb      	bne.n	d7f8a <strlen+0x2>
   d7f92:	1a18      	subs	r0, r3, r0
   d7f94:	3801      	subs	r0, #1
   d7f96:	4770      	bx	lr

000d7f98 <strncpy>:
   d7f98:	b510      	push	{r4, lr}
   d7f9a:	3901      	subs	r1, #1
   d7f9c:	4603      	mov	r3, r0
   d7f9e:	b132      	cbz	r2, d7fae <strncpy+0x16>
   d7fa0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7fa4:	f803 4b01 	strb.w	r4, [r3], #1
   d7fa8:	3a01      	subs	r2, #1
   d7faa:	2c00      	cmp	r4, #0
   d7fac:	d1f7      	bne.n	d7f9e <strncpy+0x6>
   d7fae:	441a      	add	r2, r3
   d7fb0:	2100      	movs	r1, #0
   d7fb2:	4293      	cmp	r3, r2
   d7fb4:	d100      	bne.n	d7fb8 <strncpy+0x20>
   d7fb6:	bd10      	pop	{r4, pc}
   d7fb8:	f803 1b01 	strb.w	r1, [r3], #1
   d7fbc:	e7f9      	b.n	d7fb2 <strncpy+0x1a>

000d7fbe <strnlen>:
   d7fbe:	b510      	push	{r4, lr}
   d7fc0:	4602      	mov	r2, r0
   d7fc2:	4401      	add	r1, r0
   d7fc4:	428a      	cmp	r2, r1
   d7fc6:	4613      	mov	r3, r2
   d7fc8:	d101      	bne.n	d7fce <strnlen+0x10>
   d7fca:	1a18      	subs	r0, r3, r0
   d7fcc:	bd10      	pop	{r4, pc}
   d7fce:	781c      	ldrb	r4, [r3, #0]
   d7fd0:	3201      	adds	r2, #1
   d7fd2:	2c00      	cmp	r4, #0
   d7fd4:	d1f6      	bne.n	d7fc4 <strnlen+0x6>
   d7fd6:	e7f8      	b.n	d7fca <strnlen+0xc>

000d7fd8 <dynalib_user>:
   d7fd8:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d7fe8:	0000 0000 6f59 2075 7974 6570 2064 0031     ....You typed 1.
   d7ff8:	654d 7373 6761 2065 7266 6d6f 4120 6772     Message from Arg
   d8008:	6e6f 0a20 3600 3445 3030 3030 2d31 3542     on ..6E400001-B5
   d8018:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   d8028:	3245 4434 4343 3941 0045 4536 3034 3030     E24DCCA9E.6E4000
   d8038:	3230 422d 4135 2d33 3346 3339 452d 4130     02-B5A3-F393-E0A
   d8048:	2d39 3545 4530 3432 4344 4143 4539 3600     9-E50E24DCCA9E.6
   d8058:	3445 3030 3030 2d33 3542 3341 462d 3933     E400003-B5A3-F39
   d8068:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   d8078:	3941 0045 7874 7200 0078 6564 6166 6c75     A9E.tx.rx.defaul
   d8088:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   d8098:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   d80a8:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   d80b8:	7525 2520 2073 4f4d 4544 7525 003e          %u %s MODE%u>.

000d80c6 <_ZL4font>:
   d80c6:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d80d6:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d80e6:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d80f6:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d8106:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d8116:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d8126:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d8136:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d8146:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d8156:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d8166:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d8176:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d8186:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d8196:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d81a6:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d81b6:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d81c6:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d81d6:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d81e6:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d81f6:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d8206:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d8216:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d8226:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d8236:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d8246:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d8256:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d8266:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d8276:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d8286:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d8296:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d82a6:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d82b6:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d82c6:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d82d6:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d82e6:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d82f6:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d8306:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d8316:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d8326:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d8336:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d8346:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d8356:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d8366:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d8376:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d8386:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d8396:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d83a6:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d83b6:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d83c6:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d83d6:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d83e6:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d83f6:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d8406:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d8416:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d8426:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d8436:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d8446:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d8456:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d8466:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d8476:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d8486:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d8496:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d84a6:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d84b6:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d84c6:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d84d6:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d84e6:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d84f6:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d8506:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d8516:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d8526:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d8536:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d8546:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d8556:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d8566:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d8576:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d8586:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d8596:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d85a6:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d85b6:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000d85c8 <_ZTV12Adafruit_GFX>:
	...
   d85d8:	4b1d 000d 7285 000d 40a1 000d 4525 000d     .K...r...@..%E..
   d85e8:	4527 000d 4559 000d 4535 000d 4547 000d     'E..YE..5E..GE..
   d85f8:	4469 000d 4525 000d 4751 000d 46cb 000d     iD..%E..QG...F..
   d8608:	4571 000d 45af 000d 45e9 000d 462f 000d     qE...E...E../F..
   d8618:	46cd 000d 464b 000d                         .F..KF..

000d8620 <_ZTV16OledWingAdafruit>:
	...
   d8628:	4c2d 000d 4c4d 000d 4b1d 000d 7285 000d     -L..ML...K...r..
   d8638:	4d7d 000d 4525 000d 4527 000d 4559 000d     }M..%E..'E..YE..
   d8648:	4535 000d 4547 000d 4469 000d 4525 000d     5E..GE..iD..%E..
   d8658:	4751 000d 4f37 000d 54cb 000d 547d 000d     QG..7O...T..}T..
   d8668:	45e9 000d 462f 000d 46cd 000d 464b 000d     .E../F...F..KF..

000d8678 <_ZTVN8particle11SPISettingsE>:
	...
   d8680:	4415 000d 43e9 000d 43eb 000d               .D...C...C..

000d868c <_ZL12splash1_data>:
   d868c:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d869c:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d86ac:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d86bc:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d86cc:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d86dc:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d86f4:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d8704:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d8714:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d8724:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d8734:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d8744:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d8754:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d8764:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d8774:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d8784:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d8794:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d87a4:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d87b4:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d87c4:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d87d4:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d87e4:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d87f4:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d8804:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d881c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d8834:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d8844:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d8854:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d8864:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d8874:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d8884:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d8894:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d88a4:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d88b4:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d88c4:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d88d4:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d88e4:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d88f4:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d8904:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d8914:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d8924:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d8934:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d8944:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d894c <_ZL12splash2_data>:
   d894c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d895c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d896c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d8988:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d8998:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d89a8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d89b8:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d89c8:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d89d8:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d89e8:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d89f8:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d8a08:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d8a18:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d8a28:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d8a38:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d8a48:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d8a58:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d8a68:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d8a78:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d8a88:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d8a98:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d8aa8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d8ab8:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d8ac8:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d8ae0:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d8af0:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d8b00:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d8b10:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d8b20:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d8b2c <_ZTV16Adafruit_SSD1306>:
	...
   d8b34:	4d51 000d 4d69 000d 4b1d 000d 7285 000d     QM..iM...K...r..
   d8b44:	4d7d 000d 4525 000d 4527 000d 4559 000d     }M..%E..'E..YE..
   d8b54:	4535 000d 4547 000d 4469 000d 4525 000d     5E..GE..iD..%E..
   d8b64:	4751 000d 4f37 000d 54cb 000d 547d 000d     QG..7O...T..}T..
   d8b74:	45e9 000d 462f 000d 46cd 000d 464b 000d     .E../F...F..KF..

000d8b84 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d8b84:	8000 e0c0 f8f0 fefc                         ........

000d8b8c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d8b8c:	0100 0703 1f0f 7f3f                         ......?.

000d8b94 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d8b94:	d5ae a880                                   ....

000d8b98 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d8b98:	00d3 8d40                                   ..@.

000d8b9c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d8b9c:	0020 c8a1                                    ...

000d8ba0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d8ba0:	40db a6a4 af2e                              .@....

000d8ba6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d8ba6:	02da 8f81                                   ....

000d8baa <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d8baa:	12da                                         ...

000d8bad <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d8bad:	02da                                         ...

000d8bb0 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d8bb0:	0022 21ff 0000 0000                         "..!....

000d8bb8 <_ZTVN5spark13EthernetClassE>:
	...
   d8bc0:	5ccb 000d 5cc1 000d 5cb7 000d 5cad 000d     .\...\...\...\..
   d8bd0:	5ca1 000d 5c95 000d 79b5 000d 79bd 000d     .\...\...y...y..
   d8be0:	5c89 000d 5c81 000d 5c77 000d 5c6d 000d     .\...\..w\..m\..
   d8bf0:	79ed 000d                                   .y..

000d8bf4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8bf4:	0800 1810 2820 3830 6977 6972 676e 622e     .... (08wiring.b
   d8c04:	656c 5300 6174 7472 6420 7369 6f63 6576     le.Start discove
   d8c14:	6972 676e 7320 7265 6976 6563 2e73 5000     ring services..P
   d8c24:	6565 2072 6564 6976 6563 6920 2073 696d     eer device is mi
   d8c34:	7373 6e69 2167 4600 6961 656c 2064 6f74     ssing!.Failed to
   d8c44:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   d8c54:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   d8c64:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   d8c74:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   d8c84:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   d8c94:	6420 7665 6369 2e65 4400 7075 696c 6163      device..Duplica
   d8ca4:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   d8cb4:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   d8cc4:	6465 002e 6146 6c69 6465 7420 206f 7061     ed..Failed to ap
   d8cd4:	6570 646e 6c20 636f 6c61 6320 6168 6172     pend local chara
   d8ce4:	7463 7265 7369 6974 2e63 0000               cteristic...

000d8cf0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8cf8:	5f99 000d 5ffd 000d 61c5 000d 6027 000d     ._..._...a..'`..
   d8d08:	5f9d 000d                                   ._..

000d8d0c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8d14:	5f95 000d 600b 000d 5f97 000d 602b 000d     ._...`..._..+`..
   d8d24:	5fbd 000d                                   ._..

000d8d28 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8d30:	5f93 000d 6019 000d 6979 000d 602f 000d     ._...`..yi../`..
   d8d40:	5fdd 000d                                   ._..

000d8d44 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d8d4c:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d8d5c <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d8d5c:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000d8d6c <_ZN8particle7BleUuid9BASE_UUIDE>:
   d8d6c:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d8d7c:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d8d8c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d8d9c <_ZTV9IPAddress>:
	...
   d8da4:	7571 000d 7561 000d 7563 000d               qu..au..cu..

000d8db0 <_ZTV9USBSerial>:
	...
   d8db8:	7651 000d 76b9 000d 768f 000d 7285 000d     Qv...v...v...r..
   d8dc8:	7681 000d 7653 000d 7663 000d 76b3 000d     .v..Sv..cv...v..
   d8dd8:	7673 000d 764d 000d                         sv..Mv..

000d8de0 <_ZTV11USARTSerial>:
	...
   d8de8:	775d 000d 77c9 000d 77a1 000d 7285 000d     ]w...w...w...r..
   d8df8:	7771 000d 778d 000d 777f 000d 779b 000d     qw...w...w...w..
   d8e08:	775f 000d 7763 000d                         _w..cw..

000d8e10 <_ZTV7TwoWire>:
	...
   d8e18:	7859 000d 78a3 000d 787b 000d 785b 000d     Yx...x..{x..[x..
   d8e28:	7883 000d 788b 000d 7893 000d 789b 000d     .x...x...x...x..

000d8e38 <_ZTVN5spark9WiFiClassE>:
	...
   d8e40:	7957 000d 794d 000d 7943 000d 7905 000d     Wy..My..Cy...y..
   d8e50:	7399 000d 7937 000d 79b5 000d 79bd 000d     .s..7y...y...y..
   d8e60:	792b 000d 7923 000d 7919 000d 790f 000d     +y..#y...y...y..
   d8e70:	79ed 000d                                   .y..

000d8e74 <_ZTVN5spark12NetworkClassE>:
	...
   d8e7c:	7975 000d 797f 000d 7989 000d 7993 000d     uy...y...y...y..
   d8e8c:	799d 000d 79a9 000d 79b5 000d 79bd 000d     .y...y...y...y..
   d8e9c:	79c5 000d 79d1 000d 79d9 000d 79e3 000d     .y...y...y...y..
   d8eac:	79ed 000d                                   .y..

000d8eb0 <_ZSt7nothrow>:
	...

000d8eb1 <_ZTSSt19_Sp_make_shared_tag>:
   d8eb1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d8ec1:	6572 5f64 6174 0067 0000                     red_tag....

000d8ecc <_ZTISt19_Sp_make_shared_tag>:
   d8ecc:	8f0c 000d 8eb1 000d                         ........

000d8ed4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d8ed4:	8f6c 000d 8ee0 000d 8f90 000d               l...........

000d8ee0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d8ee0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d8ef0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d8f00:	0045 0000                                   E...

000d8f04 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d8f04:	0000 0000 8ed4 000d 7cbd 000d 7cd1 000d     .........|...|..
   d8f14:	7e65 000d 7e65 000d 7d3b 000d 7c7d 000d     e~..e~..;}..}|..
   d8f24:	7d23 000d 7ce5 000d 7cb1 000d               #}...|...|..

000d8f30 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d8f30:	8f6c 000d 8f3c 000d 8ed4 000d               l...<.......

000d8f3c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d8f3c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d8f4c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d8f5c:	666e 456f 0000 0000                         nfoE....

000d8f64 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d8f64:	0000 0000 8f30 000d 7d65 000d 7d79 000d     ....0...e}..y}..
   d8f74:	7e65 000d 7e65 000d 7d3b 000d 7c7d 000d     e~..e~..;}..}|..
   d8f84:	7e39 000d 7dc5 000d 7d8d 000d               9~...}...}..

000d8f90 <_ZTISt9type_info>:
   d8f90:	8f0c 000d 8f98 000d                         ........

000d8f98 <_ZTSSt9type_info>:
   d8f98:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d8fa5 <link_const_variable_data_end>:
   d8fa5:	00          	.byte	0x00
	...

000d8fa8 <link_constructors_location>:
   d8fa8:	000d42c5 	.word	0x000d42c5
   d8fac:	000d5cd5 	.word	0x000d5cd5
   d8fb0:	000d5e45 	.word	0x000d5e45
   d8fb4:	000d725d 	.word	0x000d725d
   d8fb8:	000d73a5 	.word	0x000d73a5
   d8fbc:	000d73b5 	.word	0x000d73b5
   d8fc0:	000d7421 	.word	0x000d7421
   d8fc4:	000d7961 	.word	0x000d7961
   d8fc8:	000d7acd 	.word	0x000d7acd

000d8fcc <link_constructors_end>:
   d8fcc:	00000000 	.word	0x00000000
